
H745_SYNTH_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006608  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  081068a8  081068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08106934  08106934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08106938  08106938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  10000000  0810693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000040c  10000060  0810699c  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000046c  0810699c  0002046c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017840  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000280c  00000000  00000000  00037913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001430  00000000  00000000  0003a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fc4  00000000  00000000  0003b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bc6e  00000000  00000000  0003c514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000191a3  00000000  00000000  00078182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196f04  00000000  00000000  00091325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005cdc  00000000  00000000  0022822c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  0022df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000060 	.word	0x10000060
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106890 	.word	0x08106890

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000064 	.word	0x10000064
 81002dc:	08106890 	.word	0x08106890

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100390:	b480      	push	{r7}
 8100392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100394:	4b09      	ldr	r3, [pc, #36]	; (81003bc <SystemInit+0x2c>)
 8100396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810039a:	4a08      	ldr	r2, [pc, #32]	; (81003bc <SystemInit+0x2c>)
 810039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81003a4:	4b05      	ldr	r3, [pc, #20]	; (81003bc <SystemInit+0x2c>)
 81003a6:	691b      	ldr	r3, [r3, #16]
 81003a8:	4a04      	ldr	r2, [pc, #16]	; (81003bc <SystemInit+0x2c>)
 81003aa:	f043 0310 	orr.w	r3, r3, #16
 81003ae:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003b0:	bf00      	nop
 81003b2:	46bd      	mov	sp, r7
 81003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003b8:	4770      	bx	lr
 81003ba:	bf00      	nop
 81003bc:	e000ed00 	.word	0xe000ed00

081003c0 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 81003c0:	b40f      	push	{r0, r1, r2, r3}
 81003c2:	b580      	push	{r7, lr}
 81003c4:	b082      	sub	sp, #8
 81003c6:	af00      	add	r7, sp, #0
  static char buffer[200];
  va_list args;
  va_start(args, fmt);
 81003c8:	f107 0314 	add.w	r3, r7, #20
 81003cc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 81003ce:	683b      	ldr	r3, [r7, #0]
 81003d0:	693a      	ldr	r2, [r7, #16]
 81003d2:	21c8      	movs	r1, #200	; 0xc8
 81003d4:	480b      	ldr	r0, [pc, #44]	; (8100404 <myprintf+0x44>)
 81003d6:	f005 fdc9 	bl	8105f6c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 81003da:	480a      	ldr	r0, [pc, #40]	; (8100404 <myprintf+0x44>)
 81003dc:	f7ff ff80 	bl	81002e0 <strlen>
 81003e0:	4603      	mov	r3, r0
 81003e2:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 81003e4:	687b      	ldr	r3, [r7, #4]
 81003e6:	b29a      	uxth	r2, r3
 81003e8:	f04f 33ff 	mov.w	r3, #4294967295
 81003ec:	4905      	ldr	r1, [pc, #20]	; (8100404 <myprintf+0x44>)
 81003ee:	4806      	ldr	r0, [pc, #24]	; (8100408 <myprintf+0x48>)
 81003f0:	f005 fc14 	bl	8105c1c <HAL_UART_Transmit>

}
 81003f4:	bf00      	nop
 81003f6:	3708      	adds	r7, #8
 81003f8:	46bd      	mov	sp, r7
 81003fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81003fe:	b004      	add	sp, #16
 8100400:	4770      	bx	lr
 8100402:	bf00      	nop
 8100404:	10000254 	.word	0x10000254
 8100408:	10000178 	.word	0x10000178

0810040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810040c:	b580      	push	{r7, lr}
 810040e:	b086      	sub	sp, #24
 8100410:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint32_t a_shot = 0;
 8100412:	2300      	movs	r3, #0
 8100414:	60fb      	str	r3, [r7, #12]
	uint32_t b_shot = 0;
 8100416:	2300      	movs	r3, #0
 8100418:	60bb      	str	r3, [r7, #8]
	int lidxA = 0;
 810041a:	2300      	movs	r3, #0
 810041c:	607b      	str	r3, [r7, #4]

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810041e:	4b38      	ldr	r3, [pc, #224]	; (8100500 <main+0xf4>)
 8100420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100424:	4a36      	ldr	r2, [pc, #216]	; (8100500 <main+0xf4>)
 8100426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810042a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810042e:	4b34      	ldr	r3, [pc, #208]	; (8100500 <main+0xf4>)
 8100430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100438:	603b      	str	r3, [r7, #0]
 810043a:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810043c:	2001      	movs	r0, #1
 810043e:	f002 f90f 	bl	8102660 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100442:	f002 f999 	bl	8102778 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100446:	2201      	movs	r2, #1
 8100448:	2102      	movs	r1, #2
 810044a:	2000      	movs	r0, #0
 810044c:	f002 f91a 	bl	8102684 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100450:	4b2c      	ldr	r3, [pc, #176]	; (8100504 <main+0xf8>)
 8100452:	681b      	ldr	r3, [r3, #0]
 8100454:	091b      	lsrs	r3, r3, #4
 8100456:	f003 030f 	and.w	r3, r3, #15
 810045a:	2b07      	cmp	r3, #7
 810045c:	d108      	bne.n	8100470 <main+0x64>
 810045e:	4b2a      	ldr	r3, [pc, #168]	; (8100508 <main+0xfc>)
 8100460:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100464:	4a28      	ldr	r2, [pc, #160]	; (8100508 <main+0xfc>)
 8100466:	f043 0301 	orr.w	r3, r3, #1
 810046a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810046e:	e007      	b.n	8100480 <main+0x74>
 8100470:	4b25      	ldr	r3, [pc, #148]	; (8100508 <main+0xfc>)
 8100472:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100476:	4a24      	ldr	r2, [pc, #144]	; (8100508 <main+0xfc>)
 8100478:	f043 0301 	orr.w	r3, r3, #1
 810047c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100480:	f000 faf6 	bl	8100a70 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100484:	f000 f982 	bl	810078c <MX_GPIO_Init>
  MX_ADC1_Init();
 8100488:	f000 f858 	bl	810053c <MX_ADC1_Init>
  MX_TIM3_Init();
 810048c:	f000 f8e2 	bl	8100654 <MX_TIM3_Init>
  MX_TIM4_Init();
 8100490:	f000 f92e 	bl	81006f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8100494:	481d      	ldr	r0, [pc, #116]	; (810050c <main+0x100>)
 8100496:	f000 ff0f 	bl	81012b8 <HAL_ADC_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 810049a:	481d      	ldr	r0, [pc, #116]	; (8100510 <main+0x104>)
 810049c:	f005 f892 	bl	81055c4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 81004a0:	481c      	ldr	r0, [pc, #112]	; (8100514 <main+0x108>)
 81004a2:	f005 f88f 	bl	81055c4 <HAL_TIM_Base_Start>

  myprintf("\r\n~ H745 Synth Startup ... ~\r\n\r\n");
 81004a6:	481c      	ldr	r0, [pc, #112]	; (8100518 <main+0x10c>)
 81004a8:	f7ff ff8a 	bl	81003c0 <myprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(HAL_GetTick() > (a_shot + 1000))
 81004ac:	f000 fb88 	bl	8100bc0 <HAL_GetTick>
 81004b0:	4602      	mov	r2, r0
 81004b2:	68fb      	ldr	r3, [r7, #12]
 81004b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 81004b8:	429a      	cmp	r2, r3
 81004ba:	d9f7      	bls.n	81004ac <main+0xa0>
	{
	  a_shot = HAL_GetTick();
 81004bc:	f000 fb80 	bl	8100bc0 <HAL_GetTick>
 81004c0:	60f8      	str	r0, [r7, #12]
	  if(adcConversionComplete == 1)
 81004c2:	4b16      	ldr	r3, [pc, #88]	; (810051c <main+0x110>)
 81004c4:	681b      	ldr	r3, [r3, #0]
 81004c6:	2b01      	cmp	r3, #1
 81004c8:	d1f0      	bne.n	81004ac <main+0xa0>
	  {
		  adcConversionComplete = 0;
 81004ca:	4b14      	ldr	r3, [pc, #80]	; (810051c <main+0x110>)
 81004cc:	2200      	movs	r2, #0
 81004ce:	601a      	str	r2, [r3, #0]
		  sprintf(strA1, "A0 - %d A1 - %d CONV RATE: %d\r\n", ad1, ad2, conv_rate);
 81004d0:	4b13      	ldr	r3, [pc, #76]	; (8100520 <main+0x114>)
 81004d2:	681a      	ldr	r2, [r3, #0]
 81004d4:	4b13      	ldr	r3, [pc, #76]	; (8100524 <main+0x118>)
 81004d6:	6819      	ldr	r1, [r3, #0]
 81004d8:	4b13      	ldr	r3, [pc, #76]	; (8100528 <main+0x11c>)
 81004da:	681b      	ldr	r3, [r3, #0]
 81004dc:	9300      	str	r3, [sp, #0]
 81004de:	460b      	mov	r3, r1
 81004e0:	4912      	ldr	r1, [pc, #72]	; (810052c <main+0x120>)
 81004e2:	4813      	ldr	r0, [pc, #76]	; (8100530 <main+0x124>)
 81004e4:	f005 fcf6 	bl	8105ed4 <siprintf>
		  myprintf("%s", strA1);
 81004e8:	4911      	ldr	r1, [pc, #68]	; (8100530 <main+0x124>)
 81004ea:	4812      	ldr	r0, [pc, #72]	; (8100534 <main+0x128>)
 81004ec:	f7ff ff68 	bl	81003c0 <myprintf>
		  ////HAL_UART_Transmit(&huart2, strA1, strlen(strA1), 0xFFFF);
		  crate = conv_rate;
 81004f0:	4b0d      	ldr	r3, [pc, #52]	; (8100528 <main+0x11c>)
 81004f2:	681b      	ldr	r3, [r3, #0]
 81004f4:	4a10      	ldr	r2, [pc, #64]	; (8100538 <main+0x12c>)
 81004f6:	6013      	str	r3, [r2, #0]
		  conv_rate = 0;
 81004f8:	4b0b      	ldr	r3, [pc, #44]	; (8100528 <main+0x11c>)
 81004fa:	2200      	movs	r2, #0
 81004fc:	601a      	str	r2, [r3, #0]
	if(HAL_GetTick() > (a_shot + 1000))
 81004fe:	e7d5      	b.n	81004ac <main+0xa0>
 8100500:	58024400 	.word	0x58024400
 8100504:	e000ed00 	.word	0xe000ed00
 8100508:	58026400 	.word	0x58026400
 810050c:	1000007c 	.word	0x1000007c
 8100510:	100000e0 	.word	0x100000e0
 8100514:	1000012c 	.word	0x1000012c
 8100518:	081068a8 	.word	0x081068a8
 810051c:	10000240 	.word	0x10000240
 8100520:	10000248 	.word	0x10000248
 8100524:	1000024c 	.word	0x1000024c
 8100528:	10000244 	.word	0x10000244
 810052c:	081068cc 	.word	0x081068cc
 8100530:	1000020c 	.word	0x1000020c
 8100534:	081068ec 	.word	0x081068ec
 8100538:	10000250 	.word	0x10000250

0810053c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810053c:	b580      	push	{r7, lr}
 810053e:	b08a      	sub	sp, #40	; 0x28
 8100540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100542:	f107 031c 	add.w	r3, r7, #28
 8100546:	2200      	movs	r2, #0
 8100548:	601a      	str	r2, [r3, #0]
 810054a:	605a      	str	r2, [r3, #4]
 810054c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810054e:	463b      	mov	r3, r7
 8100550:	2200      	movs	r2, #0
 8100552:	601a      	str	r2, [r3, #0]
 8100554:	605a      	str	r2, [r3, #4]
 8100556:	609a      	str	r2, [r3, #8]
 8100558:	60da      	str	r2, [r3, #12]
 810055a:	611a      	str	r2, [r3, #16]
 810055c:	615a      	str	r2, [r3, #20]
 810055e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100560:	4b38      	ldr	r3, [pc, #224]	; (8100644 <MX_ADC1_Init+0x108>)
 8100562:	4a39      	ldr	r2, [pc, #228]	; (8100648 <MX_ADC1_Init+0x10c>)
 8100564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8100566:	4b37      	ldr	r3, [pc, #220]	; (8100644 <MX_ADC1_Init+0x108>)
 8100568:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 810056c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 810056e:	4b35      	ldr	r3, [pc, #212]	; (8100644 <MX_ADC1_Init+0x108>)
 8100570:	2204      	movs	r2, #4
 8100572:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8100574:	4b33      	ldr	r3, [pc, #204]	; (8100644 <MX_ADC1_Init+0x108>)
 8100576:	2201      	movs	r2, #1
 8100578:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 810057a:	4b32      	ldr	r3, [pc, #200]	; (8100644 <MX_ADC1_Init+0x108>)
 810057c:	2208      	movs	r2, #8
 810057e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100580:	4b30      	ldr	r3, [pc, #192]	; (8100644 <MX_ADC1_Init+0x108>)
 8100582:	2200      	movs	r2, #0
 8100584:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100586:	4b2f      	ldr	r3, [pc, #188]	; (8100644 <MX_ADC1_Init+0x108>)
 8100588:	2200      	movs	r2, #0
 810058a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 810058c:	4b2d      	ldr	r3, [pc, #180]	; (8100644 <MX_ADC1_Init+0x108>)
 810058e:	2202      	movs	r2, #2
 8100590:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100592:	4b2c      	ldr	r3, [pc, #176]	; (8100644 <MX_ADC1_Init+0x108>)
 8100594:	2200      	movs	r2, #0
 8100596:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8100598:	4b2a      	ldr	r3, [pc, #168]	; (8100644 <MX_ADC1_Init+0x108>)
 810059a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 810059e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 81005a0:	4b28      	ldr	r3, [pc, #160]	; (8100644 <MX_ADC1_Init+0x108>)
 81005a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81005a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81005a8:	4b26      	ldr	r3, [pc, #152]	; (8100644 <MX_ADC1_Init+0x108>)
 81005aa:	2200      	movs	r2, #0
 81005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81005ae:	4b25      	ldr	r3, [pc, #148]	; (8100644 <MX_ADC1_Init+0x108>)
 81005b0:	2200      	movs	r2, #0
 81005b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81005b4:	4b23      	ldr	r3, [pc, #140]	; (8100644 <MX_ADC1_Init+0x108>)
 81005b6:	2200      	movs	r2, #0
 81005b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81005ba:	4b22      	ldr	r3, [pc, #136]	; (8100644 <MX_ADC1_Init+0x108>)
 81005bc:	2200      	movs	r2, #0
 81005be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81005c2:	4820      	ldr	r0, [pc, #128]	; (8100644 <MX_ADC1_Init+0x108>)
 81005c4:	f000 fcd6 	bl	8100f74 <HAL_ADC_Init>
 81005c8:	4603      	mov	r3, r0
 81005ca:	2b00      	cmp	r3, #0
 81005cc:	d001      	beq.n	81005d2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81005ce:	f000 f8f7 	bl	81007c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81005d2:	2300      	movs	r3, #0
 81005d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81005d6:	f107 031c 	add.w	r3, r7, #28
 81005da:	4619      	mov	r1, r3
 81005dc:	4819      	ldr	r0, [pc, #100]	; (8100644 <MX_ADC1_Init+0x108>)
 81005de:	f001 fcb5 	bl	8101f4c <HAL_ADCEx_MultiModeConfigChannel>
 81005e2:	4603      	mov	r3, r0
 81005e4:	2b00      	cmp	r3, #0
 81005e6:	d001      	beq.n	81005ec <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81005e8:	f000 f8ea 	bl	81007c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 81005ec:	4b17      	ldr	r3, [pc, #92]	; (810064c <MX_ADC1_Init+0x110>)
 81005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81005f0:	2306      	movs	r3, #6
 81005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81005f4:	2300      	movs	r3, #0
 81005f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81005f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81005fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81005fe:	2304      	movs	r3, #4
 8100600:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100602:	2300      	movs	r3, #0
 8100604:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100606:	2300      	movs	r3, #0
 8100608:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810060a:	463b      	mov	r3, r7
 810060c:	4619      	mov	r1, r3
 810060e:	480d      	ldr	r0, [pc, #52]	; (8100644 <MX_ADC1_Init+0x108>)
 8100610:	f000 ff90 	bl	8101534 <HAL_ADC_ConfigChannel>
 8100614:	4603      	mov	r3, r0
 8100616:	2b00      	cmp	r3, #0
 8100618:	d001      	beq.n	810061e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 810061a:	f000 f8d1 	bl	81007c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 810061e:	4b0c      	ldr	r3, [pc, #48]	; (8100650 <MX_ADC1_Init+0x114>)
 8100620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8100622:	230c      	movs	r3, #12
 8100624:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100626:	463b      	mov	r3, r7
 8100628:	4619      	mov	r1, r3
 810062a:	4806      	ldr	r0, [pc, #24]	; (8100644 <MX_ADC1_Init+0x108>)
 810062c:	f000 ff82 	bl	8101534 <HAL_ADC_ConfigChannel>
 8100630:	4603      	mov	r3, r0
 8100632:	2b00      	cmp	r3, #0
 8100634:	d001      	beq.n	810063a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8100636:	f000 f8c3 	bl	81007c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810063a:	bf00      	nop
 810063c:	3728      	adds	r7, #40	; 0x28
 810063e:	46bd      	mov	sp, r7
 8100640:	bd80      	pop	{r7, pc}
 8100642:	bf00      	nop
 8100644:	1000007c 	.word	0x1000007c
 8100648:	40022000 	.word	0x40022000
 810064c:	0c900008 	.word	0x0c900008
 8100650:	4fb80000 	.word	0x4fb80000

08100654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8100654:	b580      	push	{r7, lr}
 8100656:	b088      	sub	sp, #32
 8100658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810065a:	f107 0310 	add.w	r3, r7, #16
 810065e:	2200      	movs	r2, #0
 8100660:	601a      	str	r2, [r3, #0]
 8100662:	605a      	str	r2, [r3, #4]
 8100664:	609a      	str	r2, [r3, #8]
 8100666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100668:	1d3b      	adds	r3, r7, #4
 810066a:	2200      	movs	r2, #0
 810066c:	601a      	str	r2, [r3, #0]
 810066e:	605a      	str	r2, [r3, #4]
 8100670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8100672:	4b1d      	ldr	r3, [pc, #116]	; (81006e8 <MX_TIM3_Init+0x94>)
 8100674:	4a1d      	ldr	r2, [pc, #116]	; (81006ec <MX_TIM3_Init+0x98>)
 8100676:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8100678:	4b1b      	ldr	r3, [pc, #108]	; (81006e8 <MX_TIM3_Init+0x94>)
 810067a:	2200      	movs	r2, #0
 810067c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810067e:	4b1a      	ldr	r3, [pc, #104]	; (81006e8 <MX_TIM3_Init+0x94>)
 8100680:	2200      	movs	r2, #0
 8100682:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 8100684:	4b18      	ldr	r3, [pc, #96]	; (81006e8 <MX_TIM3_Init+0x94>)
 8100686:	2280      	movs	r2, #128	; 0x80
 8100688:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810068a:	4b17      	ldr	r3, [pc, #92]	; (81006e8 <MX_TIM3_Init+0x94>)
 810068c:	2200      	movs	r2, #0
 810068e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100690:	4b15      	ldr	r3, [pc, #84]	; (81006e8 <MX_TIM3_Init+0x94>)
 8100692:	2280      	movs	r2, #128	; 0x80
 8100694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8100696:	4814      	ldr	r0, [pc, #80]	; (81006e8 <MX_TIM3_Init+0x94>)
 8100698:	f004 ff3c 	bl	8105514 <HAL_TIM_Base_Init>
 810069c:	4603      	mov	r3, r0
 810069e:	2b00      	cmp	r3, #0
 81006a0:	d001      	beq.n	81006a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 81006a2:	f000 f88d 	bl	81007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81006aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81006ac:	f107 0310 	add.w	r3, r7, #16
 81006b0:	4619      	mov	r1, r3
 81006b2:	480d      	ldr	r0, [pc, #52]	; (81006e8 <MX_TIM3_Init+0x94>)
 81006b4:	f004 fff6 	bl	81056a4 <HAL_TIM_ConfigClockSource>
 81006b8:	4603      	mov	r3, r0
 81006ba:	2b00      	cmp	r3, #0
 81006bc:	d001      	beq.n	81006c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 81006be:	f000 f87f 	bl	81007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 81006c2:	2320      	movs	r3, #32
 81006c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81006c6:	2300      	movs	r3, #0
 81006c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81006ca:	1d3b      	adds	r3, r7, #4
 81006cc:	4619      	mov	r1, r3
 81006ce:	4806      	ldr	r0, [pc, #24]	; (81006e8 <MX_TIM3_Init+0x94>)
 81006d0:	f005 fa16 	bl	8105b00 <HAL_TIMEx_MasterConfigSynchronization>
 81006d4:	4603      	mov	r3, r0
 81006d6:	2b00      	cmp	r3, #0
 81006d8:	d001      	beq.n	81006de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 81006da:	f000 f871 	bl	81007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 81006de:	bf00      	nop
 81006e0:	3720      	adds	r7, #32
 81006e2:	46bd      	mov	sp, r7
 81006e4:	bd80      	pop	{r7, pc}
 81006e6:	bf00      	nop
 81006e8:	100000e0 	.word	0x100000e0
 81006ec:	40000400 	.word	0x40000400

081006f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81006f0:	b580      	push	{r7, lr}
 81006f2:	b088      	sub	sp, #32
 81006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81006f6:	f107 0310 	add.w	r3, r7, #16
 81006fa:	2200      	movs	r2, #0
 81006fc:	601a      	str	r2, [r3, #0]
 81006fe:	605a      	str	r2, [r3, #4]
 8100700:	609a      	str	r2, [r3, #8]
 8100702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100704:	1d3b      	adds	r3, r7, #4
 8100706:	2200      	movs	r2, #0
 8100708:	601a      	str	r2, [r3, #0]
 810070a:	605a      	str	r2, [r3, #4]
 810070c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810070e:	4b1d      	ldr	r3, [pc, #116]	; (8100784 <MX_TIM4_Init+0x94>)
 8100710:	4a1d      	ldr	r2, [pc, #116]	; (8100788 <MX_TIM4_Init+0x98>)
 8100712:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8100714:	4b1b      	ldr	r3, [pc, #108]	; (8100784 <MX_TIM4_Init+0x94>)
 8100716:	2206      	movs	r2, #6
 8100718:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 810071a:	4b1a      	ldr	r3, [pc, #104]	; (8100784 <MX_TIM4_Init+0x94>)
 810071c:	2200      	movs	r2, #0
 810071e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16;
 8100720:	4b18      	ldr	r3, [pc, #96]	; (8100784 <MX_TIM4_Init+0x94>)
 8100722:	2210      	movs	r2, #16
 8100724:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100726:	4b17      	ldr	r3, [pc, #92]	; (8100784 <MX_TIM4_Init+0x94>)
 8100728:	2200      	movs	r2, #0
 810072a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 810072c:	4b15      	ldr	r3, [pc, #84]	; (8100784 <MX_TIM4_Init+0x94>)
 810072e:	2280      	movs	r2, #128	; 0x80
 8100730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8100732:	4814      	ldr	r0, [pc, #80]	; (8100784 <MX_TIM4_Init+0x94>)
 8100734:	f004 feee 	bl	8105514 <HAL_TIM_Base_Init>
 8100738:	4603      	mov	r3, r0
 810073a:	2b00      	cmp	r3, #0
 810073c:	d001      	beq.n	8100742 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 810073e:	f000 f83f 	bl	81007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8100748:	f107 0310 	add.w	r3, r7, #16
 810074c:	4619      	mov	r1, r3
 810074e:	480d      	ldr	r0, [pc, #52]	; (8100784 <MX_TIM4_Init+0x94>)
 8100750:	f004 ffa8 	bl	81056a4 <HAL_TIM_ConfigClockSource>
 8100754:	4603      	mov	r3, r0
 8100756:	2b00      	cmp	r3, #0
 8100758:	d001      	beq.n	810075e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 810075a:	f000 f831 	bl	81007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810075e:	2300      	movs	r3, #0
 8100760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100762:	2300      	movs	r3, #0
 8100764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8100766:	1d3b      	adds	r3, r7, #4
 8100768:	4619      	mov	r1, r3
 810076a:	4806      	ldr	r0, [pc, #24]	; (8100784 <MX_TIM4_Init+0x94>)
 810076c:	f005 f9c8 	bl	8105b00 <HAL_TIMEx_MasterConfigSynchronization>
 8100770:	4603      	mov	r3, r0
 8100772:	2b00      	cmp	r3, #0
 8100774:	d001      	beq.n	810077a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8100776:	f000 f823 	bl	81007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 810077a:	bf00      	nop
 810077c:	3720      	adds	r7, #32
 810077e:	46bd      	mov	sp, r7
 8100780:	bd80      	pop	{r7, pc}
 8100782:	bf00      	nop
 8100784:	1000012c 	.word	0x1000012c
 8100788:	40000800 	.word	0x40000800

0810078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810078c:	b480      	push	{r7}
 810078e:	b083      	sub	sp, #12
 8100790:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100792:	4b0a      	ldr	r3, [pc, #40]	; (81007bc <MX_GPIO_Init+0x30>)
 8100794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100798:	4a08      	ldr	r2, [pc, #32]	; (81007bc <MX_GPIO_Init+0x30>)
 810079a:	f043 0301 	orr.w	r3, r3, #1
 810079e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007a2:	4b06      	ldr	r3, [pc, #24]	; (81007bc <MX_GPIO_Init+0x30>)
 81007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007a8:	f003 0301 	and.w	r3, r3, #1
 81007ac:	607b      	str	r3, [r7, #4]
 81007ae:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81007b0:	bf00      	nop
 81007b2:	370c      	adds	r7, #12
 81007b4:	46bd      	mov	sp, r7
 81007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ba:	4770      	bx	lr
 81007bc:	58024400 	.word	0x58024400

081007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007c0:	b480      	push	{r7}
 81007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007c4:	b672      	cpsid	i
}
 81007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007c8:	e7fe      	b.n	81007c8 <Error_Handler+0x8>
	...

081007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007cc:	b480      	push	{r7}
 81007ce:	b083      	sub	sp, #12
 81007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007d2:	4b0a      	ldr	r3, [pc, #40]	; (81007fc <HAL_MspInit+0x30>)
 81007d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007d8:	4a08      	ldr	r2, [pc, #32]	; (81007fc <HAL_MspInit+0x30>)
 81007da:	f043 0302 	orr.w	r3, r3, #2
 81007de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81007e2:	4b06      	ldr	r3, [pc, #24]	; (81007fc <HAL_MspInit+0x30>)
 81007e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007e8:	f003 0302 	and.w	r3, r3, #2
 81007ec:	607b      	str	r3, [r7, #4]
 81007ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007f0:	bf00      	nop
 81007f2:	370c      	adds	r7, #12
 81007f4:	46bd      	mov	sp, r7
 81007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007fa:	4770      	bx	lr
 81007fc:	58024400 	.word	0x58024400

08100800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100800:	b580      	push	{r7, lr}
 8100802:	b0ba      	sub	sp, #232	; 0xe8
 8100804:	af00      	add	r7, sp, #0
 8100806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810080c:	2200      	movs	r2, #0
 810080e:	601a      	str	r2, [r3, #0]
 8100810:	605a      	str	r2, [r3, #4]
 8100812:	609a      	str	r2, [r3, #8]
 8100814:	60da      	str	r2, [r3, #12]
 8100816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100818:	f107 0310 	add.w	r3, r7, #16
 810081c:	22c0      	movs	r2, #192	; 0xc0
 810081e:	2100      	movs	r1, #0
 8100820:	4618      	mov	r0, r3
 8100822:	f005 fbb1 	bl	8105f88 <memset>
  if(hadc->Instance==ADC1)
 8100826:	687b      	ldr	r3, [r7, #4]
 8100828:	681b      	ldr	r3, [r3, #0]
 810082a:	4a2c      	ldr	r2, [pc, #176]	; (81008dc <HAL_ADC_MspInit+0xdc>)
 810082c:	4293      	cmp	r3, r2
 810082e:	d150      	bne.n	81008d2 <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8100830:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8100834:	f04f 0300 	mov.w	r3, #0
 8100838:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 810083c:	2301      	movs	r3, #1
 810083e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8100840:	2312      	movs	r3, #18
 8100842:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100844:	2302      	movs	r3, #2
 8100846:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100848:	2302      	movs	r3, #2
 810084a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 810084c:	2302      	movs	r3, #2
 810084e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100850:	23c0      	movs	r3, #192	; 0xc0
 8100852:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100854:	2320      	movs	r3, #32
 8100856:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8100858:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 810085c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810085e:	2300      	movs	r3, #0
 8100860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100864:	f107 0310 	add.w	r3, r7, #16
 8100868:	4618      	mov	r0, r3
 810086a:	f002 f955 	bl	8102b18 <HAL_RCCEx_PeriphCLKConfig>
 810086e:	4603      	mov	r3, r0
 8100870:	2b00      	cmp	r3, #0
 8100872:	d001      	beq.n	8100878 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8100874:	f7ff ffa4 	bl	81007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100878:	4b19      	ldr	r3, [pc, #100]	; (81008e0 <HAL_ADC_MspInit+0xe0>)
 810087a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810087e:	4a18      	ldr	r2, [pc, #96]	; (81008e0 <HAL_ADC_MspInit+0xe0>)
 8100880:	f043 0320 	orr.w	r3, r3, #32
 8100884:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100888:	4b15      	ldr	r3, [pc, #84]	; (81008e0 <HAL_ADC_MspInit+0xe0>)
 810088a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810088e:	f003 0320 	and.w	r3, r3, #32
 8100892:	60fb      	str	r3, [r7, #12]
 8100894:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100896:	4b12      	ldr	r3, [pc, #72]	; (81008e0 <HAL_ADC_MspInit+0xe0>)
 8100898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810089c:	4a10      	ldr	r2, [pc, #64]	; (81008e0 <HAL_ADC_MspInit+0xe0>)
 810089e:	f043 0301 	orr.w	r3, r3, #1
 81008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008a6:	4b0e      	ldr	r3, [pc, #56]	; (81008e0 <HAL_ADC_MspInit+0xe0>)
 81008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ac:	f003 0301 	and.w	r3, r3, #1
 81008b0:	60bb      	str	r3, [r7, #8]
 81008b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81008b4:	2360      	movs	r3, #96	; 0x60
 81008b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81008ba:	2303      	movs	r3, #3
 81008bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008c0:	2300      	movs	r3, #0
 81008c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81008c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81008ca:	4619      	mov	r1, r3
 81008cc:	4805      	ldr	r0, [pc, #20]	; (81008e4 <HAL_ADC_MspInit+0xe4>)
 81008ce:	f001 fd17 	bl	8102300 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 81008d2:	bf00      	nop
 81008d4:	37e8      	adds	r7, #232	; 0xe8
 81008d6:	46bd      	mov	sp, r7
 81008d8:	bd80      	pop	{r7, pc}
 81008da:	bf00      	nop
 81008dc:	40022000 	.word	0x40022000
 81008e0:	58024400 	.word	0x58024400
 81008e4:	58020000 	.word	0x58020000

081008e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81008e8:	b480      	push	{r7}
 81008ea:	b085      	sub	sp, #20
 81008ec:	af00      	add	r7, sp, #0
 81008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 81008f0:	687b      	ldr	r3, [r7, #4]
 81008f2:	681b      	ldr	r3, [r3, #0]
 81008f4:	4a16      	ldr	r2, [pc, #88]	; (8100950 <HAL_TIM_Base_MspInit+0x68>)
 81008f6:	4293      	cmp	r3, r2
 81008f8:	d10f      	bne.n	810091a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 81008fa:	4b16      	ldr	r3, [pc, #88]	; (8100954 <HAL_TIM_Base_MspInit+0x6c>)
 81008fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100900:	4a14      	ldr	r2, [pc, #80]	; (8100954 <HAL_TIM_Base_MspInit+0x6c>)
 8100902:	f043 0302 	orr.w	r3, r3, #2
 8100906:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810090a:	4b12      	ldr	r3, [pc, #72]	; (8100954 <HAL_TIM_Base_MspInit+0x6c>)
 810090c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100910:	f003 0302 	and.w	r3, r3, #2
 8100914:	60fb      	str	r3, [r7, #12]
 8100916:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8100918:	e013      	b.n	8100942 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM4)
 810091a:	687b      	ldr	r3, [r7, #4]
 810091c:	681b      	ldr	r3, [r3, #0]
 810091e:	4a0e      	ldr	r2, [pc, #56]	; (8100958 <HAL_TIM_Base_MspInit+0x70>)
 8100920:	4293      	cmp	r3, r2
 8100922:	d10e      	bne.n	8100942 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8100924:	4b0b      	ldr	r3, [pc, #44]	; (8100954 <HAL_TIM_Base_MspInit+0x6c>)
 8100926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810092a:	4a0a      	ldr	r2, [pc, #40]	; (8100954 <HAL_TIM_Base_MspInit+0x6c>)
 810092c:	f043 0304 	orr.w	r3, r3, #4
 8100930:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100934:	4b07      	ldr	r3, [pc, #28]	; (8100954 <HAL_TIM_Base_MspInit+0x6c>)
 8100936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810093a:	f003 0304 	and.w	r3, r3, #4
 810093e:	60bb      	str	r3, [r7, #8]
 8100940:	68bb      	ldr	r3, [r7, #8]
}
 8100942:	bf00      	nop
 8100944:	3714      	adds	r7, #20
 8100946:	46bd      	mov	sp, r7
 8100948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810094c:	4770      	bx	lr
 810094e:	bf00      	nop
 8100950:	40000400 	.word	0x40000400
 8100954:	58024400 	.word	0x58024400
 8100958:	40000800 	.word	0x40000800

0810095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810095c:	b480      	push	{r7}
 810095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100960:	e7fe      	b.n	8100960 <NMI_Handler+0x4>

08100962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100962:	b480      	push	{r7}
 8100964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100966:	e7fe      	b.n	8100966 <HardFault_Handler+0x4>

08100968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100968:	b480      	push	{r7}
 810096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810096c:	e7fe      	b.n	810096c <MemManage_Handler+0x4>

0810096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810096e:	b480      	push	{r7}
 8100970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100972:	e7fe      	b.n	8100972 <BusFault_Handler+0x4>

08100974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100974:	b480      	push	{r7}
 8100976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100978:	e7fe      	b.n	8100978 <UsageFault_Handler+0x4>

0810097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810097a:	b480      	push	{r7}
 810097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810097e:	bf00      	nop
 8100980:	46bd      	mov	sp, r7
 8100982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100986:	4770      	bx	lr

08100988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100988:	b480      	push	{r7}
 810098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810098c:	bf00      	nop
 810098e:	46bd      	mov	sp, r7
 8100990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100994:	4770      	bx	lr

08100996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100996:	b480      	push	{r7}
 8100998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810099a:	bf00      	nop
 810099c:	46bd      	mov	sp, r7
 810099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a2:	4770      	bx	lr

081009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81009a4:	b580      	push	{r7, lr}
 81009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81009a8:	f000 f8f6 	bl	8100b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81009ac:	bf00      	nop
 81009ae:	bd80      	pop	{r7, pc}

081009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	b086      	sub	sp, #24
 81009b4:	af00      	add	r7, sp, #0
 81009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81009b8:	4a14      	ldr	r2, [pc, #80]	; (8100a0c <_sbrk+0x5c>)
 81009ba:	4b15      	ldr	r3, [pc, #84]	; (8100a10 <_sbrk+0x60>)
 81009bc:	1ad3      	subs	r3, r2, r3
 81009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81009c0:	697b      	ldr	r3, [r7, #20]
 81009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81009c4:	4b13      	ldr	r3, [pc, #76]	; (8100a14 <_sbrk+0x64>)
 81009c6:	681b      	ldr	r3, [r3, #0]
 81009c8:	2b00      	cmp	r3, #0
 81009ca:	d102      	bne.n	81009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81009cc:	4b11      	ldr	r3, [pc, #68]	; (8100a14 <_sbrk+0x64>)
 81009ce:	4a12      	ldr	r2, [pc, #72]	; (8100a18 <_sbrk+0x68>)
 81009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81009d2:	4b10      	ldr	r3, [pc, #64]	; (8100a14 <_sbrk+0x64>)
 81009d4:	681a      	ldr	r2, [r3, #0]
 81009d6:	687b      	ldr	r3, [r7, #4]
 81009d8:	4413      	add	r3, r2
 81009da:	693a      	ldr	r2, [r7, #16]
 81009dc:	429a      	cmp	r2, r3
 81009de:	d207      	bcs.n	81009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81009e0:	f005 fada 	bl	8105f98 <__errno>
 81009e4:	4603      	mov	r3, r0
 81009e6:	220c      	movs	r2, #12
 81009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81009ea:	f04f 33ff 	mov.w	r3, #4294967295
 81009ee:	e009      	b.n	8100a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81009f0:	4b08      	ldr	r3, [pc, #32]	; (8100a14 <_sbrk+0x64>)
 81009f2:	681b      	ldr	r3, [r3, #0]
 81009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81009f6:	4b07      	ldr	r3, [pc, #28]	; (8100a14 <_sbrk+0x64>)
 81009f8:	681a      	ldr	r2, [r3, #0]
 81009fa:	687b      	ldr	r3, [r7, #4]
 81009fc:	4413      	add	r3, r2
 81009fe:	4a05      	ldr	r2, [pc, #20]	; (8100a14 <_sbrk+0x64>)
 8100a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100a02:	68fb      	ldr	r3, [r7, #12]
}
 8100a04:	4618      	mov	r0, r3
 8100a06:	3718      	adds	r7, #24
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	bd80      	pop	{r7, pc}
 8100a0c:	10048000 	.word	0x10048000
 8100a10:	00000400 	.word	0x00000400
 8100a14:	1000031c 	.word	0x1000031c
 8100a18:	10000470 	.word	0x10000470

08100a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100a54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100a20:	f7ff fcb6 	bl	8100390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100a24:	480c      	ldr	r0, [pc, #48]	; (8100a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100a26:	490d      	ldr	r1, [pc, #52]	; (8100a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100a28:	4a0d      	ldr	r2, [pc, #52]	; (8100a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100a2c:	e002      	b.n	8100a34 <LoopCopyDataInit>

08100a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100a32:	3304      	adds	r3, #4

08100a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100a38:	d3f9      	bcc.n	8100a2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100a3a:	4a0a      	ldr	r2, [pc, #40]	; (8100a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100a3c:	4c0a      	ldr	r4, [pc, #40]	; (8100a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100a40:	e001      	b.n	8100a46 <LoopFillZerobss>

08100a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100a44:	3204      	adds	r2, #4

08100a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100a48:	d3fb      	bcc.n	8100a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100a4a:	f005 faab 	bl	8105fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100a4e:	f7ff fcdd 	bl	810040c <main>
  bx  lr
 8100a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100a54:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100a58:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100a5c:	10000060 	.word	0x10000060
  ldr r2, =_sidata
 8100a60:	0810693c 	.word	0x0810693c
  ldr r2, =_sbss
 8100a64:	10000060 	.word	0x10000060
  ldr r4, =_ebss
 8100a68:	1000046c 	.word	0x1000046c

08100a6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a6c:	e7fe      	b.n	8100a6c <ADC3_IRQHandler>
	...

08100a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100a70:	b580      	push	{r7, lr}
 8100a72:	b082      	sub	sp, #8
 8100a74:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100a76:	4b28      	ldr	r3, [pc, #160]	; (8100b18 <HAL_Init+0xa8>)
 8100a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a7c:	4a26      	ldr	r2, [pc, #152]	; (8100b18 <HAL_Init+0xa8>)
 8100a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100a82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100a86:	4b24      	ldr	r3, [pc, #144]	; (8100b18 <HAL_Init+0xa8>)
 8100a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100a90:	603b      	str	r3, [r7, #0]
 8100a92:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100a94:	4b21      	ldr	r3, [pc, #132]	; (8100b1c <HAL_Init+0xac>)
 8100a96:	681b      	ldr	r3, [r3, #0]
 8100a98:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100aa0:	4a1e      	ldr	r2, [pc, #120]	; (8100b1c <HAL_Init+0xac>)
 8100aa2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100aa6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100aa8:	4b1c      	ldr	r3, [pc, #112]	; (8100b1c <HAL_Init+0xac>)
 8100aaa:	681b      	ldr	r3, [r3, #0]
 8100aac:	4a1b      	ldr	r2, [pc, #108]	; (8100b1c <HAL_Init+0xac>)
 8100aae:	f043 0301 	orr.w	r3, r3, #1
 8100ab2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100ab4:	2003      	movs	r0, #3
 8100ab6:	f001 fbdd 	bl	8102274 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100aba:	f001 fe6b 	bl	8102794 <HAL_RCC_GetSysClockFreq>
 8100abe:	4602      	mov	r2, r0
 8100ac0:	4b15      	ldr	r3, [pc, #84]	; (8100b18 <HAL_Init+0xa8>)
 8100ac2:	699b      	ldr	r3, [r3, #24]
 8100ac4:	0a1b      	lsrs	r3, r3, #8
 8100ac6:	f003 030f 	and.w	r3, r3, #15
 8100aca:	4915      	ldr	r1, [pc, #84]	; (8100b20 <HAL_Init+0xb0>)
 8100acc:	5ccb      	ldrb	r3, [r1, r3]
 8100ace:	f003 031f 	and.w	r3, r3, #31
 8100ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8100ad6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100ad8:	4b0f      	ldr	r3, [pc, #60]	; (8100b18 <HAL_Init+0xa8>)
 8100ada:	699b      	ldr	r3, [r3, #24]
 8100adc:	f003 030f 	and.w	r3, r3, #15
 8100ae0:	4a0f      	ldr	r2, [pc, #60]	; (8100b20 <HAL_Init+0xb0>)
 8100ae2:	5cd3      	ldrb	r3, [r2, r3]
 8100ae4:	f003 031f 	and.w	r3, r3, #31
 8100ae8:	687a      	ldr	r2, [r7, #4]
 8100aea:	fa22 f303 	lsr.w	r3, r2, r3
 8100aee:	4a0d      	ldr	r2, [pc, #52]	; (8100b24 <HAL_Init+0xb4>)
 8100af0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100af2:	4b0c      	ldr	r3, [pc, #48]	; (8100b24 <HAL_Init+0xb4>)
 8100af4:	681b      	ldr	r3, [r3, #0]
 8100af6:	4a0c      	ldr	r2, [pc, #48]	; (8100b28 <HAL_Init+0xb8>)
 8100af8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100afa:	2000      	movs	r0, #0
 8100afc:	f000 f816 	bl	8100b2c <HAL_InitTick>
 8100b00:	4603      	mov	r3, r0
 8100b02:	2b00      	cmp	r3, #0
 8100b04:	d001      	beq.n	8100b0a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100b06:	2301      	movs	r3, #1
 8100b08:	e002      	b.n	8100b10 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100b0a:	f7ff fe5f 	bl	81007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100b0e:	2300      	movs	r3, #0
}
 8100b10:	4618      	mov	r0, r3
 8100b12:	3708      	adds	r7, #8
 8100b14:	46bd      	mov	sp, r7
 8100b16:	bd80      	pop	{r7, pc}
 8100b18:	58024400 	.word	0x58024400
 8100b1c:	40024400 	.word	0x40024400
 8100b20:	081068f0 	.word	0x081068f0
 8100b24:	10000004 	.word	0x10000004
 8100b28:	10000000 	.word	0x10000000

08100b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100b2c:	b580      	push	{r7, lr}
 8100b2e:	b082      	sub	sp, #8
 8100b30:	af00      	add	r7, sp, #0
 8100b32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100b34:	4b15      	ldr	r3, [pc, #84]	; (8100b8c <HAL_InitTick+0x60>)
 8100b36:	781b      	ldrb	r3, [r3, #0]
 8100b38:	2b00      	cmp	r3, #0
 8100b3a:	d101      	bne.n	8100b40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100b3c:	2301      	movs	r3, #1
 8100b3e:	e021      	b.n	8100b84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100b40:	4b13      	ldr	r3, [pc, #76]	; (8100b90 <HAL_InitTick+0x64>)
 8100b42:	681a      	ldr	r2, [r3, #0]
 8100b44:	4b11      	ldr	r3, [pc, #68]	; (8100b8c <HAL_InitTick+0x60>)
 8100b46:	781b      	ldrb	r3, [r3, #0]
 8100b48:	4619      	mov	r1, r3
 8100b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8100b56:	4618      	mov	r0, r3
 8100b58:	f001 fbb1 	bl	81022be <HAL_SYSTICK_Config>
 8100b5c:	4603      	mov	r3, r0
 8100b5e:	2b00      	cmp	r3, #0
 8100b60:	d001      	beq.n	8100b66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100b62:	2301      	movs	r3, #1
 8100b64:	e00e      	b.n	8100b84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100b66:	687b      	ldr	r3, [r7, #4]
 8100b68:	2b0f      	cmp	r3, #15
 8100b6a:	d80a      	bhi.n	8100b82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100b6c:	2200      	movs	r2, #0
 8100b6e:	6879      	ldr	r1, [r7, #4]
 8100b70:	f04f 30ff 	mov.w	r0, #4294967295
 8100b74:	f001 fb89 	bl	810228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100b78:	4a06      	ldr	r2, [pc, #24]	; (8100b94 <HAL_InitTick+0x68>)
 8100b7a:	687b      	ldr	r3, [r7, #4]
 8100b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100b7e:	2300      	movs	r3, #0
 8100b80:	e000      	b.n	8100b84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100b82:	2301      	movs	r3, #1
}
 8100b84:	4618      	mov	r0, r3
 8100b86:	3708      	adds	r7, #8
 8100b88:	46bd      	mov	sp, r7
 8100b8a:	bd80      	pop	{r7, pc}
 8100b8c:	1000000c 	.word	0x1000000c
 8100b90:	10000000 	.word	0x10000000
 8100b94:	10000008 	.word	0x10000008

08100b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100b98:	b480      	push	{r7}
 8100b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100b9c:	4b06      	ldr	r3, [pc, #24]	; (8100bb8 <HAL_IncTick+0x20>)
 8100b9e:	781b      	ldrb	r3, [r3, #0]
 8100ba0:	461a      	mov	r2, r3
 8100ba2:	4b06      	ldr	r3, [pc, #24]	; (8100bbc <HAL_IncTick+0x24>)
 8100ba4:	681b      	ldr	r3, [r3, #0]
 8100ba6:	4413      	add	r3, r2
 8100ba8:	4a04      	ldr	r2, [pc, #16]	; (8100bbc <HAL_IncTick+0x24>)
 8100baa:	6013      	str	r3, [r2, #0]
}
 8100bac:	bf00      	nop
 8100bae:	46bd      	mov	sp, r7
 8100bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop
 8100bb8:	1000000c 	.word	0x1000000c
 8100bbc:	10000320 	.word	0x10000320

08100bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100bc0:	b480      	push	{r7}
 8100bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8100bc4:	4b03      	ldr	r3, [pc, #12]	; (8100bd4 <HAL_GetTick+0x14>)
 8100bc6:	681b      	ldr	r3, [r3, #0]
}
 8100bc8:	4618      	mov	r0, r3
 8100bca:	46bd      	mov	sp, r7
 8100bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd0:	4770      	bx	lr
 8100bd2:	bf00      	nop
 8100bd4:	10000320 	.word	0x10000320

08100bd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8100bd8:	b480      	push	{r7}
 8100bda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8100bdc:	4b03      	ldr	r3, [pc, #12]	; (8100bec <HAL_GetREVID+0x14>)
 8100bde:	681b      	ldr	r3, [r3, #0]
 8100be0:	0c1b      	lsrs	r3, r3, #16
}
 8100be2:	4618      	mov	r0, r3
 8100be4:	46bd      	mov	sp, r7
 8100be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bea:	4770      	bx	lr
 8100bec:	5c001000 	.word	0x5c001000

08100bf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8100bf0:	b480      	push	{r7}
 8100bf2:	b083      	sub	sp, #12
 8100bf4:	af00      	add	r7, sp, #0
 8100bf6:	6078      	str	r0, [r7, #4]
 8100bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8100bfa:	687b      	ldr	r3, [r7, #4]
 8100bfc:	689b      	ldr	r3, [r3, #8]
 8100bfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	431a      	orrs	r2, r3
 8100c06:	687b      	ldr	r3, [r7, #4]
 8100c08:	609a      	str	r2, [r3, #8]
}
 8100c0a:	bf00      	nop
 8100c0c:	370c      	adds	r7, #12
 8100c0e:	46bd      	mov	sp, r7
 8100c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c14:	4770      	bx	lr

08100c16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8100c16:	b480      	push	{r7}
 8100c18:	b083      	sub	sp, #12
 8100c1a:	af00      	add	r7, sp, #0
 8100c1c:	6078      	str	r0, [r7, #4]
 8100c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8100c20:	687b      	ldr	r3, [r7, #4]
 8100c22:	689b      	ldr	r3, [r3, #8]
 8100c24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8100c28:	683b      	ldr	r3, [r7, #0]
 8100c2a:	431a      	orrs	r2, r3
 8100c2c:	687b      	ldr	r3, [r7, #4]
 8100c2e:	609a      	str	r2, [r3, #8]
}
 8100c30:	bf00      	nop
 8100c32:	370c      	adds	r7, #12
 8100c34:	46bd      	mov	sp, r7
 8100c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c3a:	4770      	bx	lr

08100c3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8100c3c:	b480      	push	{r7}
 8100c3e:	b083      	sub	sp, #12
 8100c40:	af00      	add	r7, sp, #0
 8100c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	689b      	ldr	r3, [r3, #8]
 8100c48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8100c4c:	4618      	mov	r0, r3
 8100c4e:	370c      	adds	r7, #12
 8100c50:	46bd      	mov	sp, r7
 8100c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c56:	4770      	bx	lr

08100c58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8100c58:	b480      	push	{r7}
 8100c5a:	b087      	sub	sp, #28
 8100c5c:	af00      	add	r7, sp, #0
 8100c5e:	60f8      	str	r0, [r7, #12]
 8100c60:	60b9      	str	r1, [r7, #8]
 8100c62:	607a      	str	r2, [r7, #4]
 8100c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100c66:	68fb      	ldr	r3, [r7, #12]
 8100c68:	3360      	adds	r3, #96	; 0x60
 8100c6a:	461a      	mov	r2, r3
 8100c6c:	68bb      	ldr	r3, [r7, #8]
 8100c6e:	009b      	lsls	r3, r3, #2
 8100c70:	4413      	add	r3, r2
 8100c72:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8100c74:	697b      	ldr	r3, [r7, #20]
 8100c76:	681b      	ldr	r3, [r3, #0]
 8100c78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8100c7c:	687b      	ldr	r3, [r7, #4]
 8100c7e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8100c82:	683b      	ldr	r3, [r7, #0]
 8100c84:	430b      	orrs	r3, r1
 8100c86:	431a      	orrs	r2, r3
 8100c88:	697b      	ldr	r3, [r7, #20]
 8100c8a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8100c8c:	bf00      	nop
 8100c8e:	371c      	adds	r7, #28
 8100c90:	46bd      	mov	sp, r7
 8100c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c96:	4770      	bx	lr

08100c98 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8100c98:	b480      	push	{r7}
 8100c9a:	b085      	sub	sp, #20
 8100c9c:	af00      	add	r7, sp, #0
 8100c9e:	60f8      	str	r0, [r7, #12]
 8100ca0:	60b9      	str	r1, [r7, #8]
 8100ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8100ca4:	68fb      	ldr	r3, [r7, #12]
 8100ca6:	691b      	ldr	r3, [r3, #16]
 8100ca8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8100cac:	68bb      	ldr	r3, [r7, #8]
 8100cae:	f003 031f 	and.w	r3, r3, #31
 8100cb2:	6879      	ldr	r1, [r7, #4]
 8100cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8100cb8:	431a      	orrs	r2, r3
 8100cba:	68fb      	ldr	r3, [r7, #12]
 8100cbc:	611a      	str	r2, [r3, #16]
}
 8100cbe:	bf00      	nop
 8100cc0:	3714      	adds	r7, #20
 8100cc2:	46bd      	mov	sp, r7
 8100cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cc8:	4770      	bx	lr

08100cca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8100cca:	b480      	push	{r7}
 8100ccc:	b087      	sub	sp, #28
 8100cce:	af00      	add	r7, sp, #0
 8100cd0:	60f8      	str	r0, [r7, #12]
 8100cd2:	60b9      	str	r1, [r7, #8]
 8100cd4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100cd6:	68fb      	ldr	r3, [r7, #12]
 8100cd8:	3360      	adds	r3, #96	; 0x60
 8100cda:	461a      	mov	r2, r3
 8100cdc:	68bb      	ldr	r3, [r7, #8]
 8100cde:	009b      	lsls	r3, r3, #2
 8100ce0:	4413      	add	r3, r2
 8100ce2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8100ce4:	697b      	ldr	r3, [r7, #20]
 8100ce6:	681b      	ldr	r3, [r3, #0]
 8100ce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8100cec:	687b      	ldr	r3, [r7, #4]
 8100cee:	431a      	orrs	r2, r3
 8100cf0:	697b      	ldr	r3, [r7, #20]
 8100cf2:	601a      	str	r2, [r3, #0]
  }
}
 8100cf4:	bf00      	nop
 8100cf6:	371c      	adds	r7, #28
 8100cf8:	46bd      	mov	sp, r7
 8100cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cfe:	4770      	bx	lr

08100d00 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8100d00:	b480      	push	{r7}
 8100d02:	b087      	sub	sp, #28
 8100d04:	af00      	add	r7, sp, #0
 8100d06:	60f8      	str	r0, [r7, #12]
 8100d08:	60b9      	str	r1, [r7, #8]
 8100d0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8100d0c:	68fb      	ldr	r3, [r7, #12]
 8100d0e:	3330      	adds	r3, #48	; 0x30
 8100d10:	461a      	mov	r2, r3
 8100d12:	68bb      	ldr	r3, [r7, #8]
 8100d14:	0a1b      	lsrs	r3, r3, #8
 8100d16:	009b      	lsls	r3, r3, #2
 8100d18:	f003 030c 	and.w	r3, r3, #12
 8100d1c:	4413      	add	r3, r2
 8100d1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8100d20:	697b      	ldr	r3, [r7, #20]
 8100d22:	681a      	ldr	r2, [r3, #0]
 8100d24:	68bb      	ldr	r3, [r7, #8]
 8100d26:	f003 031f 	and.w	r3, r3, #31
 8100d2a:	211f      	movs	r1, #31
 8100d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8100d30:	43db      	mvns	r3, r3
 8100d32:	401a      	ands	r2, r3
 8100d34:	687b      	ldr	r3, [r7, #4]
 8100d36:	0e9b      	lsrs	r3, r3, #26
 8100d38:	f003 011f 	and.w	r1, r3, #31
 8100d3c:	68bb      	ldr	r3, [r7, #8]
 8100d3e:	f003 031f 	and.w	r3, r3, #31
 8100d42:	fa01 f303 	lsl.w	r3, r1, r3
 8100d46:	431a      	orrs	r2, r3
 8100d48:	697b      	ldr	r3, [r7, #20]
 8100d4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8100d4c:	bf00      	nop
 8100d4e:	371c      	adds	r7, #28
 8100d50:	46bd      	mov	sp, r7
 8100d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d56:	4770      	bx	lr

08100d58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	b087      	sub	sp, #28
 8100d5c:	af00      	add	r7, sp, #0
 8100d5e:	60f8      	str	r0, [r7, #12]
 8100d60:	60b9      	str	r1, [r7, #8]
 8100d62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8100d64:	68fb      	ldr	r3, [r7, #12]
 8100d66:	3314      	adds	r3, #20
 8100d68:	461a      	mov	r2, r3
 8100d6a:	68bb      	ldr	r3, [r7, #8]
 8100d6c:	0e5b      	lsrs	r3, r3, #25
 8100d6e:	009b      	lsls	r3, r3, #2
 8100d70:	f003 0304 	and.w	r3, r3, #4
 8100d74:	4413      	add	r3, r2
 8100d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8100d78:	697b      	ldr	r3, [r7, #20]
 8100d7a:	681a      	ldr	r2, [r3, #0]
 8100d7c:	68bb      	ldr	r3, [r7, #8]
 8100d7e:	0d1b      	lsrs	r3, r3, #20
 8100d80:	f003 031f 	and.w	r3, r3, #31
 8100d84:	2107      	movs	r1, #7
 8100d86:	fa01 f303 	lsl.w	r3, r1, r3
 8100d8a:	43db      	mvns	r3, r3
 8100d8c:	401a      	ands	r2, r3
 8100d8e:	68bb      	ldr	r3, [r7, #8]
 8100d90:	0d1b      	lsrs	r3, r3, #20
 8100d92:	f003 031f 	and.w	r3, r3, #31
 8100d96:	6879      	ldr	r1, [r7, #4]
 8100d98:	fa01 f303 	lsl.w	r3, r1, r3
 8100d9c:	431a      	orrs	r2, r3
 8100d9e:	697b      	ldr	r3, [r7, #20]
 8100da0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8100da2:	bf00      	nop
 8100da4:	371c      	adds	r7, #28
 8100da6:	46bd      	mov	sp, r7
 8100da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dac:	4770      	bx	lr
	...

08100db0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8100db0:	b480      	push	{r7}
 8100db2:	b085      	sub	sp, #20
 8100db4:	af00      	add	r7, sp, #0
 8100db6:	60f8      	str	r0, [r7, #12]
 8100db8:	60b9      	str	r1, [r7, #8]
 8100dba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8100dbc:	68fb      	ldr	r3, [r7, #12]
 8100dbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8100dc2:	68bb      	ldr	r3, [r7, #8]
 8100dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100dc8:	43db      	mvns	r3, r3
 8100dca:	401a      	ands	r2, r3
 8100dcc:	687b      	ldr	r3, [r7, #4]
 8100dce:	f003 0318 	and.w	r3, r3, #24
 8100dd2:	4908      	ldr	r1, [pc, #32]	; (8100df4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8100dd4:	40d9      	lsrs	r1, r3
 8100dd6:	68bb      	ldr	r3, [r7, #8]
 8100dd8:	400b      	ands	r3, r1
 8100dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100dde:	431a      	orrs	r2, r3
 8100de0:	68fb      	ldr	r3, [r7, #12]
 8100de2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8100de6:	bf00      	nop
 8100de8:	3714      	adds	r7, #20
 8100dea:	46bd      	mov	sp, r7
 8100dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100df0:	4770      	bx	lr
 8100df2:	bf00      	nop
 8100df4:	000fffff 	.word	0x000fffff

08100df8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8100df8:	b480      	push	{r7}
 8100dfa:	b083      	sub	sp, #12
 8100dfc:	af00      	add	r7, sp, #0
 8100dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	689b      	ldr	r3, [r3, #8]
 8100e04:	f003 031f 	and.w	r3, r3, #31
}
 8100e08:	4618      	mov	r0, r3
 8100e0a:	370c      	adds	r7, #12
 8100e0c:	46bd      	mov	sp, r7
 8100e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e12:	4770      	bx	lr

08100e14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8100e14:	b480      	push	{r7}
 8100e16:	b083      	sub	sp, #12
 8100e18:	af00      	add	r7, sp, #0
 8100e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8100e1c:	687b      	ldr	r3, [r7, #4]
 8100e1e:	689b      	ldr	r3, [r3, #8]
 8100e20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8100e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8100e28:	687a      	ldr	r2, [r7, #4]
 8100e2a:	6093      	str	r3, [r2, #8]
}
 8100e2c:	bf00      	nop
 8100e2e:	370c      	adds	r7, #12
 8100e30:	46bd      	mov	sp, r7
 8100e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e36:	4770      	bx	lr

08100e38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8100e38:	b480      	push	{r7}
 8100e3a:	b083      	sub	sp, #12
 8100e3c:	af00      	add	r7, sp, #0
 8100e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8100e40:	687b      	ldr	r3, [r7, #4]
 8100e42:	689b      	ldr	r3, [r3, #8]
 8100e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8100e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8100e4c:	d101      	bne.n	8100e52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8100e4e:	2301      	movs	r3, #1
 8100e50:	e000      	b.n	8100e54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8100e52:	2300      	movs	r3, #0
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	370c      	adds	r7, #12
 8100e58:	46bd      	mov	sp, r7
 8100e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e5e:	4770      	bx	lr

08100e60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8100e60:	b480      	push	{r7}
 8100e62:	b083      	sub	sp, #12
 8100e64:	af00      	add	r7, sp, #0
 8100e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8100e68:	687b      	ldr	r3, [r7, #4]
 8100e6a:	689b      	ldr	r3, [r3, #8]
 8100e6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8100e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8100e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8100e7c:	bf00      	nop
 8100e7e:	370c      	adds	r7, #12
 8100e80:	46bd      	mov	sp, r7
 8100e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e86:	4770      	bx	lr

08100e88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8100e88:	b480      	push	{r7}
 8100e8a:	b083      	sub	sp, #12
 8100e8c:	af00      	add	r7, sp, #0
 8100e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	689b      	ldr	r3, [r3, #8]
 8100e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8100e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8100e9c:	d101      	bne.n	8100ea2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8100e9e:	2301      	movs	r3, #1
 8100ea0:	e000      	b.n	8100ea4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8100ea2:	2300      	movs	r3, #0
}
 8100ea4:	4618      	mov	r0, r3
 8100ea6:	370c      	adds	r7, #12
 8100ea8:	46bd      	mov	sp, r7
 8100eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eae:	4770      	bx	lr

08100eb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8100eb0:	b480      	push	{r7}
 8100eb2:	b083      	sub	sp, #12
 8100eb4:	af00      	add	r7, sp, #0
 8100eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8100eb8:	687b      	ldr	r3, [r7, #4]
 8100eba:	689b      	ldr	r3, [r3, #8]
 8100ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8100ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8100ec4:	f043 0201 	orr.w	r2, r3, #1
 8100ec8:	687b      	ldr	r3, [r7, #4]
 8100eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8100ecc:	bf00      	nop
 8100ece:	370c      	adds	r7, #12
 8100ed0:	46bd      	mov	sp, r7
 8100ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed6:	4770      	bx	lr

08100ed8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8100ed8:	b480      	push	{r7}
 8100eda:	b083      	sub	sp, #12
 8100edc:	af00      	add	r7, sp, #0
 8100ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	689b      	ldr	r3, [r3, #8]
 8100ee4:	f003 0301 	and.w	r3, r3, #1
 8100ee8:	2b01      	cmp	r3, #1
 8100eea:	d101      	bne.n	8100ef0 <LL_ADC_IsEnabled+0x18>
 8100eec:	2301      	movs	r3, #1
 8100eee:	e000      	b.n	8100ef2 <LL_ADC_IsEnabled+0x1a>
 8100ef0:	2300      	movs	r3, #0
}
 8100ef2:	4618      	mov	r0, r3
 8100ef4:	370c      	adds	r7, #12
 8100ef6:	46bd      	mov	sp, r7
 8100ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100efc:	4770      	bx	lr

08100efe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8100efe:	b480      	push	{r7}
 8100f00:	b083      	sub	sp, #12
 8100f02:	af00      	add	r7, sp, #0
 8100f04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	689b      	ldr	r3, [r3, #8]
 8100f0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8100f0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8100f12:	f043 0204 	orr.w	r2, r3, #4
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8100f1a:	bf00      	nop
 8100f1c:	370c      	adds	r7, #12
 8100f1e:	46bd      	mov	sp, r7
 8100f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f24:	4770      	bx	lr

08100f26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8100f26:	b480      	push	{r7}
 8100f28:	b083      	sub	sp, #12
 8100f2a:	af00      	add	r7, sp, #0
 8100f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	689b      	ldr	r3, [r3, #8]
 8100f32:	f003 0304 	and.w	r3, r3, #4
 8100f36:	2b04      	cmp	r3, #4
 8100f38:	d101      	bne.n	8100f3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8100f3a:	2301      	movs	r3, #1
 8100f3c:	e000      	b.n	8100f40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8100f3e:	2300      	movs	r3, #0
}
 8100f40:	4618      	mov	r0, r3
 8100f42:	370c      	adds	r7, #12
 8100f44:	46bd      	mov	sp, r7
 8100f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4a:	4770      	bx	lr

08100f4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8100f4c:	b480      	push	{r7}
 8100f4e:	b083      	sub	sp, #12
 8100f50:	af00      	add	r7, sp, #0
 8100f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	689b      	ldr	r3, [r3, #8]
 8100f58:	f003 0308 	and.w	r3, r3, #8
 8100f5c:	2b08      	cmp	r3, #8
 8100f5e:	d101      	bne.n	8100f64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8100f60:	2301      	movs	r3, #1
 8100f62:	e000      	b.n	8100f66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8100f64:	2300      	movs	r3, #0
}
 8100f66:	4618      	mov	r0, r3
 8100f68:	370c      	adds	r7, #12
 8100f6a:	46bd      	mov	sp, r7
 8100f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f70:	4770      	bx	lr
	...

08100f74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8100f74:	b590      	push	{r4, r7, lr}
 8100f76:	b089      	sub	sp, #36	; 0x24
 8100f78:	af00      	add	r7, sp, #0
 8100f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8100f7c:	2300      	movs	r3, #0
 8100f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8100f80:	2300      	movs	r3, #0
 8100f82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8100f84:	687b      	ldr	r3, [r7, #4]
 8100f86:	2b00      	cmp	r3, #0
 8100f88:	d101      	bne.n	8100f8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8100f8a:	2301      	movs	r3, #1
 8100f8c:	e18f      	b.n	81012ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	68db      	ldr	r3, [r3, #12]
 8100f92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8100f94:	687b      	ldr	r3, [r7, #4]
 8100f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8100f98:	2b00      	cmp	r3, #0
 8100f9a:	d109      	bne.n	8100fb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8100f9c:	6878      	ldr	r0, [r7, #4]
 8100f9e:	f7ff fc2f 	bl	8100800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	2200      	movs	r2, #0
 8100fa6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8100fa8:	687b      	ldr	r3, [r7, #4]
 8100faa:	2200      	movs	r2, #0
 8100fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8100fb0:	687b      	ldr	r3, [r7, #4]
 8100fb2:	681b      	ldr	r3, [r3, #0]
 8100fb4:	4618      	mov	r0, r3
 8100fb6:	f7ff ff3f 	bl	8100e38 <LL_ADC_IsDeepPowerDownEnabled>
 8100fba:	4603      	mov	r3, r0
 8100fbc:	2b00      	cmp	r3, #0
 8100fbe:	d004      	beq.n	8100fca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	4618      	mov	r0, r3
 8100fc6:	f7ff ff25 	bl	8100e14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	4618      	mov	r0, r3
 8100fd0:	f7ff ff5a 	bl	8100e88 <LL_ADC_IsInternalRegulatorEnabled>
 8100fd4:	4603      	mov	r3, r0
 8100fd6:	2b00      	cmp	r3, #0
 8100fd8:	d114      	bne.n	8101004 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	4618      	mov	r0, r3
 8100fe0:	f7ff ff3e 	bl	8100e60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8100fe4:	4b88      	ldr	r3, [pc, #544]	; (8101208 <HAL_ADC_Init+0x294>)
 8100fe6:	681b      	ldr	r3, [r3, #0]
 8100fe8:	099b      	lsrs	r3, r3, #6
 8100fea:	4a88      	ldr	r2, [pc, #544]	; (810120c <HAL_ADC_Init+0x298>)
 8100fec:	fba2 2303 	umull	r2, r3, r2, r3
 8100ff0:	099b      	lsrs	r3, r3, #6
 8100ff2:	3301      	adds	r3, #1
 8100ff4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8100ff6:	e002      	b.n	8100ffe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8100ff8:	68bb      	ldr	r3, [r7, #8]
 8100ffa:	3b01      	subs	r3, #1
 8100ffc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8100ffe:	68bb      	ldr	r3, [r7, #8]
 8101000:	2b00      	cmp	r3, #0
 8101002:	d1f9      	bne.n	8100ff8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	681b      	ldr	r3, [r3, #0]
 8101008:	4618      	mov	r0, r3
 810100a:	f7ff ff3d 	bl	8100e88 <LL_ADC_IsInternalRegulatorEnabled>
 810100e:	4603      	mov	r3, r0
 8101010:	2b00      	cmp	r3, #0
 8101012:	d10d      	bne.n	8101030 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101014:	687b      	ldr	r3, [r7, #4]
 8101016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101018:	f043 0210 	orr.w	r2, r3, #16
 810101c:	687b      	ldr	r3, [r7, #4]
 810101e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101024:	f043 0201 	orr.w	r2, r3, #1
 8101028:	687b      	ldr	r3, [r7, #4]
 810102a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 810102c:	2301      	movs	r3, #1
 810102e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	4618      	mov	r0, r3
 8101036:	f7ff ff76 	bl	8100f26 <LL_ADC_REG_IsConversionOngoing>
 810103a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810103c:	687b      	ldr	r3, [r7, #4]
 810103e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101040:	f003 0310 	and.w	r3, r3, #16
 8101044:	2b00      	cmp	r3, #0
 8101046:	f040 8129 	bne.w	810129c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810104a:	697b      	ldr	r3, [r7, #20]
 810104c:	2b00      	cmp	r3, #0
 810104e:	f040 8125 	bne.w	810129c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101052:	687b      	ldr	r3, [r7, #4]
 8101054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101056:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810105a:	f043 0202 	orr.w	r2, r3, #2
 810105e:	687b      	ldr	r3, [r7, #4]
 8101060:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	681b      	ldr	r3, [r3, #0]
 8101066:	4618      	mov	r0, r3
 8101068:	f7ff ff36 	bl	8100ed8 <LL_ADC_IsEnabled>
 810106c:	4603      	mov	r3, r0
 810106e:	2b00      	cmp	r3, #0
 8101070:	d136      	bne.n	81010e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101072:	687b      	ldr	r3, [r7, #4]
 8101074:	681b      	ldr	r3, [r3, #0]
 8101076:	4a66      	ldr	r2, [pc, #408]	; (8101210 <HAL_ADC_Init+0x29c>)
 8101078:	4293      	cmp	r3, r2
 810107a:	d004      	beq.n	8101086 <HAL_ADC_Init+0x112>
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	681b      	ldr	r3, [r3, #0]
 8101080:	4a64      	ldr	r2, [pc, #400]	; (8101214 <HAL_ADC_Init+0x2a0>)
 8101082:	4293      	cmp	r3, r2
 8101084:	d10e      	bne.n	81010a4 <HAL_ADC_Init+0x130>
 8101086:	4862      	ldr	r0, [pc, #392]	; (8101210 <HAL_ADC_Init+0x29c>)
 8101088:	f7ff ff26 	bl	8100ed8 <LL_ADC_IsEnabled>
 810108c:	4604      	mov	r4, r0
 810108e:	4861      	ldr	r0, [pc, #388]	; (8101214 <HAL_ADC_Init+0x2a0>)
 8101090:	f7ff ff22 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101094:	4603      	mov	r3, r0
 8101096:	4323      	orrs	r3, r4
 8101098:	2b00      	cmp	r3, #0
 810109a:	bf0c      	ite	eq
 810109c:	2301      	moveq	r3, #1
 810109e:	2300      	movne	r3, #0
 81010a0:	b2db      	uxtb	r3, r3
 81010a2:	e008      	b.n	81010b6 <HAL_ADC_Init+0x142>
 81010a4:	485c      	ldr	r0, [pc, #368]	; (8101218 <HAL_ADC_Init+0x2a4>)
 81010a6:	f7ff ff17 	bl	8100ed8 <LL_ADC_IsEnabled>
 81010aa:	4603      	mov	r3, r0
 81010ac:	2b00      	cmp	r3, #0
 81010ae:	bf0c      	ite	eq
 81010b0:	2301      	moveq	r3, #1
 81010b2:	2300      	movne	r3, #0
 81010b4:	b2db      	uxtb	r3, r3
 81010b6:	2b00      	cmp	r3, #0
 81010b8:	d012      	beq.n	81010e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	4a54      	ldr	r2, [pc, #336]	; (8101210 <HAL_ADC_Init+0x29c>)
 81010c0:	4293      	cmp	r3, r2
 81010c2:	d004      	beq.n	81010ce <HAL_ADC_Init+0x15a>
 81010c4:	687b      	ldr	r3, [r7, #4]
 81010c6:	681b      	ldr	r3, [r3, #0]
 81010c8:	4a52      	ldr	r2, [pc, #328]	; (8101214 <HAL_ADC_Init+0x2a0>)
 81010ca:	4293      	cmp	r3, r2
 81010cc:	d101      	bne.n	81010d2 <HAL_ADC_Init+0x15e>
 81010ce:	4a53      	ldr	r2, [pc, #332]	; (810121c <HAL_ADC_Init+0x2a8>)
 81010d0:	e000      	b.n	81010d4 <HAL_ADC_Init+0x160>
 81010d2:	4a53      	ldr	r2, [pc, #332]	; (8101220 <HAL_ADC_Init+0x2ac>)
 81010d4:	687b      	ldr	r3, [r7, #4]
 81010d6:	685b      	ldr	r3, [r3, #4]
 81010d8:	4619      	mov	r1, r3
 81010da:	4610      	mov	r0, r2
 81010dc:	f7ff fd88 	bl	8100bf0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81010e0:	f7ff fd7a 	bl	8100bd8 <HAL_GetREVID>
 81010e4:	4603      	mov	r3, r0
 81010e6:	f241 0203 	movw	r2, #4099	; 0x1003
 81010ea:	4293      	cmp	r3, r2
 81010ec:	d914      	bls.n	8101118 <HAL_ADC_Init+0x1a4>
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	689b      	ldr	r3, [r3, #8]
 81010f2:	2b10      	cmp	r3, #16
 81010f4:	d110      	bne.n	8101118 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81010f6:	687b      	ldr	r3, [r7, #4]
 81010f8:	7d5b      	ldrb	r3, [r3, #21]
 81010fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81010fc:	687b      	ldr	r3, [r7, #4]
 81010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101100:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101106:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	7f1b      	ldrb	r3, [r3, #28]
 810110c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810110e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101110:	f043 030c 	orr.w	r3, r3, #12
 8101114:	61bb      	str	r3, [r7, #24]
 8101116:	e00d      	b.n	8101134 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	7d5b      	ldrb	r3, [r3, #21]
 810111c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810111e:	687b      	ldr	r3, [r7, #4]
 8101120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101122:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101128:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	7f1b      	ldrb	r3, [r3, #28]
 810112e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101130:	4313      	orrs	r3, r2
 8101132:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	7f1b      	ldrb	r3, [r3, #28]
 8101138:	2b01      	cmp	r3, #1
 810113a:	d106      	bne.n	810114a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 810113c:	687b      	ldr	r3, [r7, #4]
 810113e:	6a1b      	ldr	r3, [r3, #32]
 8101140:	3b01      	subs	r3, #1
 8101142:	045b      	lsls	r3, r3, #17
 8101144:	69ba      	ldr	r2, [r7, #24]
 8101146:	4313      	orrs	r3, r2
 8101148:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810114a:	687b      	ldr	r3, [r7, #4]
 810114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810114e:	2b00      	cmp	r3, #0
 8101150:	d009      	beq.n	8101166 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101152:	687b      	ldr	r3, [r7, #4]
 8101154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101156:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810115e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101160:	69ba      	ldr	r2, [r7, #24]
 8101162:	4313      	orrs	r3, r2
 8101164:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	68da      	ldr	r2, [r3, #12]
 810116c:	4b2d      	ldr	r3, [pc, #180]	; (8101224 <HAL_ADC_Init+0x2b0>)
 810116e:	4013      	ands	r3, r2
 8101170:	687a      	ldr	r2, [r7, #4]
 8101172:	6812      	ldr	r2, [r2, #0]
 8101174:	69b9      	ldr	r1, [r7, #24]
 8101176:	430b      	orrs	r3, r1
 8101178:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	4618      	mov	r0, r3
 8101180:	f7ff fed1 	bl	8100f26 <LL_ADC_REG_IsConversionOngoing>
 8101184:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	681b      	ldr	r3, [r3, #0]
 810118a:	4618      	mov	r0, r3
 810118c:	f7ff fede 	bl	8100f4c <LL_ADC_INJ_IsConversionOngoing>
 8101190:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101192:	693b      	ldr	r3, [r7, #16]
 8101194:	2b00      	cmp	r3, #0
 8101196:	d15f      	bne.n	8101258 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101198:	68fb      	ldr	r3, [r7, #12]
 810119a:	2b00      	cmp	r3, #0
 810119c:	d15c      	bne.n	8101258 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	7d1b      	ldrb	r3, [r3, #20]
 81011a2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81011a8:	4313      	orrs	r3, r2
 81011aa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	681b      	ldr	r3, [r3, #0]
 81011b0:	68db      	ldr	r3, [r3, #12]
 81011b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81011b6:	f023 0303 	bic.w	r3, r3, #3
 81011ba:	687a      	ldr	r2, [r7, #4]
 81011bc:	6812      	ldr	r2, [r2, #0]
 81011be:	69b9      	ldr	r1, [r7, #24]
 81011c0:	430b      	orrs	r3, r1
 81011c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81011ca:	2b01      	cmp	r3, #1
 81011cc:	d12e      	bne.n	810122c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81011ce:	687b      	ldr	r3, [r7, #4]
 81011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81011d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	681b      	ldr	r3, [r3, #0]
 81011d8:	691a      	ldr	r2, [r3, #16]
 81011da:	4b13      	ldr	r3, [pc, #76]	; (8101228 <HAL_ADC_Init+0x2b4>)
 81011dc:	4013      	ands	r3, r2
 81011de:	687a      	ldr	r2, [r7, #4]
 81011e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81011e2:	3a01      	subs	r2, #1
 81011e4:	0411      	lsls	r1, r2, #16
 81011e6:	687a      	ldr	r2, [r7, #4]
 81011e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 81011ea:	4311      	orrs	r1, r2
 81011ec:	687a      	ldr	r2, [r7, #4]
 81011ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81011f0:	4311      	orrs	r1, r2
 81011f2:	687a      	ldr	r2, [r7, #4]
 81011f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81011f6:	430a      	orrs	r2, r1
 81011f8:	431a      	orrs	r2, r3
 81011fa:	687b      	ldr	r3, [r7, #4]
 81011fc:	681b      	ldr	r3, [r3, #0]
 81011fe:	f042 0201 	orr.w	r2, r2, #1
 8101202:	611a      	str	r2, [r3, #16]
 8101204:	e01a      	b.n	810123c <HAL_ADC_Init+0x2c8>
 8101206:	bf00      	nop
 8101208:	10000000 	.word	0x10000000
 810120c:	053e2d63 	.word	0x053e2d63
 8101210:	40022000 	.word	0x40022000
 8101214:	40022100 	.word	0x40022100
 8101218:	58026000 	.word	0x58026000
 810121c:	40022300 	.word	0x40022300
 8101220:	58026300 	.word	0x58026300
 8101224:	fff0c003 	.word	0xfff0c003
 8101228:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	691a      	ldr	r2, [r3, #16]
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	681b      	ldr	r3, [r3, #0]
 8101236:	f022 0201 	bic.w	r2, r2, #1
 810123a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	681b      	ldr	r3, [r3, #0]
 8101240:	691b      	ldr	r3, [r3, #16]
 8101242:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	681b      	ldr	r3, [r3, #0]
 810124e:	430a      	orrs	r2, r1
 8101250:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101252:	6878      	ldr	r0, [r7, #4]
 8101254:	f000 fd48 	bl	8101ce8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	68db      	ldr	r3, [r3, #12]
 810125c:	2b01      	cmp	r3, #1
 810125e:	d10c      	bne.n	810127a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	681b      	ldr	r3, [r3, #0]
 8101264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101266:	f023 010f 	bic.w	r1, r3, #15
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	699b      	ldr	r3, [r3, #24]
 810126e:	1e5a      	subs	r2, r3, #1
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	681b      	ldr	r3, [r3, #0]
 8101274:	430a      	orrs	r2, r1
 8101276:	631a      	str	r2, [r3, #48]	; 0x30
 8101278:	e007      	b.n	810128a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	681b      	ldr	r3, [r3, #0]
 810127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8101280:	687b      	ldr	r3, [r7, #4]
 8101282:	681b      	ldr	r3, [r3, #0]
 8101284:	f022 020f 	bic.w	r2, r2, #15
 8101288:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810128e:	f023 0303 	bic.w	r3, r3, #3
 8101292:	f043 0201 	orr.w	r2, r3, #1
 8101296:	687b      	ldr	r3, [r7, #4]
 8101298:	655a      	str	r2, [r3, #84]	; 0x54
 810129a:	e007      	b.n	81012ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810129c:	687b      	ldr	r3, [r7, #4]
 810129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81012a0:	f043 0210 	orr.w	r2, r3, #16
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81012a8:	2301      	movs	r3, #1
 81012aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81012ac:	7ffb      	ldrb	r3, [r7, #31]
}
 81012ae:	4618      	mov	r0, r3
 81012b0:	3724      	adds	r7, #36	; 0x24
 81012b2:	46bd      	mov	sp, r7
 81012b4:	bd90      	pop	{r4, r7, pc}
 81012b6:	bf00      	nop

081012b8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 81012b8:	b580      	push	{r7, lr}
 81012ba:	b086      	sub	sp, #24
 81012bc:	af00      	add	r7, sp, #0
 81012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	681b      	ldr	r3, [r3, #0]
 81012c4:	4a93      	ldr	r2, [pc, #588]	; (8101514 <HAL_ADC_Start_IT+0x25c>)
 81012c6:	4293      	cmp	r3, r2
 81012c8:	d004      	beq.n	81012d4 <HAL_ADC_Start_IT+0x1c>
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	4a92      	ldr	r2, [pc, #584]	; (8101518 <HAL_ADC_Start_IT+0x260>)
 81012d0:	4293      	cmp	r3, r2
 81012d2:	d101      	bne.n	81012d8 <HAL_ADC_Start_IT+0x20>
 81012d4:	4b91      	ldr	r3, [pc, #580]	; (810151c <HAL_ADC_Start_IT+0x264>)
 81012d6:	e000      	b.n	81012da <HAL_ADC_Start_IT+0x22>
 81012d8:	4b91      	ldr	r3, [pc, #580]	; (8101520 <HAL_ADC_Start_IT+0x268>)
 81012da:	4618      	mov	r0, r3
 81012dc:	f7ff fd8c 	bl	8100df8 <LL_ADC_GetMultimode>
 81012e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	681b      	ldr	r3, [r3, #0]
 81012e6:	4618      	mov	r0, r3
 81012e8:	f7ff fe1d 	bl	8100f26 <LL_ADC_REG_IsConversionOngoing>
 81012ec:	4603      	mov	r3, r0
 81012ee:	2b00      	cmp	r3, #0
 81012f0:	f040 8118 	bne.w	8101524 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81012fa:	2b01      	cmp	r3, #1
 81012fc:	d101      	bne.n	8101302 <HAL_ADC_Start_IT+0x4a>
 81012fe:	2302      	movs	r3, #2
 8101300:	e113      	b.n	810152a <HAL_ADC_Start_IT+0x272>
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	2201      	movs	r2, #1
 8101306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 810130a:	6878      	ldr	r0, [r7, #4]
 810130c:	f000 fc62 	bl	8101bd4 <ADC_Enable>
 8101310:	4603      	mov	r3, r0
 8101312:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8101314:	7dfb      	ldrb	r3, [r7, #23]
 8101316:	2b00      	cmp	r3, #0
 8101318:	f040 80f7 	bne.w	810150a <HAL_ADC_Start_IT+0x252>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101324:	f023 0301 	bic.w	r3, r3, #1
 8101328:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810132c:	687b      	ldr	r3, [r7, #4]
 810132e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	681b      	ldr	r3, [r3, #0]
 8101334:	4a78      	ldr	r2, [pc, #480]	; (8101518 <HAL_ADC_Start_IT+0x260>)
 8101336:	4293      	cmp	r3, r2
 8101338:	d002      	beq.n	8101340 <HAL_ADC_Start_IT+0x88>
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	681b      	ldr	r3, [r3, #0]
 810133e:	e000      	b.n	8101342 <HAL_ADC_Start_IT+0x8a>
 8101340:	4b74      	ldr	r3, [pc, #464]	; (8101514 <HAL_ADC_Start_IT+0x25c>)
 8101342:	687a      	ldr	r2, [r7, #4]
 8101344:	6812      	ldr	r2, [r2, #0]
 8101346:	4293      	cmp	r3, r2
 8101348:	d002      	beq.n	8101350 <HAL_ADC_Start_IT+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810134a:	693b      	ldr	r3, [r7, #16]
 810134c:	2b00      	cmp	r3, #0
 810134e:	d105      	bne.n	810135c <HAL_ADC_Start_IT+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101354:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101364:	2b00      	cmp	r3, #0
 8101366:	d006      	beq.n	8101376 <HAL_ADC_Start_IT+0xbe>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810136c:	f023 0206 	bic.w	r2, r3, #6
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	659a      	str	r2, [r3, #88]	; 0x58
 8101374:	e002      	b.n	810137c <HAL_ADC_Start_IT+0xc4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	2200      	movs	r2, #0
 810137a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	221c      	movs	r2, #28
 8101382:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	2200      	movs	r2, #0
 8101388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	681b      	ldr	r3, [r3, #0]
 8101390:	685a      	ldr	r2, [r3, #4]
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	681b      	ldr	r3, [r3, #0]
 8101396:	f022 021c 	bic.w	r2, r2, #28
 810139a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	691b      	ldr	r3, [r3, #16]
 81013a0:	2b08      	cmp	r3, #8
 81013a2:	d108      	bne.n	81013b6 <HAL_ADC_Start_IT+0xfe>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	681b      	ldr	r3, [r3, #0]
 81013a8:	685a      	ldr	r2, [r3, #4]
 81013aa:	687b      	ldr	r3, [r7, #4]
 81013ac:	681b      	ldr	r3, [r3, #0]
 81013ae:	f042 0208 	orr.w	r2, r2, #8
 81013b2:	605a      	str	r2, [r3, #4]
          break;
 81013b4:	e008      	b.n	81013c8 <HAL_ADC_Start_IT+0x110>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	681b      	ldr	r3, [r3, #0]
 81013ba:	685a      	ldr	r2, [r3, #4]
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	f042 0204 	orr.w	r2, r2, #4
 81013c4:	605a      	str	r2, [r3, #4]
          break;
 81013c6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013cc:	2b00      	cmp	r3, #0
 81013ce:	d107      	bne.n	81013e0 <HAL_ADC_Start_IT+0x128>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	681b      	ldr	r3, [r3, #0]
 81013d4:	685a      	ldr	r2, [r3, #4]
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	681b      	ldr	r3, [r3, #0]
 81013da:	f042 0210 	orr.w	r2, r2, #16
 81013de:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	681b      	ldr	r3, [r3, #0]
 81013e4:	4a4c      	ldr	r2, [pc, #304]	; (8101518 <HAL_ADC_Start_IT+0x260>)
 81013e6:	4293      	cmp	r3, r2
 81013e8:	d002      	beq.n	81013f0 <HAL_ADC_Start_IT+0x138>
 81013ea:	687b      	ldr	r3, [r7, #4]
 81013ec:	681b      	ldr	r3, [r3, #0]
 81013ee:	e000      	b.n	81013f2 <HAL_ADC_Start_IT+0x13a>
 81013f0:	4b48      	ldr	r3, [pc, #288]	; (8101514 <HAL_ADC_Start_IT+0x25c>)
 81013f2:	687a      	ldr	r2, [r7, #4]
 81013f4:	6812      	ldr	r2, [r2, #0]
 81013f6:	4293      	cmp	r3, r2
 81013f8:	d008      	beq.n	810140c <HAL_ADC_Start_IT+0x154>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81013fa:	693b      	ldr	r3, [r7, #16]
 81013fc:	2b00      	cmp	r3, #0
 81013fe:	d005      	beq.n	810140c <HAL_ADC_Start_IT+0x154>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8101400:	693b      	ldr	r3, [r7, #16]
 8101402:	2b05      	cmp	r3, #5
 8101404:	d002      	beq.n	810140c <HAL_ADC_Start_IT+0x154>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8101406:	693b      	ldr	r3, [r7, #16]
 8101408:	2b09      	cmp	r3, #9
 810140a:	d13a      	bne.n	8101482 <HAL_ADC_Start_IT+0x1ca>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	681b      	ldr	r3, [r3, #0]
 8101410:	68db      	ldr	r3, [r3, #12]
 8101412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101416:	2b00      	cmp	r3, #0
 8101418:	d02d      	beq.n	8101476 <HAL_ADC_Start_IT+0x1be>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810141e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8101422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	691b      	ldr	r3, [r3, #16]
 810142e:	2b08      	cmp	r3, #8
 8101430:	d110      	bne.n	8101454 <HAL_ADC_Start_IT+0x19c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8101432:	687b      	ldr	r3, [r7, #4]
 8101434:	681b      	ldr	r3, [r3, #0]
 8101436:	685a      	ldr	r2, [r3, #4]
 8101438:	687b      	ldr	r3, [r7, #4]
 810143a:	681b      	ldr	r3, [r3, #0]
 810143c:	f022 0220 	bic.w	r2, r2, #32
 8101440:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	681b      	ldr	r3, [r3, #0]
 8101446:	685a      	ldr	r2, [r3, #4]
 8101448:	687b      	ldr	r3, [r7, #4]
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8101450:	605a      	str	r2, [r3, #4]
              break;
 8101452:	e010      	b.n	8101476 <HAL_ADC_Start_IT+0x1be>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	681b      	ldr	r3, [r3, #0]
 8101458:	685a      	ldr	r2, [r3, #4]
 810145a:	687b      	ldr	r3, [r7, #4]
 810145c:	681b      	ldr	r3, [r3, #0]
 810145e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8101462:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8101464:	687b      	ldr	r3, [r7, #4]
 8101466:	681b      	ldr	r3, [r3, #0]
 8101468:	685a      	ldr	r2, [r3, #4]
 810146a:	687b      	ldr	r3, [r7, #4]
 810146c:	681b      	ldr	r3, [r3, #0]
 810146e:	f042 0220 	orr.w	r2, r2, #32
 8101472:	605a      	str	r2, [r3, #4]
              break;
 8101474:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	4618      	mov	r0, r3
 810147c:	f7ff fd3f 	bl	8100efe <LL_ADC_REG_StartConversion>
 8101480:	e052      	b.n	8101528 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8101482:	687b      	ldr	r3, [r7, #4]
 8101484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	681b      	ldr	r3, [r3, #0]
 8101492:	4a21      	ldr	r2, [pc, #132]	; (8101518 <HAL_ADC_Start_IT+0x260>)
 8101494:	4293      	cmp	r3, r2
 8101496:	d002      	beq.n	810149e <HAL_ADC_Start_IT+0x1e6>
 8101498:	687b      	ldr	r3, [r7, #4]
 810149a:	681b      	ldr	r3, [r3, #0]
 810149c:	e000      	b.n	81014a0 <HAL_ADC_Start_IT+0x1e8>
 810149e:	4b1d      	ldr	r3, [pc, #116]	; (8101514 <HAL_ADC_Start_IT+0x25c>)
 81014a0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81014a2:	68fb      	ldr	r3, [r7, #12]
 81014a4:	68db      	ldr	r3, [r3, #12]
 81014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81014aa:	2b00      	cmp	r3, #0
 81014ac:	d03c      	beq.n	8101528 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81014b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 81014b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 81014ba:	687b      	ldr	r3, [r7, #4]
 81014bc:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 81014be:	687b      	ldr	r3, [r7, #4]
 81014c0:	691b      	ldr	r3, [r3, #16]
 81014c2:	2b08      	cmp	r3, #8
 81014c4:	d110      	bne.n	81014e8 <HAL_ADC_Start_IT+0x230>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	685a      	ldr	r2, [r3, #4]
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	681b      	ldr	r3, [r3, #0]
 81014d0:	f022 0220 	bic.w	r2, r2, #32
 81014d4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	681b      	ldr	r3, [r3, #0]
 81014da:	685a      	ldr	r2, [r3, #4]
 81014dc:	687b      	ldr	r3, [r7, #4]
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81014e4:	605a      	str	r2, [r3, #4]
              break;
 81014e6:	e01f      	b.n	8101528 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 81014e8:	687b      	ldr	r3, [r7, #4]
 81014ea:	681b      	ldr	r3, [r3, #0]
 81014ec:	685a      	ldr	r2, [r3, #4]
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	681b      	ldr	r3, [r3, #0]
 81014f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 81014f6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	685a      	ldr	r2, [r3, #4]
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	681b      	ldr	r3, [r3, #0]
 8101502:	f042 0220 	orr.w	r2, r2, #32
 8101506:	605a      	str	r2, [r3, #4]
              break;
 8101508:	e00e      	b.n	8101528 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	2200      	movs	r2, #0
 810150e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8101512:	e009      	b.n	8101528 <HAL_ADC_Start_IT+0x270>
 8101514:	40022000 	.word	0x40022000
 8101518:	40022100 	.word	0x40022100
 810151c:	40022300 	.word	0x40022300
 8101520:	58026300 	.word	0x58026300
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8101524:	2302      	movs	r3, #2
 8101526:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8101528:	7dfb      	ldrb	r3, [r7, #23]
}
 810152a:	4618      	mov	r0, r3
 810152c:	3718      	adds	r7, #24
 810152e:	46bd      	mov	sp, r7
 8101530:	bd80      	pop	{r7, pc}
 8101532:	bf00      	nop

08101534 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8101534:	b590      	push	{r4, r7, lr}
 8101536:	b0a1      	sub	sp, #132	; 0x84
 8101538:	af00      	add	r7, sp, #0
 810153a:	6078      	str	r0, [r7, #4]
 810153c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810153e:	2300      	movs	r3, #0
 8101540:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101544:	2300      	movs	r3, #0
 8101546:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8101548:	683b      	ldr	r3, [r7, #0]
 810154a:	68db      	ldr	r3, [r3, #12]
 810154c:	4a9d      	ldr	r2, [pc, #628]	; (81017c4 <HAL_ADC_ConfigChannel+0x290>)
 810154e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101550:	687b      	ldr	r3, [r7, #4]
 8101552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101556:	2b01      	cmp	r3, #1
 8101558:	d101      	bne.n	810155e <HAL_ADC_ConfigChannel+0x2a>
 810155a:	2302      	movs	r3, #2
 810155c:	e321      	b.n	8101ba2 <HAL_ADC_ConfigChannel+0x66e>
 810155e:	687b      	ldr	r3, [r7, #4]
 8101560:	2201      	movs	r2, #1
 8101562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101566:	687b      	ldr	r3, [r7, #4]
 8101568:	681b      	ldr	r3, [r3, #0]
 810156a:	4618      	mov	r0, r3
 810156c:	f7ff fcdb 	bl	8100f26 <LL_ADC_REG_IsConversionOngoing>
 8101570:	4603      	mov	r3, r0
 8101572:	2b00      	cmp	r3, #0
 8101574:	f040 8306 	bne.w	8101b84 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101578:	683b      	ldr	r3, [r7, #0]
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101580:	2b00      	cmp	r3, #0
 8101582:	d108      	bne.n	8101596 <HAL_ADC_ConfigChannel+0x62>
 8101584:	683b      	ldr	r3, [r7, #0]
 8101586:	681b      	ldr	r3, [r3, #0]
 8101588:	0e9b      	lsrs	r3, r3, #26
 810158a:	f003 031f 	and.w	r3, r3, #31
 810158e:	2201      	movs	r2, #1
 8101590:	fa02 f303 	lsl.w	r3, r2, r3
 8101594:	e016      	b.n	81015c4 <HAL_ADC_ConfigChannel+0x90>
 8101596:	683b      	ldr	r3, [r7, #0]
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810159c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810159e:	fa93 f3a3 	rbit	r3, r3
 81015a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81015a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81015a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81015a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81015aa:	2b00      	cmp	r3, #0
 81015ac:	d101      	bne.n	81015b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81015ae:	2320      	movs	r3, #32
 81015b0:	e003      	b.n	81015ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81015b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81015b4:	fab3 f383 	clz	r3, r3
 81015b8:	b2db      	uxtb	r3, r3
 81015ba:	f003 031f 	and.w	r3, r3, #31
 81015be:	2201      	movs	r2, #1
 81015c0:	fa02 f303 	lsl.w	r3, r2, r3
 81015c4:	687a      	ldr	r2, [r7, #4]
 81015c6:	6812      	ldr	r2, [r2, #0]
 81015c8:	69d1      	ldr	r1, [r2, #28]
 81015ca:	687a      	ldr	r2, [r7, #4]
 81015cc:	6812      	ldr	r2, [r2, #0]
 81015ce:	430b      	orrs	r3, r1
 81015d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81015d2:	687b      	ldr	r3, [r7, #4]
 81015d4:	6818      	ldr	r0, [r3, #0]
 81015d6:	683b      	ldr	r3, [r7, #0]
 81015d8:	6859      	ldr	r1, [r3, #4]
 81015da:	683b      	ldr	r3, [r7, #0]
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	461a      	mov	r2, r3
 81015e0:	f7ff fb8e 	bl	8100d00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	681b      	ldr	r3, [r3, #0]
 81015e8:	4618      	mov	r0, r3
 81015ea:	f7ff fc9c 	bl	8100f26 <LL_ADC_REG_IsConversionOngoing>
 81015ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81015f0:	687b      	ldr	r3, [r7, #4]
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	4618      	mov	r0, r3
 81015f6:	f7ff fca9 	bl	8100f4c <LL_ADC_INJ_IsConversionOngoing>
 81015fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81015fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81015fe:	2b00      	cmp	r3, #0
 8101600:	f040 80b3 	bne.w	810176a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101606:	2b00      	cmp	r3, #0
 8101608:	f040 80af 	bne.w	810176a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810160c:	687b      	ldr	r3, [r7, #4]
 810160e:	6818      	ldr	r0, [r3, #0]
 8101610:	683b      	ldr	r3, [r7, #0]
 8101612:	6819      	ldr	r1, [r3, #0]
 8101614:	683b      	ldr	r3, [r7, #0]
 8101616:	689b      	ldr	r3, [r3, #8]
 8101618:	461a      	mov	r2, r3
 810161a:	f7ff fb9d 	bl	8100d58 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810161e:	4b6a      	ldr	r3, [pc, #424]	; (81017c8 <HAL_ADC_ConfigChannel+0x294>)
 8101620:	681b      	ldr	r3, [r3, #0]
 8101622:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810162a:	d10b      	bne.n	8101644 <HAL_ADC_ConfigChannel+0x110>
 810162c:	683b      	ldr	r3, [r7, #0]
 810162e:	695a      	ldr	r2, [r3, #20]
 8101630:	687b      	ldr	r3, [r7, #4]
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	68db      	ldr	r3, [r3, #12]
 8101636:	089b      	lsrs	r3, r3, #2
 8101638:	f003 0307 	and.w	r3, r3, #7
 810163c:	005b      	lsls	r3, r3, #1
 810163e:	fa02 f303 	lsl.w	r3, r2, r3
 8101642:	e01d      	b.n	8101680 <HAL_ADC_ConfigChannel+0x14c>
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	68db      	ldr	r3, [r3, #12]
 810164a:	f003 0310 	and.w	r3, r3, #16
 810164e:	2b00      	cmp	r3, #0
 8101650:	d10b      	bne.n	810166a <HAL_ADC_ConfigChannel+0x136>
 8101652:	683b      	ldr	r3, [r7, #0]
 8101654:	695a      	ldr	r2, [r3, #20]
 8101656:	687b      	ldr	r3, [r7, #4]
 8101658:	681b      	ldr	r3, [r3, #0]
 810165a:	68db      	ldr	r3, [r3, #12]
 810165c:	089b      	lsrs	r3, r3, #2
 810165e:	f003 0307 	and.w	r3, r3, #7
 8101662:	005b      	lsls	r3, r3, #1
 8101664:	fa02 f303 	lsl.w	r3, r2, r3
 8101668:	e00a      	b.n	8101680 <HAL_ADC_ConfigChannel+0x14c>
 810166a:	683b      	ldr	r3, [r7, #0]
 810166c:	695a      	ldr	r2, [r3, #20]
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	681b      	ldr	r3, [r3, #0]
 8101672:	68db      	ldr	r3, [r3, #12]
 8101674:	089b      	lsrs	r3, r3, #2
 8101676:	f003 0304 	and.w	r3, r3, #4
 810167a:	005b      	lsls	r3, r3, #1
 810167c:	fa02 f303 	lsl.w	r3, r2, r3
 8101680:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101682:	683b      	ldr	r3, [r7, #0]
 8101684:	691b      	ldr	r3, [r3, #16]
 8101686:	2b04      	cmp	r3, #4
 8101688:	d027      	beq.n	81016da <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	6818      	ldr	r0, [r3, #0]
 810168e:	683b      	ldr	r3, [r7, #0]
 8101690:	6919      	ldr	r1, [r3, #16]
 8101692:	683b      	ldr	r3, [r7, #0]
 8101694:	681a      	ldr	r2, [r3, #0]
 8101696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101698:	f7ff fade 	bl	8100c58 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	6818      	ldr	r0, [r3, #0]
 81016a0:	683b      	ldr	r3, [r7, #0]
 81016a2:	6919      	ldr	r1, [r3, #16]
 81016a4:	683b      	ldr	r3, [r7, #0]
 81016a6:	7e5b      	ldrb	r3, [r3, #25]
 81016a8:	2b01      	cmp	r3, #1
 81016aa:	d102      	bne.n	81016b2 <HAL_ADC_ConfigChannel+0x17e>
 81016ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81016b0:	e000      	b.n	81016b4 <HAL_ADC_ConfigChannel+0x180>
 81016b2:	2300      	movs	r3, #0
 81016b4:	461a      	mov	r2, r3
 81016b6:	f7ff fb08 	bl	8100cca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	6818      	ldr	r0, [r3, #0]
 81016be:	683b      	ldr	r3, [r7, #0]
 81016c0:	6919      	ldr	r1, [r3, #16]
 81016c2:	683b      	ldr	r3, [r7, #0]
 81016c4:	7e1b      	ldrb	r3, [r3, #24]
 81016c6:	2b01      	cmp	r3, #1
 81016c8:	d102      	bne.n	81016d0 <HAL_ADC_ConfigChannel+0x19c>
 81016ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81016ce:	e000      	b.n	81016d2 <HAL_ADC_ConfigChannel+0x19e>
 81016d0:	2300      	movs	r3, #0
 81016d2:	461a      	mov	r2, r3
 81016d4:	f7ff fae0 	bl	8100c98 <LL_ADC_SetDataRightShift>
 81016d8:	e047      	b.n	810176a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	681b      	ldr	r3, [r3, #0]
 81016de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81016e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81016e4:	683b      	ldr	r3, [r7, #0]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	069b      	lsls	r3, r3, #26
 81016ea:	429a      	cmp	r2, r3
 81016ec:	d107      	bne.n	81016fe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81016fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101708:	683b      	ldr	r3, [r7, #0]
 810170a:	681b      	ldr	r3, [r3, #0]
 810170c:	069b      	lsls	r3, r3, #26
 810170e:	429a      	cmp	r2, r3
 8101710:	d107      	bne.n	8101722 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	681b      	ldr	r3, [r3, #0]
 8101716:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	681b      	ldr	r3, [r3, #0]
 810171c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101720:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101722:	687b      	ldr	r3, [r7, #4]
 8101724:	681b      	ldr	r3, [r3, #0]
 8101726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810172c:	683b      	ldr	r3, [r7, #0]
 810172e:	681b      	ldr	r3, [r3, #0]
 8101730:	069b      	lsls	r3, r3, #26
 8101732:	429a      	cmp	r2, r3
 8101734:	d107      	bne.n	8101746 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8101736:	687b      	ldr	r3, [r7, #4]
 8101738:	681b      	ldr	r3, [r3, #0]
 810173a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101744:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101746:	687b      	ldr	r3, [r7, #4]
 8101748:	681b      	ldr	r3, [r3, #0]
 810174a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810174c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101750:	683b      	ldr	r3, [r7, #0]
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	069b      	lsls	r3, r3, #26
 8101756:	429a      	cmp	r2, r3
 8101758:	d107      	bne.n	810176a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	681b      	ldr	r3, [r3, #0]
 8101764:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101768:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	681b      	ldr	r3, [r3, #0]
 810176e:	4618      	mov	r0, r3
 8101770:	f7ff fbb2 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101774:	4603      	mov	r3, r0
 8101776:	2b00      	cmp	r3, #0
 8101778:	f040 820d 	bne.w	8101b96 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	6818      	ldr	r0, [r3, #0]
 8101780:	683b      	ldr	r3, [r7, #0]
 8101782:	6819      	ldr	r1, [r3, #0]
 8101784:	683b      	ldr	r3, [r7, #0]
 8101786:	68db      	ldr	r3, [r3, #12]
 8101788:	461a      	mov	r2, r3
 810178a:	f7ff fb11 	bl	8100db0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810178e:	683b      	ldr	r3, [r7, #0]
 8101790:	68db      	ldr	r3, [r3, #12]
 8101792:	4a0c      	ldr	r2, [pc, #48]	; (81017c4 <HAL_ADC_ConfigChannel+0x290>)
 8101794:	4293      	cmp	r3, r2
 8101796:	f040 8133 	bne.w	8101a00 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810179a:	687b      	ldr	r3, [r7, #4]
 810179c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810179e:	683b      	ldr	r3, [r7, #0]
 81017a0:	681b      	ldr	r3, [r3, #0]
 81017a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81017a6:	2b00      	cmp	r3, #0
 81017a8:	d110      	bne.n	81017cc <HAL_ADC_ConfigChannel+0x298>
 81017aa:	683b      	ldr	r3, [r7, #0]
 81017ac:	681b      	ldr	r3, [r3, #0]
 81017ae:	0e9b      	lsrs	r3, r3, #26
 81017b0:	3301      	adds	r3, #1
 81017b2:	f003 031f 	and.w	r3, r3, #31
 81017b6:	2b09      	cmp	r3, #9
 81017b8:	bf94      	ite	ls
 81017ba:	2301      	movls	r3, #1
 81017bc:	2300      	movhi	r3, #0
 81017be:	b2db      	uxtb	r3, r3
 81017c0:	e01e      	b.n	8101800 <HAL_ADC_ConfigChannel+0x2cc>
 81017c2:	bf00      	nop
 81017c4:	47ff0000 	.word	0x47ff0000
 81017c8:	5c001000 	.word	0x5c001000
 81017cc:	683b      	ldr	r3, [r7, #0]
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81017d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81017d4:	fa93 f3a3 	rbit	r3, r3
 81017d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 81017da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 81017de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81017e0:	2b00      	cmp	r3, #0
 81017e2:	d101      	bne.n	81017e8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81017e4:	2320      	movs	r3, #32
 81017e6:	e003      	b.n	81017f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81017e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81017ea:	fab3 f383 	clz	r3, r3
 81017ee:	b2db      	uxtb	r3, r3
 81017f0:	3301      	adds	r3, #1
 81017f2:	f003 031f 	and.w	r3, r3, #31
 81017f6:	2b09      	cmp	r3, #9
 81017f8:	bf94      	ite	ls
 81017fa:	2301      	movls	r3, #1
 81017fc:	2300      	movhi	r3, #0
 81017fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101800:	2b00      	cmp	r3, #0
 8101802:	d079      	beq.n	81018f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101804:	683b      	ldr	r3, [r7, #0]
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810180c:	2b00      	cmp	r3, #0
 810180e:	d107      	bne.n	8101820 <HAL_ADC_ConfigChannel+0x2ec>
 8101810:	683b      	ldr	r3, [r7, #0]
 8101812:	681b      	ldr	r3, [r3, #0]
 8101814:	0e9b      	lsrs	r3, r3, #26
 8101816:	3301      	adds	r3, #1
 8101818:	069b      	lsls	r3, r3, #26
 810181a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810181e:	e015      	b.n	810184c <HAL_ADC_ConfigChannel+0x318>
 8101820:	683b      	ldr	r3, [r7, #0]
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101828:	fa93 f3a3 	rbit	r3, r3
 810182c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 810182e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101830:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8101832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101834:	2b00      	cmp	r3, #0
 8101836:	d101      	bne.n	810183c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8101838:	2320      	movs	r3, #32
 810183a:	e003      	b.n	8101844 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 810183c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810183e:	fab3 f383 	clz	r3, r3
 8101842:	b2db      	uxtb	r3, r3
 8101844:	3301      	adds	r3, #1
 8101846:	069b      	lsls	r3, r3, #26
 8101848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810184c:	683b      	ldr	r3, [r7, #0]
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101854:	2b00      	cmp	r3, #0
 8101856:	d109      	bne.n	810186c <HAL_ADC_ConfigChannel+0x338>
 8101858:	683b      	ldr	r3, [r7, #0]
 810185a:	681b      	ldr	r3, [r3, #0]
 810185c:	0e9b      	lsrs	r3, r3, #26
 810185e:	3301      	adds	r3, #1
 8101860:	f003 031f 	and.w	r3, r3, #31
 8101864:	2101      	movs	r1, #1
 8101866:	fa01 f303 	lsl.w	r3, r1, r3
 810186a:	e017      	b.n	810189c <HAL_ADC_ConfigChannel+0x368>
 810186c:	683b      	ldr	r3, [r7, #0]
 810186e:	681b      	ldr	r3, [r3, #0]
 8101870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101874:	fa93 f3a3 	rbit	r3, r3
 8101878:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 810187a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810187c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 810187e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101880:	2b00      	cmp	r3, #0
 8101882:	d101      	bne.n	8101888 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8101884:	2320      	movs	r3, #32
 8101886:	e003      	b.n	8101890 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8101888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810188a:	fab3 f383 	clz	r3, r3
 810188e:	b2db      	uxtb	r3, r3
 8101890:	3301      	adds	r3, #1
 8101892:	f003 031f 	and.w	r3, r3, #31
 8101896:	2101      	movs	r1, #1
 8101898:	fa01 f303 	lsl.w	r3, r1, r3
 810189c:	ea42 0103 	orr.w	r1, r2, r3
 81018a0:	683b      	ldr	r3, [r7, #0]
 81018a2:	681b      	ldr	r3, [r3, #0]
 81018a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81018a8:	2b00      	cmp	r3, #0
 81018aa:	d10a      	bne.n	81018c2 <HAL_ADC_ConfigChannel+0x38e>
 81018ac:	683b      	ldr	r3, [r7, #0]
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	0e9b      	lsrs	r3, r3, #26
 81018b2:	3301      	adds	r3, #1
 81018b4:	f003 021f 	and.w	r2, r3, #31
 81018b8:	4613      	mov	r3, r2
 81018ba:	005b      	lsls	r3, r3, #1
 81018bc:	4413      	add	r3, r2
 81018be:	051b      	lsls	r3, r3, #20
 81018c0:	e018      	b.n	81018f4 <HAL_ADC_ConfigChannel+0x3c0>
 81018c2:	683b      	ldr	r3, [r7, #0]
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81018c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81018ca:	fa93 f3a3 	rbit	r3, r3
 81018ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 81018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 81018d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	d101      	bne.n	81018de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 81018da:	2320      	movs	r3, #32
 81018dc:	e003      	b.n	81018e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 81018de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81018e0:	fab3 f383 	clz	r3, r3
 81018e4:	b2db      	uxtb	r3, r3
 81018e6:	3301      	adds	r3, #1
 81018e8:	f003 021f 	and.w	r2, r3, #31
 81018ec:	4613      	mov	r3, r2
 81018ee:	005b      	lsls	r3, r3, #1
 81018f0:	4413      	add	r3, r2
 81018f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81018f4:	430b      	orrs	r3, r1
 81018f6:	e07e      	b.n	81019f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81018f8:	683b      	ldr	r3, [r7, #0]
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101900:	2b00      	cmp	r3, #0
 8101902:	d107      	bne.n	8101914 <HAL_ADC_ConfigChannel+0x3e0>
 8101904:	683b      	ldr	r3, [r7, #0]
 8101906:	681b      	ldr	r3, [r3, #0]
 8101908:	0e9b      	lsrs	r3, r3, #26
 810190a:	3301      	adds	r3, #1
 810190c:	069b      	lsls	r3, r3, #26
 810190e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101912:	e015      	b.n	8101940 <HAL_ADC_ConfigChannel+0x40c>
 8101914:	683b      	ldr	r3, [r7, #0]
 8101916:	681b      	ldr	r3, [r3, #0]
 8101918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810191c:	fa93 f3a3 	rbit	r3, r3
 8101920:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8101922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8101926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101928:	2b00      	cmp	r3, #0
 810192a:	d101      	bne.n	8101930 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 810192c:	2320      	movs	r3, #32
 810192e:	e003      	b.n	8101938 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8101930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101932:	fab3 f383 	clz	r3, r3
 8101936:	b2db      	uxtb	r3, r3
 8101938:	3301      	adds	r3, #1
 810193a:	069b      	lsls	r3, r3, #26
 810193c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101940:	683b      	ldr	r3, [r7, #0]
 8101942:	681b      	ldr	r3, [r3, #0]
 8101944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101948:	2b00      	cmp	r3, #0
 810194a:	d109      	bne.n	8101960 <HAL_ADC_ConfigChannel+0x42c>
 810194c:	683b      	ldr	r3, [r7, #0]
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	0e9b      	lsrs	r3, r3, #26
 8101952:	3301      	adds	r3, #1
 8101954:	f003 031f 	and.w	r3, r3, #31
 8101958:	2101      	movs	r1, #1
 810195a:	fa01 f303 	lsl.w	r3, r1, r3
 810195e:	e017      	b.n	8101990 <HAL_ADC_ConfigChannel+0x45c>
 8101960:	683b      	ldr	r3, [r7, #0]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101966:	69fb      	ldr	r3, [r7, #28]
 8101968:	fa93 f3a3 	rbit	r3, r3
 810196c:	61bb      	str	r3, [r7, #24]
  return result;
 810196e:	69bb      	ldr	r3, [r7, #24]
 8101970:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8101972:	6a3b      	ldr	r3, [r7, #32]
 8101974:	2b00      	cmp	r3, #0
 8101976:	d101      	bne.n	810197c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8101978:	2320      	movs	r3, #32
 810197a:	e003      	b.n	8101984 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 810197c:	6a3b      	ldr	r3, [r7, #32]
 810197e:	fab3 f383 	clz	r3, r3
 8101982:	b2db      	uxtb	r3, r3
 8101984:	3301      	adds	r3, #1
 8101986:	f003 031f 	and.w	r3, r3, #31
 810198a:	2101      	movs	r1, #1
 810198c:	fa01 f303 	lsl.w	r3, r1, r3
 8101990:	ea42 0103 	orr.w	r1, r2, r3
 8101994:	683b      	ldr	r3, [r7, #0]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810199c:	2b00      	cmp	r3, #0
 810199e:	d10d      	bne.n	81019bc <HAL_ADC_ConfigChannel+0x488>
 81019a0:	683b      	ldr	r3, [r7, #0]
 81019a2:	681b      	ldr	r3, [r3, #0]
 81019a4:	0e9b      	lsrs	r3, r3, #26
 81019a6:	3301      	adds	r3, #1
 81019a8:	f003 021f 	and.w	r2, r3, #31
 81019ac:	4613      	mov	r3, r2
 81019ae:	005b      	lsls	r3, r3, #1
 81019b0:	4413      	add	r3, r2
 81019b2:	3b1e      	subs	r3, #30
 81019b4:	051b      	lsls	r3, r3, #20
 81019b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81019ba:	e01b      	b.n	81019f4 <HAL_ADC_ConfigChannel+0x4c0>
 81019bc:	683b      	ldr	r3, [r7, #0]
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81019c2:	693b      	ldr	r3, [r7, #16]
 81019c4:	fa93 f3a3 	rbit	r3, r3
 81019c8:	60fb      	str	r3, [r7, #12]
  return result;
 81019ca:	68fb      	ldr	r3, [r7, #12]
 81019cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81019ce:	697b      	ldr	r3, [r7, #20]
 81019d0:	2b00      	cmp	r3, #0
 81019d2:	d101      	bne.n	81019d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 81019d4:	2320      	movs	r3, #32
 81019d6:	e003      	b.n	81019e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 81019d8:	697b      	ldr	r3, [r7, #20]
 81019da:	fab3 f383 	clz	r3, r3
 81019de:	b2db      	uxtb	r3, r3
 81019e0:	3301      	adds	r3, #1
 81019e2:	f003 021f 	and.w	r2, r3, #31
 81019e6:	4613      	mov	r3, r2
 81019e8:	005b      	lsls	r3, r3, #1
 81019ea:	4413      	add	r3, r2
 81019ec:	3b1e      	subs	r3, #30
 81019ee:	051b      	lsls	r3, r3, #20
 81019f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81019f4:	430b      	orrs	r3, r1
 81019f6:	683a      	ldr	r2, [r7, #0]
 81019f8:	6892      	ldr	r2, [r2, #8]
 81019fa:	4619      	mov	r1, r3
 81019fc:	f7ff f9ac 	bl	8100d58 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8101a00:	683b      	ldr	r3, [r7, #0]
 8101a02:	681b      	ldr	r3, [r3, #0]
 8101a04:	2b00      	cmp	r3, #0
 8101a06:	f280 80c6 	bge.w	8101b96 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101a0a:	687b      	ldr	r3, [r7, #4]
 8101a0c:	681b      	ldr	r3, [r3, #0]
 8101a0e:	4a67      	ldr	r2, [pc, #412]	; (8101bac <HAL_ADC_ConfigChannel+0x678>)
 8101a10:	4293      	cmp	r3, r2
 8101a12:	d004      	beq.n	8101a1e <HAL_ADC_ConfigChannel+0x4ea>
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	4a65      	ldr	r2, [pc, #404]	; (8101bb0 <HAL_ADC_ConfigChannel+0x67c>)
 8101a1a:	4293      	cmp	r3, r2
 8101a1c:	d101      	bne.n	8101a22 <HAL_ADC_ConfigChannel+0x4ee>
 8101a1e:	4b65      	ldr	r3, [pc, #404]	; (8101bb4 <HAL_ADC_ConfigChannel+0x680>)
 8101a20:	e000      	b.n	8101a24 <HAL_ADC_ConfigChannel+0x4f0>
 8101a22:	4b65      	ldr	r3, [pc, #404]	; (8101bb8 <HAL_ADC_ConfigChannel+0x684>)
 8101a24:	4618      	mov	r0, r3
 8101a26:	f7ff f909 	bl	8100c3c <LL_ADC_GetCommonPathInternalCh>
 8101a2a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	4a5e      	ldr	r2, [pc, #376]	; (8101bac <HAL_ADC_ConfigChannel+0x678>)
 8101a32:	4293      	cmp	r3, r2
 8101a34:	d004      	beq.n	8101a40 <HAL_ADC_ConfigChannel+0x50c>
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	4a5d      	ldr	r2, [pc, #372]	; (8101bb0 <HAL_ADC_ConfigChannel+0x67c>)
 8101a3c:	4293      	cmp	r3, r2
 8101a3e:	d10e      	bne.n	8101a5e <HAL_ADC_ConfigChannel+0x52a>
 8101a40:	485a      	ldr	r0, [pc, #360]	; (8101bac <HAL_ADC_ConfigChannel+0x678>)
 8101a42:	f7ff fa49 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101a46:	4604      	mov	r4, r0
 8101a48:	4859      	ldr	r0, [pc, #356]	; (8101bb0 <HAL_ADC_ConfigChannel+0x67c>)
 8101a4a:	f7ff fa45 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101a4e:	4603      	mov	r3, r0
 8101a50:	4323      	orrs	r3, r4
 8101a52:	2b00      	cmp	r3, #0
 8101a54:	bf0c      	ite	eq
 8101a56:	2301      	moveq	r3, #1
 8101a58:	2300      	movne	r3, #0
 8101a5a:	b2db      	uxtb	r3, r3
 8101a5c:	e008      	b.n	8101a70 <HAL_ADC_ConfigChannel+0x53c>
 8101a5e:	4857      	ldr	r0, [pc, #348]	; (8101bbc <HAL_ADC_ConfigChannel+0x688>)
 8101a60:	f7ff fa3a 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101a64:	4603      	mov	r3, r0
 8101a66:	2b00      	cmp	r3, #0
 8101a68:	bf0c      	ite	eq
 8101a6a:	2301      	moveq	r3, #1
 8101a6c:	2300      	movne	r3, #0
 8101a6e:	b2db      	uxtb	r3, r3
 8101a70:	2b00      	cmp	r3, #0
 8101a72:	d07d      	beq.n	8101b70 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8101a74:	683b      	ldr	r3, [r7, #0]
 8101a76:	681b      	ldr	r3, [r3, #0]
 8101a78:	4a51      	ldr	r2, [pc, #324]	; (8101bc0 <HAL_ADC_ConfigChannel+0x68c>)
 8101a7a:	4293      	cmp	r3, r2
 8101a7c:	d130      	bne.n	8101ae0 <HAL_ADC_ConfigChannel+0x5ac>
 8101a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d12b      	bne.n	8101ae0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	4a4b      	ldr	r2, [pc, #300]	; (8101bbc <HAL_ADC_ConfigChannel+0x688>)
 8101a8e:	4293      	cmp	r3, r2
 8101a90:	f040 8081 	bne.w	8101b96 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	4a44      	ldr	r2, [pc, #272]	; (8101bac <HAL_ADC_ConfigChannel+0x678>)
 8101a9a:	4293      	cmp	r3, r2
 8101a9c:	d004      	beq.n	8101aa8 <HAL_ADC_ConfigChannel+0x574>
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	681b      	ldr	r3, [r3, #0]
 8101aa2:	4a43      	ldr	r2, [pc, #268]	; (8101bb0 <HAL_ADC_ConfigChannel+0x67c>)
 8101aa4:	4293      	cmp	r3, r2
 8101aa6:	d101      	bne.n	8101aac <HAL_ADC_ConfigChannel+0x578>
 8101aa8:	4a42      	ldr	r2, [pc, #264]	; (8101bb4 <HAL_ADC_ConfigChannel+0x680>)
 8101aaa:	e000      	b.n	8101aae <HAL_ADC_ConfigChannel+0x57a>
 8101aac:	4a42      	ldr	r2, [pc, #264]	; (8101bb8 <HAL_ADC_ConfigChannel+0x684>)
 8101aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101ab4:	4619      	mov	r1, r3
 8101ab6:	4610      	mov	r0, r2
 8101ab8:	f7ff f8ad 	bl	8100c16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101abc:	4b41      	ldr	r3, [pc, #260]	; (8101bc4 <HAL_ADC_ConfigChannel+0x690>)
 8101abe:	681b      	ldr	r3, [r3, #0]
 8101ac0:	099b      	lsrs	r3, r3, #6
 8101ac2:	4a41      	ldr	r2, [pc, #260]	; (8101bc8 <HAL_ADC_ConfigChannel+0x694>)
 8101ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8101ac8:	099b      	lsrs	r3, r3, #6
 8101aca:	3301      	adds	r3, #1
 8101acc:	005b      	lsls	r3, r3, #1
 8101ace:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101ad0:	e002      	b.n	8101ad8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8101ad2:	68bb      	ldr	r3, [r7, #8]
 8101ad4:	3b01      	subs	r3, #1
 8101ad6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101ad8:	68bb      	ldr	r3, [r7, #8]
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d1f9      	bne.n	8101ad2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101ade:	e05a      	b.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101ae0:	683b      	ldr	r3, [r7, #0]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	4a39      	ldr	r2, [pc, #228]	; (8101bcc <HAL_ADC_ConfigChannel+0x698>)
 8101ae6:	4293      	cmp	r3, r2
 8101ae8:	d11e      	bne.n	8101b28 <HAL_ADC_ConfigChannel+0x5f4>
 8101aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101af0:	2b00      	cmp	r3, #0
 8101af2:	d119      	bne.n	8101b28 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101af4:	687b      	ldr	r3, [r7, #4]
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	4a30      	ldr	r2, [pc, #192]	; (8101bbc <HAL_ADC_ConfigChannel+0x688>)
 8101afa:	4293      	cmp	r3, r2
 8101afc:	d14b      	bne.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	4a2a      	ldr	r2, [pc, #168]	; (8101bac <HAL_ADC_ConfigChannel+0x678>)
 8101b04:	4293      	cmp	r3, r2
 8101b06:	d004      	beq.n	8101b12 <HAL_ADC_ConfigChannel+0x5de>
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	681b      	ldr	r3, [r3, #0]
 8101b0c:	4a28      	ldr	r2, [pc, #160]	; (8101bb0 <HAL_ADC_ConfigChannel+0x67c>)
 8101b0e:	4293      	cmp	r3, r2
 8101b10:	d101      	bne.n	8101b16 <HAL_ADC_ConfigChannel+0x5e2>
 8101b12:	4a28      	ldr	r2, [pc, #160]	; (8101bb4 <HAL_ADC_ConfigChannel+0x680>)
 8101b14:	e000      	b.n	8101b18 <HAL_ADC_ConfigChannel+0x5e4>
 8101b16:	4a28      	ldr	r2, [pc, #160]	; (8101bb8 <HAL_ADC_ConfigChannel+0x684>)
 8101b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8101b1e:	4619      	mov	r1, r3
 8101b20:	4610      	mov	r0, r2
 8101b22:	f7ff f878 	bl	8100c16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101b26:	e036      	b.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8101b28:	683b      	ldr	r3, [r7, #0]
 8101b2a:	681b      	ldr	r3, [r3, #0]
 8101b2c:	4a28      	ldr	r2, [pc, #160]	; (8101bd0 <HAL_ADC_ConfigChannel+0x69c>)
 8101b2e:	4293      	cmp	r3, r2
 8101b30:	d131      	bne.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
 8101b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d12c      	bne.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8101b3c:	687b      	ldr	r3, [r7, #4]
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	4a1e      	ldr	r2, [pc, #120]	; (8101bbc <HAL_ADC_ConfigChannel+0x688>)
 8101b42:	4293      	cmp	r3, r2
 8101b44:	d127      	bne.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	681b      	ldr	r3, [r3, #0]
 8101b4a:	4a18      	ldr	r2, [pc, #96]	; (8101bac <HAL_ADC_ConfigChannel+0x678>)
 8101b4c:	4293      	cmp	r3, r2
 8101b4e:	d004      	beq.n	8101b5a <HAL_ADC_ConfigChannel+0x626>
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	681b      	ldr	r3, [r3, #0]
 8101b54:	4a16      	ldr	r2, [pc, #88]	; (8101bb0 <HAL_ADC_ConfigChannel+0x67c>)
 8101b56:	4293      	cmp	r3, r2
 8101b58:	d101      	bne.n	8101b5e <HAL_ADC_ConfigChannel+0x62a>
 8101b5a:	4a16      	ldr	r2, [pc, #88]	; (8101bb4 <HAL_ADC_ConfigChannel+0x680>)
 8101b5c:	e000      	b.n	8101b60 <HAL_ADC_ConfigChannel+0x62c>
 8101b5e:	4a16      	ldr	r2, [pc, #88]	; (8101bb8 <HAL_ADC_ConfigChannel+0x684>)
 8101b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101b62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101b66:	4619      	mov	r1, r3
 8101b68:	4610      	mov	r0, r2
 8101b6a:	f7ff f854 	bl	8100c16 <LL_ADC_SetCommonPathInternalCh>
 8101b6e:	e012      	b.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101b74:	f043 0220 	orr.w	r2, r3, #32
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8101b7c:	2301      	movs	r3, #1
 8101b7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8101b82:	e008      	b.n	8101b96 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101b88:	f043 0220 	orr.w	r2, r3, #32
 8101b8c:	687b      	ldr	r3, [r7, #4]
 8101b8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8101b90:	2301      	movs	r3, #1
 8101b92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	2200      	movs	r2, #0
 8101b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8101b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8101ba2:	4618      	mov	r0, r3
 8101ba4:	3784      	adds	r7, #132	; 0x84
 8101ba6:	46bd      	mov	sp, r7
 8101ba8:	bd90      	pop	{r4, r7, pc}
 8101baa:	bf00      	nop
 8101bac:	40022000 	.word	0x40022000
 8101bb0:	40022100 	.word	0x40022100
 8101bb4:	40022300 	.word	0x40022300
 8101bb8:	58026300 	.word	0x58026300
 8101bbc:	58026000 	.word	0x58026000
 8101bc0:	cb840000 	.word	0xcb840000
 8101bc4:	10000000 	.word	0x10000000
 8101bc8:	053e2d63 	.word	0x053e2d63
 8101bcc:	c7520000 	.word	0xc7520000
 8101bd0:	cfb80000 	.word	0xcfb80000

08101bd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b084      	sub	sp, #16
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	4618      	mov	r0, r3
 8101be2:	f7ff f979 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101be6:	4603      	mov	r3, r0
 8101be8:	2b00      	cmp	r3, #0
 8101bea:	d16e      	bne.n	8101cca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	689a      	ldr	r2, [r3, #8]
 8101bf2:	4b38      	ldr	r3, [pc, #224]	; (8101cd4 <ADC_Enable+0x100>)
 8101bf4:	4013      	ands	r3, r2
 8101bf6:	2b00      	cmp	r3, #0
 8101bf8:	d00d      	beq.n	8101c16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101bfe:	f043 0210 	orr.w	r2, r3, #16
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101c0a:	f043 0201 	orr.w	r2, r3, #1
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8101c12:	2301      	movs	r3, #1
 8101c14:	e05a      	b.n	8101ccc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	681b      	ldr	r3, [r3, #0]
 8101c1a:	4618      	mov	r0, r3
 8101c1c:	f7ff f948 	bl	8100eb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8101c20:	f7fe ffce 	bl	8100bc0 <HAL_GetTick>
 8101c24:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	681b      	ldr	r3, [r3, #0]
 8101c2a:	4a2b      	ldr	r2, [pc, #172]	; (8101cd8 <ADC_Enable+0x104>)
 8101c2c:	4293      	cmp	r3, r2
 8101c2e:	d004      	beq.n	8101c3a <ADC_Enable+0x66>
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	4a29      	ldr	r2, [pc, #164]	; (8101cdc <ADC_Enable+0x108>)
 8101c36:	4293      	cmp	r3, r2
 8101c38:	d101      	bne.n	8101c3e <ADC_Enable+0x6a>
 8101c3a:	4b29      	ldr	r3, [pc, #164]	; (8101ce0 <ADC_Enable+0x10c>)
 8101c3c:	e000      	b.n	8101c40 <ADC_Enable+0x6c>
 8101c3e:	4b29      	ldr	r3, [pc, #164]	; (8101ce4 <ADC_Enable+0x110>)
 8101c40:	4618      	mov	r0, r3
 8101c42:	f7ff f8d9 	bl	8100df8 <LL_ADC_GetMultimode>
 8101c46:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	4a23      	ldr	r2, [pc, #140]	; (8101cdc <ADC_Enable+0x108>)
 8101c4e:	4293      	cmp	r3, r2
 8101c50:	d002      	beq.n	8101c58 <ADC_Enable+0x84>
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	e000      	b.n	8101c5a <ADC_Enable+0x86>
 8101c58:	4b1f      	ldr	r3, [pc, #124]	; (8101cd8 <ADC_Enable+0x104>)
 8101c5a:	687a      	ldr	r2, [r7, #4]
 8101c5c:	6812      	ldr	r2, [r2, #0]
 8101c5e:	4293      	cmp	r3, r2
 8101c60:	d02c      	beq.n	8101cbc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101c62:	68bb      	ldr	r3, [r7, #8]
 8101c64:	2b00      	cmp	r3, #0
 8101c66:	d130      	bne.n	8101cca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8101c68:	e028      	b.n	8101cbc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	4618      	mov	r0, r3
 8101c70:	f7ff f932 	bl	8100ed8 <LL_ADC_IsEnabled>
 8101c74:	4603      	mov	r3, r0
 8101c76:	2b00      	cmp	r3, #0
 8101c78:	d104      	bne.n	8101c84 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	4618      	mov	r0, r3
 8101c80:	f7ff f916 	bl	8100eb0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8101c84:	f7fe ff9c 	bl	8100bc0 <HAL_GetTick>
 8101c88:	4602      	mov	r2, r0
 8101c8a:	68fb      	ldr	r3, [r7, #12]
 8101c8c:	1ad3      	subs	r3, r2, r3
 8101c8e:	2b02      	cmp	r3, #2
 8101c90:	d914      	bls.n	8101cbc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	f003 0301 	and.w	r3, r3, #1
 8101c9c:	2b01      	cmp	r3, #1
 8101c9e:	d00d      	beq.n	8101cbc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ca4:	f043 0210 	orr.w	r2, r3, #16
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101cb0:	f043 0201 	orr.w	r2, r3, #1
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8101cb8:	2301      	movs	r3, #1
 8101cba:	e007      	b.n	8101ccc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	681b      	ldr	r3, [r3, #0]
 8101cc2:	f003 0301 	and.w	r3, r3, #1
 8101cc6:	2b01      	cmp	r3, #1
 8101cc8:	d1cf      	bne.n	8101c6a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8101cca:	2300      	movs	r3, #0
}
 8101ccc:	4618      	mov	r0, r3
 8101cce:	3710      	adds	r7, #16
 8101cd0:	46bd      	mov	sp, r7
 8101cd2:	bd80      	pop	{r7, pc}
 8101cd4:	8000003f 	.word	0x8000003f
 8101cd8:	40022000 	.word	0x40022000
 8101cdc:	40022100 	.word	0x40022100
 8101ce0:	40022300 	.word	0x40022300
 8101ce4:	58026300 	.word	0x58026300

08101ce8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8101ce8:	b580      	push	{r7, lr}
 8101cea:	b084      	sub	sp, #16
 8101cec:	af00      	add	r7, sp, #0
 8101cee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	4a7a      	ldr	r2, [pc, #488]	; (8101ee0 <ADC_ConfigureBoostMode+0x1f8>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d004      	beq.n	8101d04 <ADC_ConfigureBoostMode+0x1c>
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	4a79      	ldr	r2, [pc, #484]	; (8101ee4 <ADC_ConfigureBoostMode+0x1fc>)
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d109      	bne.n	8101d18 <ADC_ConfigureBoostMode+0x30>
 8101d04:	4b78      	ldr	r3, [pc, #480]	; (8101ee8 <ADC_ConfigureBoostMode+0x200>)
 8101d06:	689b      	ldr	r3, [r3, #8]
 8101d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101d0c:	2b00      	cmp	r3, #0
 8101d0e:	bf14      	ite	ne
 8101d10:	2301      	movne	r3, #1
 8101d12:	2300      	moveq	r3, #0
 8101d14:	b2db      	uxtb	r3, r3
 8101d16:	e008      	b.n	8101d2a <ADC_ConfigureBoostMode+0x42>
 8101d18:	4b74      	ldr	r3, [pc, #464]	; (8101eec <ADC_ConfigureBoostMode+0x204>)
 8101d1a:	689b      	ldr	r3, [r3, #8]
 8101d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101d20:	2b00      	cmp	r3, #0
 8101d22:	bf14      	ite	ne
 8101d24:	2301      	movne	r3, #1
 8101d26:	2300      	moveq	r3, #0
 8101d28:	b2db      	uxtb	r3, r3
 8101d2a:	2b00      	cmp	r3, #0
 8101d2c:	d01c      	beq.n	8101d68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8101d2e:	f000 feab 	bl	8102a88 <HAL_RCC_GetHCLKFreq>
 8101d32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	685b      	ldr	r3, [r3, #4]
 8101d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101d3c:	d010      	beq.n	8101d60 <ADC_ConfigureBoostMode+0x78>
 8101d3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101d42:	d873      	bhi.n	8101e2c <ADC_ConfigureBoostMode+0x144>
 8101d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101d48:	d002      	beq.n	8101d50 <ADC_ConfigureBoostMode+0x68>
 8101d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101d4e:	d16d      	bne.n	8101e2c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	685b      	ldr	r3, [r3, #4]
 8101d54:	0c1b      	lsrs	r3, r3, #16
 8101d56:	68fa      	ldr	r2, [r7, #12]
 8101d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8101d5c:	60fb      	str	r3, [r7, #12]
        break;
 8101d5e:	e068      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8101d60:	68fb      	ldr	r3, [r7, #12]
 8101d62:	089b      	lsrs	r3, r3, #2
 8101d64:	60fb      	str	r3, [r7, #12]
        break;
 8101d66:	e064      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8101d68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8101d6c:	f04f 0100 	mov.w	r1, #0
 8101d70:	f002 f8dc 	bl	8103f2c <HAL_RCCEx_GetPeriphCLKFreq>
 8101d74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101d76:	687b      	ldr	r3, [r7, #4]
 8101d78:	685b      	ldr	r3, [r3, #4]
 8101d7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8101d7e:	d051      	beq.n	8101e24 <ADC_ConfigureBoostMode+0x13c>
 8101d80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8101d84:	d854      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101d86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8101d8a:	d047      	beq.n	8101e1c <ADC_ConfigureBoostMode+0x134>
 8101d8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8101d90:	d84e      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101d92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8101d96:	d03d      	beq.n	8101e14 <ADC_ConfigureBoostMode+0x12c>
 8101d98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8101d9c:	d848      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101da2:	d033      	beq.n	8101e0c <ADC_ConfigureBoostMode+0x124>
 8101da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101da8:	d842      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101daa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8101dae:	d029      	beq.n	8101e04 <ADC_ConfigureBoostMode+0x11c>
 8101db0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8101db4:	d83c      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101db6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8101dba:	d01a      	beq.n	8101df2 <ADC_ConfigureBoostMode+0x10a>
 8101dbc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8101dc0:	d836      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101dc2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8101dc6:	d014      	beq.n	8101df2 <ADC_ConfigureBoostMode+0x10a>
 8101dc8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8101dcc:	d830      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101dd2:	d00e      	beq.n	8101df2 <ADC_ConfigureBoostMode+0x10a>
 8101dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101dd8:	d82a      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101dda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8101dde:	d008      	beq.n	8101df2 <ADC_ConfigureBoostMode+0x10a>
 8101de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8101de4:	d824      	bhi.n	8101e30 <ADC_ConfigureBoostMode+0x148>
 8101de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101dea:	d002      	beq.n	8101df2 <ADC_ConfigureBoostMode+0x10a>
 8101dec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8101df0:	d11e      	bne.n	8101e30 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	685b      	ldr	r3, [r3, #4]
 8101df6:	0c9b      	lsrs	r3, r3, #18
 8101df8:	005b      	lsls	r3, r3, #1
 8101dfa:	68fa      	ldr	r2, [r7, #12]
 8101dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8101e00:	60fb      	str	r3, [r7, #12]
        break;
 8101e02:	e016      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8101e04:	68fb      	ldr	r3, [r7, #12]
 8101e06:	091b      	lsrs	r3, r3, #4
 8101e08:	60fb      	str	r3, [r7, #12]
        break;
 8101e0a:	e012      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8101e0c:	68fb      	ldr	r3, [r7, #12]
 8101e0e:	095b      	lsrs	r3, r3, #5
 8101e10:	60fb      	str	r3, [r7, #12]
        break;
 8101e12:	e00e      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8101e14:	68fb      	ldr	r3, [r7, #12]
 8101e16:	099b      	lsrs	r3, r3, #6
 8101e18:	60fb      	str	r3, [r7, #12]
        break;
 8101e1a:	e00a      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8101e1c:	68fb      	ldr	r3, [r7, #12]
 8101e1e:	09db      	lsrs	r3, r3, #7
 8101e20:	60fb      	str	r3, [r7, #12]
        break;
 8101e22:	e006      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8101e24:	68fb      	ldr	r3, [r7, #12]
 8101e26:	0a1b      	lsrs	r3, r3, #8
 8101e28:	60fb      	str	r3, [r7, #12]
        break;
 8101e2a:	e002      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
        break;
 8101e2c:	bf00      	nop
 8101e2e:	e000      	b.n	8101e32 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8101e30:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8101e32:	f7fe fed1 	bl	8100bd8 <HAL_GetREVID>
 8101e36:	4603      	mov	r3, r0
 8101e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8101e3c:	4293      	cmp	r3, r2
 8101e3e:	d815      	bhi.n	8101e6c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8101e40:	68fb      	ldr	r3, [r7, #12]
 8101e42:	4a2b      	ldr	r2, [pc, #172]	; (8101ef0 <ADC_ConfigureBoostMode+0x208>)
 8101e44:	4293      	cmp	r3, r2
 8101e46:	d908      	bls.n	8101e5a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	689a      	ldr	r2, [r3, #8]
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	681b      	ldr	r3, [r3, #0]
 8101e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101e56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8101e58:	e03e      	b.n	8101ed8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	681b      	ldr	r3, [r3, #0]
 8101e5e:	689a      	ldr	r2, [r3, #8]
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101e68:	609a      	str	r2, [r3, #8]
}
 8101e6a:	e035      	b.n	8101ed8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8101e6c:	68fb      	ldr	r3, [r7, #12]
 8101e6e:	085b      	lsrs	r3, r3, #1
 8101e70:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8101e72:	68fb      	ldr	r3, [r7, #12]
 8101e74:	4a1f      	ldr	r2, [pc, #124]	; (8101ef4 <ADC_ConfigureBoostMode+0x20c>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d808      	bhi.n	8101e8c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	689a      	ldr	r2, [r3, #8]
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8101e88:	609a      	str	r2, [r3, #8]
}
 8101e8a:	e025      	b.n	8101ed8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8101e8c:	68fb      	ldr	r3, [r7, #12]
 8101e8e:	4a1a      	ldr	r2, [pc, #104]	; (8101ef8 <ADC_ConfigureBoostMode+0x210>)
 8101e90:	4293      	cmp	r3, r2
 8101e92:	d80a      	bhi.n	8101eaa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	681b      	ldr	r3, [r3, #0]
 8101e98:	689b      	ldr	r3, [r3, #8]
 8101e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8101e9e:	687b      	ldr	r3, [r7, #4]
 8101ea0:	681b      	ldr	r3, [r3, #0]
 8101ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101ea6:	609a      	str	r2, [r3, #8]
}
 8101ea8:	e016      	b.n	8101ed8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8101eaa:	68fb      	ldr	r3, [r7, #12]
 8101eac:	4a13      	ldr	r2, [pc, #76]	; (8101efc <ADC_ConfigureBoostMode+0x214>)
 8101eae:	4293      	cmp	r3, r2
 8101eb0:	d80a      	bhi.n	8101ec8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	681b      	ldr	r3, [r3, #0]
 8101eb6:	689b      	ldr	r3, [r3, #8]
 8101eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	681b      	ldr	r3, [r3, #0]
 8101ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8101ec4:	609a      	str	r2, [r3, #8]
}
 8101ec6:	e007      	b.n	8101ed8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	681b      	ldr	r3, [r3, #0]
 8101ecc:	689a      	ldr	r2, [r3, #8]
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8101ed6:	609a      	str	r2, [r3, #8]
}
 8101ed8:	bf00      	nop
 8101eda:	3710      	adds	r7, #16
 8101edc:	46bd      	mov	sp, r7
 8101ede:	bd80      	pop	{r7, pc}
 8101ee0:	40022000 	.word	0x40022000
 8101ee4:	40022100 	.word	0x40022100
 8101ee8:	40022300 	.word	0x40022300
 8101eec:	58026300 	.word	0x58026300
 8101ef0:	01312d00 	.word	0x01312d00
 8101ef4:	005f5e10 	.word	0x005f5e10
 8101ef8:	00bebc20 	.word	0x00bebc20
 8101efc:	017d7840 	.word	0x017d7840

08101f00 <LL_ADC_IsEnabled>:
{
 8101f00:	b480      	push	{r7}
 8101f02:	b083      	sub	sp, #12
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	689b      	ldr	r3, [r3, #8]
 8101f0c:	f003 0301 	and.w	r3, r3, #1
 8101f10:	2b01      	cmp	r3, #1
 8101f12:	d101      	bne.n	8101f18 <LL_ADC_IsEnabled+0x18>
 8101f14:	2301      	movs	r3, #1
 8101f16:	e000      	b.n	8101f1a <LL_ADC_IsEnabled+0x1a>
 8101f18:	2300      	movs	r3, #0
}
 8101f1a:	4618      	mov	r0, r3
 8101f1c:	370c      	adds	r7, #12
 8101f1e:	46bd      	mov	sp, r7
 8101f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f24:	4770      	bx	lr

08101f26 <LL_ADC_REG_IsConversionOngoing>:
{
 8101f26:	b480      	push	{r7}
 8101f28:	b083      	sub	sp, #12
 8101f2a:	af00      	add	r7, sp, #0
 8101f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	689b      	ldr	r3, [r3, #8]
 8101f32:	f003 0304 	and.w	r3, r3, #4
 8101f36:	2b04      	cmp	r3, #4
 8101f38:	d101      	bne.n	8101f3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8101f3a:	2301      	movs	r3, #1
 8101f3c:	e000      	b.n	8101f40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101f3e:	2300      	movs	r3, #0
}
 8101f40:	4618      	mov	r0, r3
 8101f42:	370c      	adds	r7, #12
 8101f44:	46bd      	mov	sp, r7
 8101f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4a:	4770      	bx	lr

08101f4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8101f4c:	b590      	push	{r4, r7, lr}
 8101f4e:	b09f      	sub	sp, #124	; 0x7c
 8101f50:	af00      	add	r7, sp, #0
 8101f52:	6078      	str	r0, [r7, #4]
 8101f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101f56:	2300      	movs	r3, #0
 8101f58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101f62:	2b01      	cmp	r3, #1
 8101f64:	d101      	bne.n	8101f6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8101f66:	2302      	movs	r3, #2
 8101f68:	e0c4      	b.n	81020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	2201      	movs	r2, #1
 8101f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8101f72:	2300      	movs	r3, #0
 8101f74:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8101f76:	2300      	movs	r3, #0
 8101f78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	681b      	ldr	r3, [r3, #0]
 8101f7e:	4a5f      	ldr	r2, [pc, #380]	; (81020fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101f80:	4293      	cmp	r3, r2
 8101f82:	d102      	bne.n	8101f8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8101f84:	4b5e      	ldr	r3, [pc, #376]	; (8102100 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101f86:	60bb      	str	r3, [r7, #8]
 8101f88:	e001      	b.n	8101f8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8101f8a:	2300      	movs	r3, #0
 8101f8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8101f8e:	68bb      	ldr	r3, [r7, #8]
 8101f90:	2b00      	cmp	r3, #0
 8101f92:	d10b      	bne.n	8101fac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f98:	f043 0220 	orr.w	r2, r3, #32
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	2200      	movs	r2, #0
 8101fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8101fa8:	2301      	movs	r3, #1
 8101faa:	e0a3      	b.n	81020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8101fac:	68bb      	ldr	r3, [r7, #8]
 8101fae:	4618      	mov	r0, r3
 8101fb0:	f7ff ffb9 	bl	8101f26 <LL_ADC_REG_IsConversionOngoing>
 8101fb4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	4618      	mov	r0, r3
 8101fbc:	f7ff ffb3 	bl	8101f26 <LL_ADC_REG_IsConversionOngoing>
 8101fc0:	4603      	mov	r3, r0
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	f040 8085 	bne.w	81020d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8101fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101fca:	2b00      	cmp	r3, #0
 8101fcc:	f040 8081 	bne.w	81020d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	4a49      	ldr	r2, [pc, #292]	; (81020fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101fd6:	4293      	cmp	r3, r2
 8101fd8:	d004      	beq.n	8101fe4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	4a48      	ldr	r2, [pc, #288]	; (8102100 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101fe0:	4293      	cmp	r3, r2
 8101fe2:	d101      	bne.n	8101fe8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8101fe4:	4b47      	ldr	r3, [pc, #284]	; (8102104 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8101fe6:	e000      	b.n	8101fea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8101fe8:	4b47      	ldr	r3, [pc, #284]	; (8102108 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8101fea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101fec:	683b      	ldr	r3, [r7, #0]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	2b00      	cmp	r3, #0
 8101ff2:	d03b      	beq.n	810206c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8101ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101ff6:	689b      	ldr	r3, [r3, #8]
 8101ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8101ffc:	683b      	ldr	r3, [r7, #0]
 8101ffe:	685b      	ldr	r3, [r3, #4]
 8102000:	431a      	orrs	r2, r3
 8102002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102004:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	4a3c      	ldr	r2, [pc, #240]	; (81020fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810200c:	4293      	cmp	r3, r2
 810200e:	d004      	beq.n	810201a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	4a3a      	ldr	r2, [pc, #232]	; (8102100 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102016:	4293      	cmp	r3, r2
 8102018:	d10e      	bne.n	8102038 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810201a:	4838      	ldr	r0, [pc, #224]	; (81020fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810201c:	f7ff ff70 	bl	8101f00 <LL_ADC_IsEnabled>
 8102020:	4604      	mov	r4, r0
 8102022:	4837      	ldr	r0, [pc, #220]	; (8102100 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102024:	f7ff ff6c 	bl	8101f00 <LL_ADC_IsEnabled>
 8102028:	4603      	mov	r3, r0
 810202a:	4323      	orrs	r3, r4
 810202c:	2b00      	cmp	r3, #0
 810202e:	bf0c      	ite	eq
 8102030:	2301      	moveq	r3, #1
 8102032:	2300      	movne	r3, #0
 8102034:	b2db      	uxtb	r3, r3
 8102036:	e008      	b.n	810204a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8102038:	4834      	ldr	r0, [pc, #208]	; (810210c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810203a:	f7ff ff61 	bl	8101f00 <LL_ADC_IsEnabled>
 810203e:	4603      	mov	r3, r0
 8102040:	2b00      	cmp	r3, #0
 8102042:	bf0c      	ite	eq
 8102044:	2301      	moveq	r3, #1
 8102046:	2300      	movne	r3, #0
 8102048:	b2db      	uxtb	r3, r3
 810204a:	2b00      	cmp	r3, #0
 810204c:	d04b      	beq.n	81020e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102050:	689b      	ldr	r3, [r3, #8]
 8102052:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102056:	f023 030f 	bic.w	r3, r3, #15
 810205a:	683a      	ldr	r2, [r7, #0]
 810205c:	6811      	ldr	r1, [r2, #0]
 810205e:	683a      	ldr	r2, [r7, #0]
 8102060:	6892      	ldr	r2, [r2, #8]
 8102062:	430a      	orrs	r2, r1
 8102064:	431a      	orrs	r2, r3
 8102066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102068:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810206a:	e03c      	b.n	81020e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 810206c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810206e:	689b      	ldr	r3, [r3, #8]
 8102070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102076:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	4a1f      	ldr	r2, [pc, #124]	; (81020fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810207e:	4293      	cmp	r3, r2
 8102080:	d004      	beq.n	810208c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	681b      	ldr	r3, [r3, #0]
 8102086:	4a1e      	ldr	r2, [pc, #120]	; (8102100 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102088:	4293      	cmp	r3, r2
 810208a:	d10e      	bne.n	81020aa <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 810208c:	481b      	ldr	r0, [pc, #108]	; (81020fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810208e:	f7ff ff37 	bl	8101f00 <LL_ADC_IsEnabled>
 8102092:	4604      	mov	r4, r0
 8102094:	481a      	ldr	r0, [pc, #104]	; (8102100 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102096:	f7ff ff33 	bl	8101f00 <LL_ADC_IsEnabled>
 810209a:	4603      	mov	r3, r0
 810209c:	4323      	orrs	r3, r4
 810209e:	2b00      	cmp	r3, #0
 81020a0:	bf0c      	ite	eq
 81020a2:	2301      	moveq	r3, #1
 81020a4:	2300      	movne	r3, #0
 81020a6:	b2db      	uxtb	r3, r3
 81020a8:	e008      	b.n	81020bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81020aa:	4818      	ldr	r0, [pc, #96]	; (810210c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81020ac:	f7ff ff28 	bl	8101f00 <LL_ADC_IsEnabled>
 81020b0:	4603      	mov	r3, r0
 81020b2:	2b00      	cmp	r3, #0
 81020b4:	bf0c      	ite	eq
 81020b6:	2301      	moveq	r3, #1
 81020b8:	2300      	movne	r3, #0
 81020ba:	b2db      	uxtb	r3, r3
 81020bc:	2b00      	cmp	r3, #0
 81020be:	d012      	beq.n	81020e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81020c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81020c2:	689b      	ldr	r3, [r3, #8]
 81020c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81020c8:	f023 030f 	bic.w	r3, r3, #15
 81020cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81020ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81020d0:	e009      	b.n	81020e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020d6:	f043 0220 	orr.w	r2, r3, #32
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81020de:	2301      	movs	r3, #1
 81020e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81020e4:	e000      	b.n	81020e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81020e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	2200      	movs	r2, #0
 81020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81020f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81020f4:	4618      	mov	r0, r3
 81020f6:	377c      	adds	r7, #124	; 0x7c
 81020f8:	46bd      	mov	sp, r7
 81020fa:	bd90      	pop	{r4, r7, pc}
 81020fc:	40022000 	.word	0x40022000
 8102100:	40022100 	.word	0x40022100
 8102104:	40022300 	.word	0x40022300
 8102108:	58026300 	.word	0x58026300
 810210c:	58026000 	.word	0x58026000

08102110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102110:	b480      	push	{r7}
 8102112:	b085      	sub	sp, #20
 8102114:	af00      	add	r7, sp, #0
 8102116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	f003 0307 	and.w	r3, r3, #7
 810211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102120:	4b0c      	ldr	r3, [pc, #48]	; (8102154 <__NVIC_SetPriorityGrouping+0x44>)
 8102122:	68db      	ldr	r3, [r3, #12]
 8102124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102126:	68ba      	ldr	r2, [r7, #8]
 8102128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810212c:	4013      	ands	r3, r2
 810212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102130:	68fb      	ldr	r3, [r7, #12]
 8102132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102134:	68bb      	ldr	r3, [r7, #8]
 8102136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102142:	4a04      	ldr	r2, [pc, #16]	; (8102154 <__NVIC_SetPriorityGrouping+0x44>)
 8102144:	68bb      	ldr	r3, [r7, #8]
 8102146:	60d3      	str	r3, [r2, #12]
}
 8102148:	bf00      	nop
 810214a:	3714      	adds	r7, #20
 810214c:	46bd      	mov	sp, r7
 810214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102152:	4770      	bx	lr
 8102154:	e000ed00 	.word	0xe000ed00

08102158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102158:	b480      	push	{r7}
 810215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810215c:	4b04      	ldr	r3, [pc, #16]	; (8102170 <__NVIC_GetPriorityGrouping+0x18>)
 810215e:	68db      	ldr	r3, [r3, #12]
 8102160:	0a1b      	lsrs	r3, r3, #8
 8102162:	f003 0307 	and.w	r3, r3, #7
}
 8102166:	4618      	mov	r0, r3
 8102168:	46bd      	mov	sp, r7
 810216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810216e:	4770      	bx	lr
 8102170:	e000ed00 	.word	0xe000ed00

08102174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102174:	b480      	push	{r7}
 8102176:	b083      	sub	sp, #12
 8102178:	af00      	add	r7, sp, #0
 810217a:	4603      	mov	r3, r0
 810217c:	6039      	str	r1, [r7, #0]
 810217e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102184:	2b00      	cmp	r3, #0
 8102186:	db0a      	blt.n	810219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102188:	683b      	ldr	r3, [r7, #0]
 810218a:	b2da      	uxtb	r2, r3
 810218c:	490c      	ldr	r1, [pc, #48]	; (81021c0 <__NVIC_SetPriority+0x4c>)
 810218e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102192:	0112      	lsls	r2, r2, #4
 8102194:	b2d2      	uxtb	r2, r2
 8102196:	440b      	add	r3, r1
 8102198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810219c:	e00a      	b.n	81021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810219e:	683b      	ldr	r3, [r7, #0]
 81021a0:	b2da      	uxtb	r2, r3
 81021a2:	4908      	ldr	r1, [pc, #32]	; (81021c4 <__NVIC_SetPriority+0x50>)
 81021a4:	88fb      	ldrh	r3, [r7, #6]
 81021a6:	f003 030f 	and.w	r3, r3, #15
 81021aa:	3b04      	subs	r3, #4
 81021ac:	0112      	lsls	r2, r2, #4
 81021ae:	b2d2      	uxtb	r2, r2
 81021b0:	440b      	add	r3, r1
 81021b2:	761a      	strb	r2, [r3, #24]
}
 81021b4:	bf00      	nop
 81021b6:	370c      	adds	r7, #12
 81021b8:	46bd      	mov	sp, r7
 81021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021be:	4770      	bx	lr
 81021c0:	e000e100 	.word	0xe000e100
 81021c4:	e000ed00 	.word	0xe000ed00

081021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81021c8:	b480      	push	{r7}
 81021ca:	b089      	sub	sp, #36	; 0x24
 81021cc:	af00      	add	r7, sp, #0
 81021ce:	60f8      	str	r0, [r7, #12]
 81021d0:	60b9      	str	r1, [r7, #8]
 81021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81021d4:	68fb      	ldr	r3, [r7, #12]
 81021d6:	f003 0307 	and.w	r3, r3, #7
 81021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81021dc:	69fb      	ldr	r3, [r7, #28]
 81021de:	f1c3 0307 	rsb	r3, r3, #7
 81021e2:	2b04      	cmp	r3, #4
 81021e4:	bf28      	it	cs
 81021e6:	2304      	movcs	r3, #4
 81021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81021ea:	69fb      	ldr	r3, [r7, #28]
 81021ec:	3304      	adds	r3, #4
 81021ee:	2b06      	cmp	r3, #6
 81021f0:	d902      	bls.n	81021f8 <NVIC_EncodePriority+0x30>
 81021f2:	69fb      	ldr	r3, [r7, #28]
 81021f4:	3b03      	subs	r3, #3
 81021f6:	e000      	b.n	81021fa <NVIC_EncodePriority+0x32>
 81021f8:	2300      	movs	r3, #0
 81021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8102200:	69bb      	ldr	r3, [r7, #24]
 8102202:	fa02 f303 	lsl.w	r3, r2, r3
 8102206:	43da      	mvns	r2, r3
 8102208:	68bb      	ldr	r3, [r7, #8]
 810220a:	401a      	ands	r2, r3
 810220c:	697b      	ldr	r3, [r7, #20]
 810220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102210:	f04f 31ff 	mov.w	r1, #4294967295
 8102214:	697b      	ldr	r3, [r7, #20]
 8102216:	fa01 f303 	lsl.w	r3, r1, r3
 810221a:	43d9      	mvns	r1, r3
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102220:	4313      	orrs	r3, r2
         );
}
 8102222:	4618      	mov	r0, r3
 8102224:	3724      	adds	r7, #36	; 0x24
 8102226:	46bd      	mov	sp, r7
 8102228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222c:	4770      	bx	lr
	...

08102230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102230:	b580      	push	{r7, lr}
 8102232:	b082      	sub	sp, #8
 8102234:	af00      	add	r7, sp, #0
 8102236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	3b01      	subs	r3, #1
 810223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102240:	d301      	bcc.n	8102246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102242:	2301      	movs	r3, #1
 8102244:	e00f      	b.n	8102266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102246:	4a0a      	ldr	r2, [pc, #40]	; (8102270 <SysTick_Config+0x40>)
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	3b01      	subs	r3, #1
 810224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810224e:	210f      	movs	r1, #15
 8102250:	f04f 30ff 	mov.w	r0, #4294967295
 8102254:	f7ff ff8e 	bl	8102174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102258:	4b05      	ldr	r3, [pc, #20]	; (8102270 <SysTick_Config+0x40>)
 810225a:	2200      	movs	r2, #0
 810225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810225e:	4b04      	ldr	r3, [pc, #16]	; (8102270 <SysTick_Config+0x40>)
 8102260:	2207      	movs	r2, #7
 8102262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102264:	2300      	movs	r3, #0
}
 8102266:	4618      	mov	r0, r3
 8102268:	3708      	adds	r7, #8
 810226a:	46bd      	mov	sp, r7
 810226c:	bd80      	pop	{r7, pc}
 810226e:	bf00      	nop
 8102270:	e000e010 	.word	0xe000e010

08102274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102274:	b580      	push	{r7, lr}
 8102276:	b082      	sub	sp, #8
 8102278:	af00      	add	r7, sp, #0
 810227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810227c:	6878      	ldr	r0, [r7, #4]
 810227e:	f7ff ff47 	bl	8102110 <__NVIC_SetPriorityGrouping>
}
 8102282:	bf00      	nop
 8102284:	3708      	adds	r7, #8
 8102286:	46bd      	mov	sp, r7
 8102288:	bd80      	pop	{r7, pc}

0810228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810228a:	b580      	push	{r7, lr}
 810228c:	b086      	sub	sp, #24
 810228e:	af00      	add	r7, sp, #0
 8102290:	4603      	mov	r3, r0
 8102292:	60b9      	str	r1, [r7, #8]
 8102294:	607a      	str	r2, [r7, #4]
 8102296:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102298:	f7ff ff5e 	bl	8102158 <__NVIC_GetPriorityGrouping>
 810229c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810229e:	687a      	ldr	r2, [r7, #4]
 81022a0:	68b9      	ldr	r1, [r7, #8]
 81022a2:	6978      	ldr	r0, [r7, #20]
 81022a4:	f7ff ff90 	bl	81021c8 <NVIC_EncodePriority>
 81022a8:	4602      	mov	r2, r0
 81022aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81022ae:	4611      	mov	r1, r2
 81022b0:	4618      	mov	r0, r3
 81022b2:	f7ff ff5f 	bl	8102174 <__NVIC_SetPriority>
}
 81022b6:	bf00      	nop
 81022b8:	3718      	adds	r7, #24
 81022ba:	46bd      	mov	sp, r7
 81022bc:	bd80      	pop	{r7, pc}

081022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81022be:	b580      	push	{r7, lr}
 81022c0:	b082      	sub	sp, #8
 81022c2:	af00      	add	r7, sp, #0
 81022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81022c6:	6878      	ldr	r0, [r7, #4]
 81022c8:	f7ff ffb2 	bl	8102230 <SysTick_Config>
 81022cc:	4603      	mov	r3, r0
}
 81022ce:	4618      	mov	r0, r3
 81022d0:	3708      	adds	r7, #8
 81022d2:	46bd      	mov	sp, r7
 81022d4:	bd80      	pop	{r7, pc}
	...

081022d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81022d8:	b480      	push	{r7}
 81022da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81022dc:	4b07      	ldr	r3, [pc, #28]	; (81022fc <HAL_GetCurrentCPUID+0x24>)
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	091b      	lsrs	r3, r3, #4
 81022e2:	f003 030f 	and.w	r3, r3, #15
 81022e6:	2b07      	cmp	r3, #7
 81022e8:	d101      	bne.n	81022ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81022ea:	2303      	movs	r3, #3
 81022ec:	e000      	b.n	81022f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81022ee:	2301      	movs	r3, #1
  }
}
 81022f0:	4618      	mov	r0, r3
 81022f2:	46bd      	mov	sp, r7
 81022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f8:	4770      	bx	lr
 81022fa:	bf00      	nop
 81022fc:	e000ed00 	.word	0xe000ed00

08102300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102300:	b480      	push	{r7}
 8102302:	b089      	sub	sp, #36	; 0x24
 8102304:	af00      	add	r7, sp, #0
 8102306:	6078      	str	r0, [r7, #4]
 8102308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810230a:	2300      	movs	r3, #0
 810230c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810230e:	4b89      	ldr	r3, [pc, #548]	; (8102534 <HAL_GPIO_Init+0x234>)
 8102310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102312:	e194      	b.n	810263e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102314:	683b      	ldr	r3, [r7, #0]
 8102316:	681a      	ldr	r2, [r3, #0]
 8102318:	2101      	movs	r1, #1
 810231a:	69fb      	ldr	r3, [r7, #28]
 810231c:	fa01 f303 	lsl.w	r3, r1, r3
 8102320:	4013      	ands	r3, r2
 8102322:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102324:	693b      	ldr	r3, [r7, #16]
 8102326:	2b00      	cmp	r3, #0
 8102328:	f000 8186 	beq.w	8102638 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	685b      	ldr	r3, [r3, #4]
 8102330:	f003 0303 	and.w	r3, r3, #3
 8102334:	2b01      	cmp	r3, #1
 8102336:	d005      	beq.n	8102344 <HAL_GPIO_Init+0x44>
 8102338:	683b      	ldr	r3, [r7, #0]
 810233a:	685b      	ldr	r3, [r3, #4]
 810233c:	f003 0303 	and.w	r3, r3, #3
 8102340:	2b02      	cmp	r3, #2
 8102342:	d130      	bne.n	81023a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	689b      	ldr	r3, [r3, #8]
 8102348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810234a:	69fb      	ldr	r3, [r7, #28]
 810234c:	005b      	lsls	r3, r3, #1
 810234e:	2203      	movs	r2, #3
 8102350:	fa02 f303 	lsl.w	r3, r2, r3
 8102354:	43db      	mvns	r3, r3
 8102356:	69ba      	ldr	r2, [r7, #24]
 8102358:	4013      	ands	r3, r2
 810235a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810235c:	683b      	ldr	r3, [r7, #0]
 810235e:	68da      	ldr	r2, [r3, #12]
 8102360:	69fb      	ldr	r3, [r7, #28]
 8102362:	005b      	lsls	r3, r3, #1
 8102364:	fa02 f303 	lsl.w	r3, r2, r3
 8102368:	69ba      	ldr	r2, [r7, #24]
 810236a:	4313      	orrs	r3, r2
 810236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	69ba      	ldr	r2, [r7, #24]
 8102372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	685b      	ldr	r3, [r3, #4]
 8102378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810237a:	2201      	movs	r2, #1
 810237c:	69fb      	ldr	r3, [r7, #28]
 810237e:	fa02 f303 	lsl.w	r3, r2, r3
 8102382:	43db      	mvns	r3, r3
 8102384:	69ba      	ldr	r2, [r7, #24]
 8102386:	4013      	ands	r3, r2
 8102388:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810238a:	683b      	ldr	r3, [r7, #0]
 810238c:	685b      	ldr	r3, [r3, #4]
 810238e:	091b      	lsrs	r3, r3, #4
 8102390:	f003 0201 	and.w	r2, r3, #1
 8102394:	69fb      	ldr	r3, [r7, #28]
 8102396:	fa02 f303 	lsl.w	r3, r2, r3
 810239a:	69ba      	ldr	r2, [r7, #24]
 810239c:	4313      	orrs	r3, r2
 810239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	69ba      	ldr	r2, [r7, #24]
 81023a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81023a6:	683b      	ldr	r3, [r7, #0]
 81023a8:	685b      	ldr	r3, [r3, #4]
 81023aa:	f003 0303 	and.w	r3, r3, #3
 81023ae:	2b03      	cmp	r3, #3
 81023b0:	d017      	beq.n	81023e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	68db      	ldr	r3, [r3, #12]
 81023b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81023b8:	69fb      	ldr	r3, [r7, #28]
 81023ba:	005b      	lsls	r3, r3, #1
 81023bc:	2203      	movs	r2, #3
 81023be:	fa02 f303 	lsl.w	r3, r2, r3
 81023c2:	43db      	mvns	r3, r3
 81023c4:	69ba      	ldr	r2, [r7, #24]
 81023c6:	4013      	ands	r3, r2
 81023c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81023ca:	683b      	ldr	r3, [r7, #0]
 81023cc:	689a      	ldr	r2, [r3, #8]
 81023ce:	69fb      	ldr	r3, [r7, #28]
 81023d0:	005b      	lsls	r3, r3, #1
 81023d2:	fa02 f303 	lsl.w	r3, r2, r3
 81023d6:	69ba      	ldr	r2, [r7, #24]
 81023d8:	4313      	orrs	r3, r2
 81023da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	69ba      	ldr	r2, [r7, #24]
 81023e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81023e2:	683b      	ldr	r3, [r7, #0]
 81023e4:	685b      	ldr	r3, [r3, #4]
 81023e6:	f003 0303 	and.w	r3, r3, #3
 81023ea:	2b02      	cmp	r3, #2
 81023ec:	d123      	bne.n	8102436 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81023ee:	69fb      	ldr	r3, [r7, #28]
 81023f0:	08da      	lsrs	r2, r3, #3
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	3208      	adds	r2, #8
 81023f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81023fc:	69fb      	ldr	r3, [r7, #28]
 81023fe:	f003 0307 	and.w	r3, r3, #7
 8102402:	009b      	lsls	r3, r3, #2
 8102404:	220f      	movs	r2, #15
 8102406:	fa02 f303 	lsl.w	r3, r2, r3
 810240a:	43db      	mvns	r3, r3
 810240c:	69ba      	ldr	r2, [r7, #24]
 810240e:	4013      	ands	r3, r2
 8102410:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102412:	683b      	ldr	r3, [r7, #0]
 8102414:	691a      	ldr	r2, [r3, #16]
 8102416:	69fb      	ldr	r3, [r7, #28]
 8102418:	f003 0307 	and.w	r3, r3, #7
 810241c:	009b      	lsls	r3, r3, #2
 810241e:	fa02 f303 	lsl.w	r3, r2, r3
 8102422:	69ba      	ldr	r2, [r7, #24]
 8102424:	4313      	orrs	r3, r2
 8102426:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102428:	69fb      	ldr	r3, [r7, #28]
 810242a:	08da      	lsrs	r2, r3, #3
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	3208      	adds	r2, #8
 8102430:	69b9      	ldr	r1, [r7, #24]
 8102432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	681b      	ldr	r3, [r3, #0]
 810243a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810243c:	69fb      	ldr	r3, [r7, #28]
 810243e:	005b      	lsls	r3, r3, #1
 8102440:	2203      	movs	r2, #3
 8102442:	fa02 f303 	lsl.w	r3, r2, r3
 8102446:	43db      	mvns	r3, r3
 8102448:	69ba      	ldr	r2, [r7, #24]
 810244a:	4013      	ands	r3, r2
 810244c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810244e:	683b      	ldr	r3, [r7, #0]
 8102450:	685b      	ldr	r3, [r3, #4]
 8102452:	f003 0203 	and.w	r2, r3, #3
 8102456:	69fb      	ldr	r3, [r7, #28]
 8102458:	005b      	lsls	r3, r3, #1
 810245a:	fa02 f303 	lsl.w	r3, r2, r3
 810245e:	69ba      	ldr	r2, [r7, #24]
 8102460:	4313      	orrs	r3, r2
 8102462:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	69ba      	ldr	r2, [r7, #24]
 8102468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810246a:	683b      	ldr	r3, [r7, #0]
 810246c:	685b      	ldr	r3, [r3, #4]
 810246e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102472:	2b00      	cmp	r3, #0
 8102474:	f000 80e0 	beq.w	8102638 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102478:	4b2f      	ldr	r3, [pc, #188]	; (8102538 <HAL_GPIO_Init+0x238>)
 810247a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810247e:	4a2e      	ldr	r2, [pc, #184]	; (8102538 <HAL_GPIO_Init+0x238>)
 8102480:	f043 0302 	orr.w	r3, r3, #2
 8102484:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102488:	4b2b      	ldr	r3, [pc, #172]	; (8102538 <HAL_GPIO_Init+0x238>)
 810248a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810248e:	f003 0302 	and.w	r3, r3, #2
 8102492:	60fb      	str	r3, [r7, #12]
 8102494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102496:	4a29      	ldr	r2, [pc, #164]	; (810253c <HAL_GPIO_Init+0x23c>)
 8102498:	69fb      	ldr	r3, [r7, #28]
 810249a:	089b      	lsrs	r3, r3, #2
 810249c:	3302      	adds	r3, #2
 810249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81024a4:	69fb      	ldr	r3, [r7, #28]
 81024a6:	f003 0303 	and.w	r3, r3, #3
 81024aa:	009b      	lsls	r3, r3, #2
 81024ac:	220f      	movs	r2, #15
 81024ae:	fa02 f303 	lsl.w	r3, r2, r3
 81024b2:	43db      	mvns	r3, r3
 81024b4:	69ba      	ldr	r2, [r7, #24]
 81024b6:	4013      	ands	r3, r2
 81024b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	4a20      	ldr	r2, [pc, #128]	; (8102540 <HAL_GPIO_Init+0x240>)
 81024be:	4293      	cmp	r3, r2
 81024c0:	d052      	beq.n	8102568 <HAL_GPIO_Init+0x268>
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	4a1f      	ldr	r2, [pc, #124]	; (8102544 <HAL_GPIO_Init+0x244>)
 81024c6:	4293      	cmp	r3, r2
 81024c8:	d031      	beq.n	810252e <HAL_GPIO_Init+0x22e>
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	4a1e      	ldr	r2, [pc, #120]	; (8102548 <HAL_GPIO_Init+0x248>)
 81024ce:	4293      	cmp	r3, r2
 81024d0:	d02b      	beq.n	810252a <HAL_GPIO_Init+0x22a>
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	4a1d      	ldr	r2, [pc, #116]	; (810254c <HAL_GPIO_Init+0x24c>)
 81024d6:	4293      	cmp	r3, r2
 81024d8:	d025      	beq.n	8102526 <HAL_GPIO_Init+0x226>
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	4a1c      	ldr	r2, [pc, #112]	; (8102550 <HAL_GPIO_Init+0x250>)
 81024de:	4293      	cmp	r3, r2
 81024e0:	d01f      	beq.n	8102522 <HAL_GPIO_Init+0x222>
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	4a1b      	ldr	r2, [pc, #108]	; (8102554 <HAL_GPIO_Init+0x254>)
 81024e6:	4293      	cmp	r3, r2
 81024e8:	d019      	beq.n	810251e <HAL_GPIO_Init+0x21e>
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	4a1a      	ldr	r2, [pc, #104]	; (8102558 <HAL_GPIO_Init+0x258>)
 81024ee:	4293      	cmp	r3, r2
 81024f0:	d013      	beq.n	810251a <HAL_GPIO_Init+0x21a>
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	4a19      	ldr	r2, [pc, #100]	; (810255c <HAL_GPIO_Init+0x25c>)
 81024f6:	4293      	cmp	r3, r2
 81024f8:	d00d      	beq.n	8102516 <HAL_GPIO_Init+0x216>
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	4a18      	ldr	r2, [pc, #96]	; (8102560 <HAL_GPIO_Init+0x260>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d007      	beq.n	8102512 <HAL_GPIO_Init+0x212>
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	4a17      	ldr	r2, [pc, #92]	; (8102564 <HAL_GPIO_Init+0x264>)
 8102506:	4293      	cmp	r3, r2
 8102508:	d101      	bne.n	810250e <HAL_GPIO_Init+0x20e>
 810250a:	2309      	movs	r3, #9
 810250c:	e02d      	b.n	810256a <HAL_GPIO_Init+0x26a>
 810250e:	230a      	movs	r3, #10
 8102510:	e02b      	b.n	810256a <HAL_GPIO_Init+0x26a>
 8102512:	2308      	movs	r3, #8
 8102514:	e029      	b.n	810256a <HAL_GPIO_Init+0x26a>
 8102516:	2307      	movs	r3, #7
 8102518:	e027      	b.n	810256a <HAL_GPIO_Init+0x26a>
 810251a:	2306      	movs	r3, #6
 810251c:	e025      	b.n	810256a <HAL_GPIO_Init+0x26a>
 810251e:	2305      	movs	r3, #5
 8102520:	e023      	b.n	810256a <HAL_GPIO_Init+0x26a>
 8102522:	2304      	movs	r3, #4
 8102524:	e021      	b.n	810256a <HAL_GPIO_Init+0x26a>
 8102526:	2303      	movs	r3, #3
 8102528:	e01f      	b.n	810256a <HAL_GPIO_Init+0x26a>
 810252a:	2302      	movs	r3, #2
 810252c:	e01d      	b.n	810256a <HAL_GPIO_Init+0x26a>
 810252e:	2301      	movs	r3, #1
 8102530:	e01b      	b.n	810256a <HAL_GPIO_Init+0x26a>
 8102532:	bf00      	nop
 8102534:	580000c0 	.word	0x580000c0
 8102538:	58024400 	.word	0x58024400
 810253c:	58000400 	.word	0x58000400
 8102540:	58020000 	.word	0x58020000
 8102544:	58020400 	.word	0x58020400
 8102548:	58020800 	.word	0x58020800
 810254c:	58020c00 	.word	0x58020c00
 8102550:	58021000 	.word	0x58021000
 8102554:	58021400 	.word	0x58021400
 8102558:	58021800 	.word	0x58021800
 810255c:	58021c00 	.word	0x58021c00
 8102560:	58022000 	.word	0x58022000
 8102564:	58022400 	.word	0x58022400
 8102568:	2300      	movs	r3, #0
 810256a:	69fa      	ldr	r2, [r7, #28]
 810256c:	f002 0203 	and.w	r2, r2, #3
 8102570:	0092      	lsls	r2, r2, #2
 8102572:	4093      	lsls	r3, r2
 8102574:	69ba      	ldr	r2, [r7, #24]
 8102576:	4313      	orrs	r3, r2
 8102578:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810257a:	4938      	ldr	r1, [pc, #224]	; (810265c <HAL_GPIO_Init+0x35c>)
 810257c:	69fb      	ldr	r3, [r7, #28]
 810257e:	089b      	lsrs	r3, r3, #2
 8102580:	3302      	adds	r3, #2
 8102582:	69ba      	ldr	r2, [r7, #24]
 8102584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102590:	693b      	ldr	r3, [r7, #16]
 8102592:	43db      	mvns	r3, r3
 8102594:	69ba      	ldr	r2, [r7, #24]
 8102596:	4013      	ands	r3, r2
 8102598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810259a:	683b      	ldr	r3, [r7, #0]
 810259c:	685b      	ldr	r3, [r3, #4]
 810259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81025a2:	2b00      	cmp	r3, #0
 81025a4:	d003      	beq.n	81025ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81025a6:	69ba      	ldr	r2, [r7, #24]
 81025a8:	693b      	ldr	r3, [r7, #16]
 81025aa:	4313      	orrs	r3, r2
 81025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81025ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81025b2:	69bb      	ldr	r3, [r7, #24]
 81025b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81025ba:	685b      	ldr	r3, [r3, #4]
 81025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81025be:	693b      	ldr	r3, [r7, #16]
 81025c0:	43db      	mvns	r3, r3
 81025c2:	69ba      	ldr	r2, [r7, #24]
 81025c4:	4013      	ands	r3, r2
 81025c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81025c8:	683b      	ldr	r3, [r7, #0]
 81025ca:	685b      	ldr	r3, [r3, #4]
 81025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d003      	beq.n	81025dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81025d4:	69ba      	ldr	r2, [r7, #24]
 81025d6:	693b      	ldr	r3, [r7, #16]
 81025d8:	4313      	orrs	r3, r2
 81025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81025e0:	69bb      	ldr	r3, [r7, #24]
 81025e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81025e4:	697b      	ldr	r3, [r7, #20]
 81025e6:	685b      	ldr	r3, [r3, #4]
 81025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81025ea:	693b      	ldr	r3, [r7, #16]
 81025ec:	43db      	mvns	r3, r3
 81025ee:	69ba      	ldr	r2, [r7, #24]
 81025f0:	4013      	ands	r3, r2
 81025f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81025f4:	683b      	ldr	r3, [r7, #0]
 81025f6:	685b      	ldr	r3, [r3, #4]
 81025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	d003      	beq.n	8102608 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102600:	69ba      	ldr	r2, [r7, #24]
 8102602:	693b      	ldr	r3, [r7, #16]
 8102604:	4313      	orrs	r3, r2
 8102606:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102608:	697b      	ldr	r3, [r7, #20]
 810260a:	69ba      	ldr	r2, [r7, #24]
 810260c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810260e:	697b      	ldr	r3, [r7, #20]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102614:	693b      	ldr	r3, [r7, #16]
 8102616:	43db      	mvns	r3, r3
 8102618:	69ba      	ldr	r2, [r7, #24]
 810261a:	4013      	ands	r3, r2
 810261c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810261e:	683b      	ldr	r3, [r7, #0]
 8102620:	685b      	ldr	r3, [r3, #4]
 8102622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102626:	2b00      	cmp	r3, #0
 8102628:	d003      	beq.n	8102632 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810262a:	69ba      	ldr	r2, [r7, #24]
 810262c:	693b      	ldr	r3, [r7, #16]
 810262e:	4313      	orrs	r3, r2
 8102630:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102632:	697b      	ldr	r3, [r7, #20]
 8102634:	69ba      	ldr	r2, [r7, #24]
 8102636:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102638:	69fb      	ldr	r3, [r7, #28]
 810263a:	3301      	adds	r3, #1
 810263c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810263e:	683b      	ldr	r3, [r7, #0]
 8102640:	681a      	ldr	r2, [r3, #0]
 8102642:	69fb      	ldr	r3, [r7, #28]
 8102644:	fa22 f303 	lsr.w	r3, r2, r3
 8102648:	2b00      	cmp	r3, #0
 810264a:	f47f ae63 	bne.w	8102314 <HAL_GPIO_Init+0x14>
  }
}
 810264e:	bf00      	nop
 8102650:	bf00      	nop
 8102652:	3724      	adds	r7, #36	; 0x24
 8102654:	46bd      	mov	sp, r7
 8102656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810265a:	4770      	bx	lr
 810265c:	58000400 	.word	0x58000400

08102660 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102660:	b480      	push	{r7}
 8102662:	b083      	sub	sp, #12
 8102664:	af00      	add	r7, sp, #0
 8102666:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102668:	4b05      	ldr	r3, [pc, #20]	; (8102680 <HAL_HSEM_ActivateNotification+0x20>)
 810266a:	681a      	ldr	r2, [r3, #0]
 810266c:	4904      	ldr	r1, [pc, #16]	; (8102680 <HAL_HSEM_ActivateNotification+0x20>)
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	4313      	orrs	r3, r2
 8102672:	600b      	str	r3, [r1, #0]
#endif
}
 8102674:	bf00      	nop
 8102676:	370c      	adds	r7, #12
 8102678:	46bd      	mov	sp, r7
 810267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810267e:	4770      	bx	lr
 8102680:	58026510 	.word	0x58026510

08102684 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102684:	b580      	push	{r7, lr}
 8102686:	b084      	sub	sp, #16
 8102688:	af00      	add	r7, sp, #0
 810268a:	60f8      	str	r0, [r7, #12]
 810268c:	460b      	mov	r3, r1
 810268e:	607a      	str	r2, [r7, #4]
 8102690:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102692:	4b37      	ldr	r3, [pc, #220]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	f023 0201 	bic.w	r2, r3, #1
 810269a:	4935      	ldr	r1, [pc, #212]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	4313      	orrs	r3, r2
 81026a0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	2b00      	cmp	r3, #0
 81026a6:	d123      	bne.n	81026f0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81026a8:	f7ff fe16 	bl	81022d8 <HAL_GetCurrentCPUID>
 81026ac:	4603      	mov	r3, r0
 81026ae:	2b03      	cmp	r3, #3
 81026b0:	d158      	bne.n	8102764 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81026b2:	4b2f      	ldr	r3, [pc, #188]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026b4:	691b      	ldr	r3, [r3, #16]
 81026b6:	4a2e      	ldr	r2, [pc, #184]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026b8:	f023 0301 	bic.w	r3, r3, #1
 81026bc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026be:	4b2d      	ldr	r3, [pc, #180]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026c0:	691b      	ldr	r3, [r3, #16]
 81026c2:	4a2c      	ldr	r2, [pc, #176]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026c4:	f043 0304 	orr.w	r3, r3, #4
 81026c8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81026ca:	f3bf 8f4f 	dsb	sy
}
 81026ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81026d0:	f3bf 8f6f 	isb	sy
}
 81026d4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81026d6:	7afb      	ldrb	r3, [r7, #11]
 81026d8:	2b01      	cmp	r3, #1
 81026da:	d101      	bne.n	81026e0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81026dc:	bf30      	wfi
 81026de:	e000      	b.n	81026e2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81026e0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026e2:	4b24      	ldr	r3, [pc, #144]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026e4:	691b      	ldr	r3, [r3, #16]
 81026e6:	4a23      	ldr	r2, [pc, #140]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026e8:	f023 0304 	bic.w	r3, r3, #4
 81026ec:	6113      	str	r3, [r2, #16]
 81026ee:	e03c      	b.n	810276a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	2b01      	cmp	r3, #1
 81026f4:	d123      	bne.n	810273e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81026f6:	f7ff fdef 	bl	81022d8 <HAL_GetCurrentCPUID>
 81026fa:	4603      	mov	r3, r0
 81026fc:	2b01      	cmp	r3, #1
 81026fe:	d133      	bne.n	8102768 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102700:	4b1b      	ldr	r3, [pc, #108]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102702:	695b      	ldr	r3, [r3, #20]
 8102704:	4a1a      	ldr	r2, [pc, #104]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102706:	f023 0302 	bic.w	r3, r3, #2
 810270a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810270c:	4b19      	ldr	r3, [pc, #100]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810270e:	691b      	ldr	r3, [r3, #16]
 8102710:	4a18      	ldr	r2, [pc, #96]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102712:	f043 0304 	orr.w	r3, r3, #4
 8102716:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102718:	f3bf 8f4f 	dsb	sy
}
 810271c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810271e:	f3bf 8f6f 	isb	sy
}
 8102722:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102724:	7afb      	ldrb	r3, [r7, #11]
 8102726:	2b01      	cmp	r3, #1
 8102728:	d101      	bne.n	810272e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810272a:	bf30      	wfi
 810272c:	e000      	b.n	8102730 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810272e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102730:	4b10      	ldr	r3, [pc, #64]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102732:	691b      	ldr	r3, [r3, #16]
 8102734:	4a0f      	ldr	r2, [pc, #60]	; (8102774 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102736:	f023 0304 	bic.w	r3, r3, #4
 810273a:	6113      	str	r3, [r2, #16]
 810273c:	e015      	b.n	810276a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810273e:	f7ff fdcb 	bl	81022d8 <HAL_GetCurrentCPUID>
 8102742:	4603      	mov	r3, r0
 8102744:	2b03      	cmp	r3, #3
 8102746:	d106      	bne.n	8102756 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102748:	4b09      	ldr	r3, [pc, #36]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 810274a:	691b      	ldr	r3, [r3, #16]
 810274c:	4a08      	ldr	r2, [pc, #32]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 810274e:	f023 0304 	bic.w	r3, r3, #4
 8102752:	6113      	str	r3, [r2, #16]
 8102754:	e009      	b.n	810276a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102756:	4b06      	ldr	r3, [pc, #24]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102758:	695b      	ldr	r3, [r3, #20]
 810275a:	4a05      	ldr	r2, [pc, #20]	; (8102770 <HAL_PWREx_EnterSTOPMode+0xec>)
 810275c:	f023 0304 	bic.w	r3, r3, #4
 8102760:	6153      	str	r3, [r2, #20]
 8102762:	e002      	b.n	810276a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102764:	bf00      	nop
 8102766:	e000      	b.n	810276a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102768:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810276a:	3710      	adds	r7, #16
 810276c:	46bd      	mov	sp, r7
 810276e:	bd80      	pop	{r7, pc}
 8102770:	58024800 	.word	0x58024800
 8102774:	e000ed00 	.word	0xe000ed00

08102778 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102778:	b580      	push	{r7, lr}
 810277a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810277c:	f7ff fdac 	bl	81022d8 <HAL_GetCurrentCPUID>
 8102780:	4603      	mov	r3, r0
 8102782:	2b03      	cmp	r3, #3
 8102784:	d101      	bne.n	810278a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102786:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102788:	e001      	b.n	810278e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810278a:	bf40      	sev
    __WFE ();
 810278c:	bf20      	wfe
}
 810278e:	bf00      	nop
 8102790:	bd80      	pop	{r7, pc}
	...

08102794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102794:	b480      	push	{r7}
 8102796:	b089      	sub	sp, #36	; 0x24
 8102798:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810279a:	4bb3      	ldr	r3, [pc, #716]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810279c:	691b      	ldr	r3, [r3, #16]
 810279e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81027a2:	2b18      	cmp	r3, #24
 81027a4:	f200 8155 	bhi.w	8102a52 <HAL_RCC_GetSysClockFreq+0x2be>
 81027a8:	a201      	add	r2, pc, #4	; (adr r2, 81027b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027ae:	bf00      	nop
 81027b0:	08102815 	.word	0x08102815
 81027b4:	08102a53 	.word	0x08102a53
 81027b8:	08102a53 	.word	0x08102a53
 81027bc:	08102a53 	.word	0x08102a53
 81027c0:	08102a53 	.word	0x08102a53
 81027c4:	08102a53 	.word	0x08102a53
 81027c8:	08102a53 	.word	0x08102a53
 81027cc:	08102a53 	.word	0x08102a53
 81027d0:	0810283b 	.word	0x0810283b
 81027d4:	08102a53 	.word	0x08102a53
 81027d8:	08102a53 	.word	0x08102a53
 81027dc:	08102a53 	.word	0x08102a53
 81027e0:	08102a53 	.word	0x08102a53
 81027e4:	08102a53 	.word	0x08102a53
 81027e8:	08102a53 	.word	0x08102a53
 81027ec:	08102a53 	.word	0x08102a53
 81027f0:	08102841 	.word	0x08102841
 81027f4:	08102a53 	.word	0x08102a53
 81027f8:	08102a53 	.word	0x08102a53
 81027fc:	08102a53 	.word	0x08102a53
 8102800:	08102a53 	.word	0x08102a53
 8102804:	08102a53 	.word	0x08102a53
 8102808:	08102a53 	.word	0x08102a53
 810280c:	08102a53 	.word	0x08102a53
 8102810:	08102847 	.word	0x08102847
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102814:	4b94      	ldr	r3, [pc, #592]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	f003 0320 	and.w	r3, r3, #32
 810281c:	2b00      	cmp	r3, #0
 810281e:	d009      	beq.n	8102834 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102820:	4b91      	ldr	r3, [pc, #580]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	08db      	lsrs	r3, r3, #3
 8102826:	f003 0303 	and.w	r3, r3, #3
 810282a:	4a90      	ldr	r2, [pc, #576]	; (8102a6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810282c:	fa22 f303 	lsr.w	r3, r2, r3
 8102830:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102832:	e111      	b.n	8102a58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102834:	4b8d      	ldr	r3, [pc, #564]	; (8102a6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102836:	61bb      	str	r3, [r7, #24]
      break;
 8102838:	e10e      	b.n	8102a58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810283a:	4b8d      	ldr	r3, [pc, #564]	; (8102a70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810283c:	61bb      	str	r3, [r7, #24]
      break;
 810283e:	e10b      	b.n	8102a58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102840:	4b8c      	ldr	r3, [pc, #560]	; (8102a74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102842:	61bb      	str	r3, [r7, #24]
      break;
 8102844:	e108      	b.n	8102a58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102846:	4b88      	ldr	r3, [pc, #544]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810284a:	f003 0303 	and.w	r3, r3, #3
 810284e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102850:	4b85      	ldr	r3, [pc, #532]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102854:	091b      	lsrs	r3, r3, #4
 8102856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810285a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810285c:	4b82      	ldr	r3, [pc, #520]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102860:	f003 0301 	and.w	r3, r3, #1
 8102864:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102866:	4b80      	ldr	r3, [pc, #512]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810286a:	08db      	lsrs	r3, r3, #3
 810286c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102870:	68fa      	ldr	r2, [r7, #12]
 8102872:	fb02 f303 	mul.w	r3, r2, r3
 8102876:	ee07 3a90 	vmov	s15, r3
 810287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810287e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102882:	693b      	ldr	r3, [r7, #16]
 8102884:	2b00      	cmp	r3, #0
 8102886:	f000 80e1 	beq.w	8102a4c <HAL_RCC_GetSysClockFreq+0x2b8>
 810288a:	697b      	ldr	r3, [r7, #20]
 810288c:	2b02      	cmp	r3, #2
 810288e:	f000 8083 	beq.w	8102998 <HAL_RCC_GetSysClockFreq+0x204>
 8102892:	697b      	ldr	r3, [r7, #20]
 8102894:	2b02      	cmp	r3, #2
 8102896:	f200 80a1 	bhi.w	81029dc <HAL_RCC_GetSysClockFreq+0x248>
 810289a:	697b      	ldr	r3, [r7, #20]
 810289c:	2b00      	cmp	r3, #0
 810289e:	d003      	beq.n	81028a8 <HAL_RCC_GetSysClockFreq+0x114>
 81028a0:	697b      	ldr	r3, [r7, #20]
 81028a2:	2b01      	cmp	r3, #1
 81028a4:	d056      	beq.n	8102954 <HAL_RCC_GetSysClockFreq+0x1c0>
 81028a6:	e099      	b.n	81029dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81028a8:	4b6f      	ldr	r3, [pc, #444]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	f003 0320 	and.w	r3, r3, #32
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d02d      	beq.n	8102910 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81028b4:	4b6c      	ldr	r3, [pc, #432]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	08db      	lsrs	r3, r3, #3
 81028ba:	f003 0303 	and.w	r3, r3, #3
 81028be:	4a6b      	ldr	r2, [pc, #428]	; (8102a6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81028c0:	fa22 f303 	lsr.w	r3, r2, r3
 81028c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	ee07 3a90 	vmov	s15, r3
 81028cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028d0:	693b      	ldr	r3, [r7, #16]
 81028d2:	ee07 3a90 	vmov	s15, r3
 81028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028de:	4b62      	ldr	r3, [pc, #392]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028e6:	ee07 3a90 	vmov	s15, r3
 81028ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81028f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102906:	ee67 7a27 	vmul.f32	s15, s14, s15
 810290a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810290e:	e087      	b.n	8102a20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102910:	693b      	ldr	r3, [r7, #16]
 8102912:	ee07 3a90 	vmov	s15, r3
 8102916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810291a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102a7c <HAL_RCC_GetSysClockFreq+0x2e8>
 810291e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102922:	4b51      	ldr	r3, [pc, #324]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810292a:	ee07 3a90 	vmov	s15, r3
 810292e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102932:	ed97 6a02 	vldr	s12, [r7, #8]
 8102936:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 810293a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810293e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810294e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102952:	e065      	b.n	8102a20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102954:	693b      	ldr	r3, [r7, #16]
 8102956:	ee07 3a90 	vmov	s15, r3
 810295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810295e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102a80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102966:	4b40      	ldr	r3, [pc, #256]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810296e:	ee07 3a90 	vmov	s15, r3
 8102972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102976:	ed97 6a02 	vldr	s12, [r7, #8]
 810297a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 810297e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810298a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102996:	e043      	b.n	8102a20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102998:	693b      	ldr	r3, [r7, #16]
 810299a:	ee07 3a90 	vmov	s15, r3
 810299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102a84 <HAL_RCC_GetSysClockFreq+0x2f0>
 81029a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029aa:	4b2f      	ldr	r3, [pc, #188]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029b2:	ee07 3a90 	vmov	s15, r3
 81029b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81029be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81029da:	e021      	b.n	8102a20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81029dc:	693b      	ldr	r3, [r7, #16]
 81029de:	ee07 3a90 	vmov	s15, r3
 81029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102a80 <HAL_RCC_GetSysClockFreq+0x2ec>
 81029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029ee:	4b1e      	ldr	r3, [pc, #120]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029f6:	ee07 3a90 	vmov	s15, r3
 81029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102a1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102a20:	4b11      	ldr	r3, [pc, #68]	; (8102a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a24:	0a5b      	lsrs	r3, r3, #9
 8102a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a2a:	3301      	adds	r3, #1
 8102a2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102a2e:	683b      	ldr	r3, [r7, #0]
 8102a30:	ee07 3a90 	vmov	s15, r3
 8102a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a44:	ee17 3a90 	vmov	r3, s15
 8102a48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102a4a:	e005      	b.n	8102a58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102a4c:	2300      	movs	r3, #0
 8102a4e:	61bb      	str	r3, [r7, #24]
      break;
 8102a50:	e002      	b.n	8102a58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102a52:	4b07      	ldr	r3, [pc, #28]	; (8102a70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102a54:	61bb      	str	r3, [r7, #24]
      break;
 8102a56:	bf00      	nop
  }

  return sysclockfreq;
 8102a58:	69bb      	ldr	r3, [r7, #24]
}
 8102a5a:	4618      	mov	r0, r3
 8102a5c:	3724      	adds	r7, #36	; 0x24
 8102a5e:	46bd      	mov	sp, r7
 8102a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a64:	4770      	bx	lr
 8102a66:	bf00      	nop
 8102a68:	58024400 	.word	0x58024400
 8102a6c:	03d09000 	.word	0x03d09000
 8102a70:	003d0900 	.word	0x003d0900
 8102a74:	007a1200 	.word	0x007a1200
 8102a78:	46000000 	.word	0x46000000
 8102a7c:	4c742400 	.word	0x4c742400
 8102a80:	4a742400 	.word	0x4a742400
 8102a84:	4af42400 	.word	0x4af42400

08102a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102a88:	b580      	push	{r7, lr}
 8102a8a:	b082      	sub	sp, #8
 8102a8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102a8e:	f7ff fe81 	bl	8102794 <HAL_RCC_GetSysClockFreq>
 8102a92:	4602      	mov	r2, r0
 8102a94:	4b11      	ldr	r3, [pc, #68]	; (8102adc <HAL_RCC_GetHCLKFreq+0x54>)
 8102a96:	699b      	ldr	r3, [r3, #24]
 8102a98:	0a1b      	lsrs	r3, r3, #8
 8102a9a:	f003 030f 	and.w	r3, r3, #15
 8102a9e:	4910      	ldr	r1, [pc, #64]	; (8102ae0 <HAL_RCC_GetHCLKFreq+0x58>)
 8102aa0:	5ccb      	ldrb	r3, [r1, r3]
 8102aa2:	f003 031f 	and.w	r3, r3, #31
 8102aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8102aaa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102aac:	4b0b      	ldr	r3, [pc, #44]	; (8102adc <HAL_RCC_GetHCLKFreq+0x54>)
 8102aae:	699b      	ldr	r3, [r3, #24]
 8102ab0:	f003 030f 	and.w	r3, r3, #15
 8102ab4:	4a0a      	ldr	r2, [pc, #40]	; (8102ae0 <HAL_RCC_GetHCLKFreq+0x58>)
 8102ab6:	5cd3      	ldrb	r3, [r2, r3]
 8102ab8:	f003 031f 	and.w	r3, r3, #31
 8102abc:	687a      	ldr	r2, [r7, #4]
 8102abe:	fa22 f303 	lsr.w	r3, r2, r3
 8102ac2:	4a08      	ldr	r2, [pc, #32]	; (8102ae4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ac4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102ac6:	4b07      	ldr	r3, [pc, #28]	; (8102ae4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	4a07      	ldr	r2, [pc, #28]	; (8102ae8 <HAL_RCC_GetHCLKFreq+0x60>)
 8102acc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102ace:	4b05      	ldr	r3, [pc, #20]	; (8102ae4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ad0:	681b      	ldr	r3, [r3, #0]
}
 8102ad2:	4618      	mov	r0, r3
 8102ad4:	3708      	adds	r7, #8
 8102ad6:	46bd      	mov	sp, r7
 8102ad8:	bd80      	pop	{r7, pc}
 8102ada:	bf00      	nop
 8102adc:	58024400 	.word	0x58024400
 8102ae0:	081068f0 	.word	0x081068f0
 8102ae4:	10000004 	.word	0x10000004
 8102ae8:	10000000 	.word	0x10000000

08102aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102aec:	b580      	push	{r7, lr}
 8102aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102af0:	f7ff ffca 	bl	8102a88 <HAL_RCC_GetHCLKFreq>
 8102af4:	4602      	mov	r2, r0
 8102af6:	4b06      	ldr	r3, [pc, #24]	; (8102b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102af8:	69db      	ldr	r3, [r3, #28]
 8102afa:	091b      	lsrs	r3, r3, #4
 8102afc:	f003 0307 	and.w	r3, r3, #7
 8102b00:	4904      	ldr	r1, [pc, #16]	; (8102b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102b02:	5ccb      	ldrb	r3, [r1, r3]
 8102b04:	f003 031f 	and.w	r3, r3, #31
 8102b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102b0c:	4618      	mov	r0, r3
 8102b0e:	bd80      	pop	{r7, pc}
 8102b10:	58024400 	.word	0x58024400
 8102b14:	081068f0 	.word	0x081068f0

08102b18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102b1c:	b0ca      	sub	sp, #296	; 0x128
 8102b1e:	af00      	add	r7, sp, #0
 8102b20:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102b24:	2300      	movs	r3, #0
 8102b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102b2a:	2300      	movs	r3, #0
 8102b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b38:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8102b3c:	2500      	movs	r5, #0
 8102b3e:	ea54 0305 	orrs.w	r3, r4, r5
 8102b42:	d049      	beq.n	8102bd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102b4e:	d02f      	beq.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102b54:	d828      	bhi.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102b5a:	d01a      	beq.n	8102b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102b60:	d822      	bhi.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102b62:	2b00      	cmp	r3, #0
 8102b64:	d003      	beq.n	8102b6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102b6a:	d007      	beq.n	8102b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102b6c:	e01c      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b6e:	4bb8      	ldr	r3, [pc, #736]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b72:	4ab7      	ldr	r2, [pc, #732]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b7a:	e01a      	b.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b80:	3308      	adds	r3, #8
 8102b82:	2102      	movs	r1, #2
 8102b84:	4618      	mov	r0, r3
 8102b86:	f002 fb61 	bl	810524c <RCCEx_PLL2_Config>
 8102b8a:	4603      	mov	r3, r0
 8102b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b90:	e00f      	b.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b96:	3328      	adds	r3, #40	; 0x28
 8102b98:	2102      	movs	r1, #2
 8102b9a:	4618      	mov	r0, r3
 8102b9c:	f002 fc08 	bl	81053b0 <RCCEx_PLL3_Config>
 8102ba0:	4603      	mov	r3, r0
 8102ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102ba6:	e004      	b.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ba8:	2301      	movs	r3, #1
 8102baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102bae:	e000      	b.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102bb6:	2b00      	cmp	r3, #0
 8102bb8:	d10a      	bne.n	8102bd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102bba:	4ba5      	ldr	r3, [pc, #660]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102bbe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8102bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102bc8:	4aa1      	ldr	r2, [pc, #644]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bca:	430b      	orrs	r3, r1
 8102bcc:	6513      	str	r3, [r2, #80]	; 0x50
 8102bce:	e003      	b.n	8102bd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102be0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8102be4:	f04f 0900 	mov.w	r9, #0
 8102be8:	ea58 0309 	orrs.w	r3, r8, r9
 8102bec:	d047      	beq.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bf4:	2b04      	cmp	r3, #4
 8102bf6:	d82a      	bhi.n	8102c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102bf8:	a201      	add	r2, pc, #4	; (adr r2, 8102c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bfe:	bf00      	nop
 8102c00:	08102c15 	.word	0x08102c15
 8102c04:	08102c23 	.word	0x08102c23
 8102c08:	08102c39 	.word	0x08102c39
 8102c0c:	08102c57 	.word	0x08102c57
 8102c10:	08102c57 	.word	0x08102c57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c14:	4b8e      	ldr	r3, [pc, #568]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c18:	4a8d      	ldr	r2, [pc, #564]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102c20:	e01a      	b.n	8102c58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c26:	3308      	adds	r3, #8
 8102c28:	2100      	movs	r1, #0
 8102c2a:	4618      	mov	r0, r3
 8102c2c:	f002 fb0e 	bl	810524c <RCCEx_PLL2_Config>
 8102c30:	4603      	mov	r3, r0
 8102c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102c36:	e00f      	b.n	8102c58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c3c:	3328      	adds	r3, #40	; 0x28
 8102c3e:	2100      	movs	r1, #0
 8102c40:	4618      	mov	r0, r3
 8102c42:	f002 fbb5 	bl	81053b0 <RCCEx_PLL3_Config>
 8102c46:	4603      	mov	r3, r0
 8102c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102c4c:	e004      	b.n	8102c58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c4e:	2301      	movs	r3, #1
 8102c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102c54:	e000      	b.n	8102c58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d10a      	bne.n	8102c76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102c60:	4b7b      	ldr	r3, [pc, #492]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c64:	f023 0107 	bic.w	r1, r3, #7
 8102c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c6e:	4a78      	ldr	r2, [pc, #480]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c70:	430b      	orrs	r3, r1
 8102c72:	6513      	str	r3, [r2, #80]	; 0x50
 8102c74:	e003      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c86:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8102c8a:	f04f 0b00 	mov.w	fp, #0
 8102c8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8102c92:	d04c      	beq.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102c9e:	d030      	beq.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102ca4:	d829      	bhi.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8102ca8:	d02d      	beq.n	8102d06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102caa:	2bc0      	cmp	r3, #192	; 0xc0
 8102cac:	d825      	bhi.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102cae:	2b80      	cmp	r3, #128	; 0x80
 8102cb0:	d018      	beq.n	8102ce4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102cb2:	2b80      	cmp	r3, #128	; 0x80
 8102cb4:	d821      	bhi.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102cb6:	2b00      	cmp	r3, #0
 8102cb8:	d002      	beq.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102cba:	2b40      	cmp	r3, #64	; 0x40
 8102cbc:	d007      	beq.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102cbe:	e01c      	b.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cc0:	4b63      	ldr	r3, [pc, #396]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cc4:	4a62      	ldr	r2, [pc, #392]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102ccc:	e01c      	b.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102cd2:	3308      	adds	r3, #8
 8102cd4:	2100      	movs	r1, #0
 8102cd6:	4618      	mov	r0, r3
 8102cd8:	f002 fab8 	bl	810524c <RCCEx_PLL2_Config>
 8102cdc:	4603      	mov	r3, r0
 8102cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102ce2:	e011      	b.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ce8:	3328      	adds	r3, #40	; 0x28
 8102cea:	2100      	movs	r1, #0
 8102cec:	4618      	mov	r0, r3
 8102cee:	f002 fb5f 	bl	81053b0 <RCCEx_PLL3_Config>
 8102cf2:	4603      	mov	r3, r0
 8102cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102cf8:	e006      	b.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102cfa:	2301      	movs	r3, #1
 8102cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102d00:	e002      	b.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102d02:	bf00      	nop
 8102d04:	e000      	b.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102d0c:	2b00      	cmp	r3, #0
 8102d0e:	d10a      	bne.n	8102d26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102d10:	4b4f      	ldr	r3, [pc, #316]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d14:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8102d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d1e:	4a4c      	ldr	r2, [pc, #304]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d20:	430b      	orrs	r3, r1
 8102d22:	6513      	str	r3, [r2, #80]	; 0x50
 8102d24:	e003      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102d2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d36:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8102d3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8102d3e:	2300      	movs	r3, #0
 8102d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8102d44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8102d48:	460b      	mov	r3, r1
 8102d4a:	4313      	orrs	r3, r2
 8102d4c:	d053      	beq.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102d5a:	d035      	beq.n	8102dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102d60:	d82e      	bhi.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102d66:	d031      	beq.n	8102dcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102d68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102d6c:	d828      	bhi.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102d72:	d01a      	beq.n	8102daa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102d78:	d822      	bhi.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	d003      	beq.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d82:	d007      	beq.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102d84:	e01c      	b.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d86:	4b32      	ldr	r3, [pc, #200]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d8a:	4a31      	ldr	r2, [pc, #196]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102d92:	e01c      	b.n	8102dce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d98:	3308      	adds	r3, #8
 8102d9a:	2100      	movs	r1, #0
 8102d9c:	4618      	mov	r0, r3
 8102d9e:	f002 fa55 	bl	810524c <RCCEx_PLL2_Config>
 8102da2:	4603      	mov	r3, r0
 8102da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102da8:	e011      	b.n	8102dce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102dae:	3328      	adds	r3, #40	; 0x28
 8102db0:	2100      	movs	r1, #0
 8102db2:	4618      	mov	r0, r3
 8102db4:	f002 fafc 	bl	81053b0 <RCCEx_PLL3_Config>
 8102db8:	4603      	mov	r3, r0
 8102dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102dbe:	e006      	b.n	8102dce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102dc0:	2301      	movs	r3, #1
 8102dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102dc6:	e002      	b.n	8102dce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102dc8:	bf00      	nop
 8102dca:	e000      	b.n	8102dce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102dd2:	2b00      	cmp	r3, #0
 8102dd4:	d10b      	bne.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102dd6:	4b1e      	ldr	r3, [pc, #120]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102dda:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8102dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102de6:	4a1a      	ldr	r2, [pc, #104]	; (8102e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102de8:	430b      	orrs	r3, r1
 8102dea:	6593      	str	r3, [r2, #88]	; 0x58
 8102dec:	e003      	b.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dfe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8102e02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8102e06:	2300      	movs	r3, #0
 8102e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8102e0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8102e10:	460b      	mov	r3, r1
 8102e12:	4313      	orrs	r3, r2
 8102e14:	d056      	beq.n	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102e22:	d038      	beq.n	8102e96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102e28:	d831      	bhi.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102e2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102e2e:	d034      	beq.n	8102e9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102e30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102e34:	d82b      	bhi.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102e3a:	d01d      	beq.n	8102e78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102e40:	d825      	bhi.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102e42:	2b00      	cmp	r3, #0
 8102e44:	d006      	beq.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102e4a:	d00a      	beq.n	8102e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102e4c:	e01f      	b.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102e4e:	bf00      	nop
 8102e50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e54:	4ba2      	ldr	r3, [pc, #648]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e58:	4aa1      	ldr	r2, [pc, #644]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e60:	e01c      	b.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e66:	3308      	adds	r3, #8
 8102e68:	2100      	movs	r1, #0
 8102e6a:	4618      	mov	r0, r3
 8102e6c:	f002 f9ee 	bl	810524c <RCCEx_PLL2_Config>
 8102e70:	4603      	mov	r3, r0
 8102e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102e76:	e011      	b.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e7c:	3328      	adds	r3, #40	; 0x28
 8102e7e:	2100      	movs	r1, #0
 8102e80:	4618      	mov	r0, r3
 8102e82:	f002 fa95 	bl	81053b0 <RCCEx_PLL3_Config>
 8102e86:	4603      	mov	r3, r0
 8102e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e8c:	e006      	b.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102e8e:	2301      	movs	r3, #1
 8102e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102e94:	e002      	b.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102e96:	bf00      	nop
 8102e98:	e000      	b.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102ea0:	2b00      	cmp	r3, #0
 8102ea2:	d10b      	bne.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102ea4:	4b8e      	ldr	r3, [pc, #568]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ea8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8102eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102eb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102eb4:	4a8a      	ldr	r2, [pc, #552]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102eb6:	430b      	orrs	r3, r1
 8102eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8102eba:	e003      	b.n	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ecc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8102ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8102ed4:	2300      	movs	r3, #0
 8102ed6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8102eda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8102ede:	460b      	mov	r3, r1
 8102ee0:	4313      	orrs	r3, r2
 8102ee2:	d03a      	beq.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102eea:	2b30      	cmp	r3, #48	; 0x30
 8102eec:	d01f      	beq.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102eee:	2b30      	cmp	r3, #48	; 0x30
 8102ef0:	d819      	bhi.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102ef2:	2b20      	cmp	r3, #32
 8102ef4:	d00c      	beq.n	8102f10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102ef6:	2b20      	cmp	r3, #32
 8102ef8:	d815      	bhi.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d019      	beq.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102efe:	2b10      	cmp	r3, #16
 8102f00:	d111      	bne.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f02:	4b77      	ldr	r3, [pc, #476]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f06:	4a76      	ldr	r2, [pc, #472]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102f0e:	e011      	b.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f14:	3308      	adds	r3, #8
 8102f16:	2102      	movs	r1, #2
 8102f18:	4618      	mov	r0, r3
 8102f1a:	f002 f997 	bl	810524c <RCCEx_PLL2_Config>
 8102f1e:	4603      	mov	r3, r0
 8102f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102f24:	e006      	b.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102f26:	2301      	movs	r3, #1
 8102f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102f2c:	e002      	b.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102f2e:	bf00      	nop
 8102f30:	e000      	b.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102f38:	2b00      	cmp	r3, #0
 8102f3a:	d10a      	bne.n	8102f52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102f3c:	4b68      	ldr	r3, [pc, #416]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8102f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f4a:	4a65      	ldr	r2, [pc, #404]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f4c:	430b      	orrs	r3, r1
 8102f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8102f50:	e003      	b.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102f56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8102f66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8102f6a:	2300      	movs	r3, #0
 8102f6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8102f70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8102f74:	460b      	mov	r3, r1
 8102f76:	4313      	orrs	r3, r2
 8102f78:	d051      	beq.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f84:	d035      	beq.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f8a:	d82e      	bhi.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102f90:	d031      	beq.n	8102ff6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102f96:	d828      	bhi.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102f9c:	d01a      	beq.n	8102fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102fa2:	d822      	bhi.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	d003      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102fac:	d007      	beq.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102fae:	e01c      	b.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fb0:	4b4b      	ldr	r3, [pc, #300]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fb4:	4a4a      	ldr	r2, [pc, #296]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102fbc:	e01c      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102fc2:	3308      	adds	r3, #8
 8102fc4:	2100      	movs	r1, #0
 8102fc6:	4618      	mov	r0, r3
 8102fc8:	f002 f940 	bl	810524c <RCCEx_PLL2_Config>
 8102fcc:	4603      	mov	r3, r0
 8102fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102fd2:	e011      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102fd8:	3328      	adds	r3, #40	; 0x28
 8102fda:	2100      	movs	r1, #0
 8102fdc:	4618      	mov	r0, r3
 8102fde:	f002 f9e7 	bl	81053b0 <RCCEx_PLL3_Config>
 8102fe2:	4603      	mov	r3, r0
 8102fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102fe8:	e006      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102fea:	2301      	movs	r3, #1
 8102fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102ff0:	e002      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102ff2:	bf00      	nop
 8102ff4:	e000      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d10a      	bne.n	8103016 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103000:	4b37      	ldr	r3, [pc, #220]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103004:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8103008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810300c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810300e:	4a34      	ldr	r2, [pc, #208]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103010:	430b      	orrs	r3, r1
 8103012:	6513      	str	r3, [r2, #80]	; 0x50
 8103014:	e003      	b.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810301a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103026:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 810302a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 810302e:	2300      	movs	r3, #0
 8103030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8103034:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8103038:	460b      	mov	r3, r1
 810303a:	4313      	orrs	r3, r2
 810303c:	d056      	beq.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103048:	d033      	beq.n	81030b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810304a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810304e:	d82c      	bhi.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103054:	d02f      	beq.n	81030b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810305a:	d826      	bhi.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 810305c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103060:	d02b      	beq.n	81030ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103066:	d820      	bhi.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810306c:	d012      	beq.n	8103094 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810306e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103072:	d81a      	bhi.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103074:	2b00      	cmp	r3, #0
 8103076:	d022      	beq.n	81030be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810307c:	d115      	bne.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810307e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103082:	3308      	adds	r3, #8
 8103084:	2101      	movs	r1, #1
 8103086:	4618      	mov	r0, r3
 8103088:	f002 f8e0 	bl	810524c <RCCEx_PLL2_Config>
 810308c:	4603      	mov	r3, r0
 810308e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103092:	e015      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103098:	3328      	adds	r3, #40	; 0x28
 810309a:	2101      	movs	r1, #1
 810309c:	4618      	mov	r0, r3
 810309e:	f002 f987 	bl	81053b0 <RCCEx_PLL3_Config>
 81030a2:	4603      	mov	r3, r0
 81030a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81030a8:	e00a      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81030aa:	2301      	movs	r3, #1
 81030ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81030b0:	e006      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81030b2:	bf00      	nop
 81030b4:	e004      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81030b6:	bf00      	nop
 81030b8:	e002      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81030ba:	bf00      	nop
 81030bc:	e000      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81030be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81030c4:	2b00      	cmp	r3, #0
 81030c6:	d10d      	bne.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81030c8:	4b05      	ldr	r3, [pc, #20]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 81030d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81030d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81030d6:	4a02      	ldr	r2, [pc, #8]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030d8:	430b      	orrs	r3, r1
 81030da:	6513      	str	r3, [r2, #80]	; 0x50
 81030dc:	e006      	b.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81030de:	bf00      	nop
 81030e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81030e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81030f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81030fc:	2300      	movs	r3, #0
 81030fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8103102:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8103106:	460b      	mov	r3, r1
 8103108:	4313      	orrs	r3, r2
 810310a:	d055      	beq.n	81031b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103118:	d033      	beq.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810311a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810311e:	d82c      	bhi.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103124:	d02f      	beq.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810312a:	d826      	bhi.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x662>
 810312c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103130:	d02b      	beq.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103136:	d820      	bhi.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810313c:	d012      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810313e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103142:	d81a      	bhi.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103144:	2b00      	cmp	r3, #0
 8103146:	d022      	beq.n	810318e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810314c:	d115      	bne.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103152:	3308      	adds	r3, #8
 8103154:	2101      	movs	r1, #1
 8103156:	4618      	mov	r0, r3
 8103158:	f002 f878 	bl	810524c <RCCEx_PLL2_Config>
 810315c:	4603      	mov	r3, r0
 810315e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103162:	e015      	b.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103168:	3328      	adds	r3, #40	; 0x28
 810316a:	2101      	movs	r1, #1
 810316c:	4618      	mov	r0, r3
 810316e:	f002 f91f 	bl	81053b0 <RCCEx_PLL3_Config>
 8103172:	4603      	mov	r3, r0
 8103174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103178:	e00a      	b.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810317a:	2301      	movs	r3, #1
 810317c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103180:	e006      	b.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103182:	bf00      	nop
 8103184:	e004      	b.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103186:	bf00      	nop
 8103188:	e002      	b.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810318a:	bf00      	nop
 810318c:	e000      	b.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810318e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103194:	2b00      	cmp	r3, #0
 8103196:	d10b      	bne.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103198:	4ba4      	ldr	r3, [pc, #656]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810319c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81031a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81031a8:	4aa0      	ldr	r2, [pc, #640]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031aa:	430b      	orrs	r3, r1
 81031ac:	6593      	str	r3, [r2, #88]	; 0x58
 81031ae:	e003      	b.n	81031b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81031b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 81031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 81031c8:	2300      	movs	r3, #0
 81031ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 81031ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 81031d2:	460b      	mov	r3, r1
 81031d4:	4313      	orrs	r3, r2
 81031d6:	d037      	beq.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81031de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031e2:	d00e      	beq.n	8103202 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031e8:	d816      	bhi.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	d018      	beq.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81031ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81031f2:	d111      	bne.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031f4:	4b8d      	ldr	r3, [pc, #564]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031f8:	4a8c      	ldr	r2, [pc, #560]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103200:	e00f      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103206:	3308      	adds	r3, #8
 8103208:	2101      	movs	r1, #1
 810320a:	4618      	mov	r0, r3
 810320c:	f002 f81e 	bl	810524c <RCCEx_PLL2_Config>
 8103210:	4603      	mov	r3, r0
 8103212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103216:	e004      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103218:	2301      	movs	r3, #1
 810321a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810321e:	e000      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103226:	2b00      	cmp	r3, #0
 8103228:	d10a      	bne.n	8103240 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810322a:	4b80      	ldr	r3, [pc, #512]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810322c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810322e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103238:	4a7c      	ldr	r2, [pc, #496]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810323a:	430b      	orrs	r3, r1
 810323c:	6513      	str	r3, [r2, #80]	; 0x50
 810323e:	e003      	b.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103250:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8103254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8103258:	2300      	movs	r3, #0
 810325a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810325e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8103262:	460b      	mov	r3, r1
 8103264:	4313      	orrs	r3, r2
 8103266:	d039      	beq.n	81032dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810326e:	2b03      	cmp	r3, #3
 8103270:	d81c      	bhi.n	81032ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103272:	a201      	add	r2, pc, #4	; (adr r2, 8103278 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103278:	081032b5 	.word	0x081032b5
 810327c:	08103289 	.word	0x08103289
 8103280:	08103297 	.word	0x08103297
 8103284:	081032b5 	.word	0x081032b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103288:	4b68      	ldr	r3, [pc, #416]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810328c:	4a67      	ldr	r2, [pc, #412]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810328e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103294:	e00f      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810329a:	3308      	adds	r3, #8
 810329c:	2102      	movs	r1, #2
 810329e:	4618      	mov	r0, r3
 81032a0:	f001 ffd4 	bl	810524c <RCCEx_PLL2_Config>
 81032a4:	4603      	mov	r3, r0
 81032a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81032aa:	e004      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81032ac:	2301      	movs	r3, #1
 81032ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81032b2:	e000      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81032ba:	2b00      	cmp	r3, #0
 81032bc:	d10a      	bne.n	81032d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81032be:	4b5b      	ldr	r3, [pc, #364]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81032c2:	f023 0103 	bic.w	r1, r3, #3
 81032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81032ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81032cc:	4a57      	ldr	r2, [pc, #348]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032ce:	430b      	orrs	r3, r1
 81032d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 81032d2:	e003      	b.n	81032dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81032d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 81032e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81032ec:	2300      	movs	r3, #0
 81032ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 81032f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 81032f6:	460b      	mov	r3, r1
 81032f8:	4313      	orrs	r3, r2
 81032fa:	f000 809f 	beq.w	810343c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81032fe:	4b4c      	ldr	r3, [pc, #304]	; (8103430 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4a4b      	ldr	r2, [pc, #300]	; (8103430 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103308:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810330a:	f7fd fc59 	bl	8100bc0 <HAL_GetTick>
 810330e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103312:	e00b      	b.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103314:	f7fd fc54 	bl	8100bc0 <HAL_GetTick>
 8103318:	4602      	mov	r2, r0
 810331a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 810331e:	1ad3      	subs	r3, r2, r3
 8103320:	2b64      	cmp	r3, #100	; 0x64
 8103322:	d903      	bls.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8103324:	2303      	movs	r3, #3
 8103326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810332a:	e005      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810332c:	4b40      	ldr	r3, [pc, #256]	; (8103430 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103334:	2b00      	cmp	r3, #0
 8103336:	d0ed      	beq.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810333c:	2b00      	cmp	r3, #0
 810333e:	d179      	bne.n	8103434 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103340:	4b3a      	ldr	r3, [pc, #232]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810334c:	4053      	eors	r3, r2
 810334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103352:	2b00      	cmp	r3, #0
 8103354:	d015      	beq.n	8103382 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103356:	4b35      	ldr	r3, [pc, #212]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810335e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103362:	4b32      	ldr	r3, [pc, #200]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103366:	4a31      	ldr	r2, [pc, #196]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810336c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810336e:	4b2f      	ldr	r3, [pc, #188]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103372:	4a2e      	ldr	r2, [pc, #184]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103378:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810337a:	4a2c      	ldr	r2, [pc, #176]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810337c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103380:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810338a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810338e:	d118      	bne.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103390:	f7fd fc16 	bl	8100bc0 <HAL_GetTick>
 8103394:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103398:	e00d      	b.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810339a:	f7fd fc11 	bl	8100bc0 <HAL_GetTick>
 810339e:	4602      	mov	r2, r0
 81033a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81033a4:	1ad2      	subs	r2, r2, r3
 81033a6:	f241 3388 	movw	r3, #5000	; 0x1388
 81033aa:	429a      	cmp	r2, r3
 81033ac:	d903      	bls.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81033ae:	2303      	movs	r3, #3
 81033b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 81033b4:	e005      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033b6:	4b1d      	ldr	r3, [pc, #116]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81033ba:	f003 0302 	and.w	r3, r3, #2
 81033be:	2b00      	cmp	r3, #0
 81033c0:	d0eb      	beq.n	810339a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81033c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81033c6:	2b00      	cmp	r3, #0
 81033c8:	d12b      	bne.n	8103422 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81033ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81033da:	d110      	bne.n	81033fe <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81033dc:	4b13      	ldr	r3, [pc, #76]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033de:	691b      	ldr	r3, [r3, #16]
 81033e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81033e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81033ec:	091b      	lsrs	r3, r3, #4
 81033ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81033f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81033f6:	4a0d      	ldr	r2, [pc, #52]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033f8:	430b      	orrs	r3, r1
 81033fa:	6113      	str	r3, [r2, #16]
 81033fc:	e005      	b.n	810340a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81033fe:	4b0b      	ldr	r3, [pc, #44]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103400:	691b      	ldr	r3, [r3, #16]
 8103402:	4a0a      	ldr	r2, [pc, #40]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103404:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103408:	6113      	str	r3, [r2, #16]
 810340a:	4b08      	ldr	r3, [pc, #32]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810340c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 810340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810341a:	4a04      	ldr	r2, [pc, #16]	; (810342c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810341c:	430b      	orrs	r3, r1
 810341e:	6713      	str	r3, [r2, #112]	; 0x70
 8103420:	e00c      	b.n	810343c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 810342a:	e007      	b.n	810343c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810342c:	58024400 	.word	0x58024400
 8103430:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103444:	f002 0301 	and.w	r3, r2, #1
 8103448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810344c:	2300      	movs	r3, #0
 810344e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8103452:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8103456:	460b      	mov	r3, r1
 8103458:	4313      	orrs	r3, r2
 810345a:	f000 8089 	beq.w	8103570 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103464:	2b28      	cmp	r3, #40	; 0x28
 8103466:	d86b      	bhi.n	8103540 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8103468:	a201      	add	r2, pc, #4	; (adr r2, 8103470 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810346e:	bf00      	nop
 8103470:	08103549 	.word	0x08103549
 8103474:	08103541 	.word	0x08103541
 8103478:	08103541 	.word	0x08103541
 810347c:	08103541 	.word	0x08103541
 8103480:	08103541 	.word	0x08103541
 8103484:	08103541 	.word	0x08103541
 8103488:	08103541 	.word	0x08103541
 810348c:	08103541 	.word	0x08103541
 8103490:	08103515 	.word	0x08103515
 8103494:	08103541 	.word	0x08103541
 8103498:	08103541 	.word	0x08103541
 810349c:	08103541 	.word	0x08103541
 81034a0:	08103541 	.word	0x08103541
 81034a4:	08103541 	.word	0x08103541
 81034a8:	08103541 	.word	0x08103541
 81034ac:	08103541 	.word	0x08103541
 81034b0:	0810352b 	.word	0x0810352b
 81034b4:	08103541 	.word	0x08103541
 81034b8:	08103541 	.word	0x08103541
 81034bc:	08103541 	.word	0x08103541
 81034c0:	08103541 	.word	0x08103541
 81034c4:	08103541 	.word	0x08103541
 81034c8:	08103541 	.word	0x08103541
 81034cc:	08103541 	.word	0x08103541
 81034d0:	08103549 	.word	0x08103549
 81034d4:	08103541 	.word	0x08103541
 81034d8:	08103541 	.word	0x08103541
 81034dc:	08103541 	.word	0x08103541
 81034e0:	08103541 	.word	0x08103541
 81034e4:	08103541 	.word	0x08103541
 81034e8:	08103541 	.word	0x08103541
 81034ec:	08103541 	.word	0x08103541
 81034f0:	08103549 	.word	0x08103549
 81034f4:	08103541 	.word	0x08103541
 81034f8:	08103541 	.word	0x08103541
 81034fc:	08103541 	.word	0x08103541
 8103500:	08103541 	.word	0x08103541
 8103504:	08103541 	.word	0x08103541
 8103508:	08103541 	.word	0x08103541
 810350c:	08103541 	.word	0x08103541
 8103510:	08103549 	.word	0x08103549
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103518:	3308      	adds	r3, #8
 810351a:	2101      	movs	r1, #1
 810351c:	4618      	mov	r0, r3
 810351e:	f001 fe95 	bl	810524c <RCCEx_PLL2_Config>
 8103522:	4603      	mov	r3, r0
 8103524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103528:	e00f      	b.n	810354a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810352e:	3328      	adds	r3, #40	; 0x28
 8103530:	2101      	movs	r1, #1
 8103532:	4618      	mov	r0, r3
 8103534:	f001 ff3c 	bl	81053b0 <RCCEx_PLL3_Config>
 8103538:	4603      	mov	r3, r0
 810353a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810353e:	e004      	b.n	810354a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103540:	2301      	movs	r3, #1
 8103542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103546:	e000      	b.n	810354a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8103548:	bf00      	nop
    }

    if (ret == HAL_OK)
 810354a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810354e:	2b00      	cmp	r3, #0
 8103550:	d10a      	bne.n	8103568 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103552:	4bbf      	ldr	r3, [pc, #764]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103556:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810355e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103560:	4abb      	ldr	r2, [pc, #748]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103562:	430b      	orrs	r3, r1
 8103564:	6553      	str	r3, [r2, #84]	; 0x54
 8103566:	e003      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810356c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103578:	f002 0302 	and.w	r3, r2, #2
 810357c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8103580:	2300      	movs	r3, #0
 8103582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8103586:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810358a:	460b      	mov	r3, r1
 810358c:	4313      	orrs	r3, r2
 810358e:	d041      	beq.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103596:	2b05      	cmp	r3, #5
 8103598:	d824      	bhi.n	81035e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810359a:	a201      	add	r2, pc, #4	; (adr r2, 81035a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035a0:	081035ed 	.word	0x081035ed
 81035a4:	081035b9 	.word	0x081035b9
 81035a8:	081035cf 	.word	0x081035cf
 81035ac:	081035ed 	.word	0x081035ed
 81035b0:	081035ed 	.word	0x081035ed
 81035b4:	081035ed 	.word	0x081035ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81035bc:	3308      	adds	r3, #8
 81035be:	2101      	movs	r1, #1
 81035c0:	4618      	mov	r0, r3
 81035c2:	f001 fe43 	bl	810524c <RCCEx_PLL2_Config>
 81035c6:	4603      	mov	r3, r0
 81035c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81035cc:	e00f      	b.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81035d2:	3328      	adds	r3, #40	; 0x28
 81035d4:	2101      	movs	r1, #1
 81035d6:	4618      	mov	r0, r3
 81035d8:	f001 feea 	bl	81053b0 <RCCEx_PLL3_Config>
 81035dc:	4603      	mov	r3, r0
 81035de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81035e2:	e004      	b.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81035e4:	2301      	movs	r3, #1
 81035e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81035ea:	e000      	b.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81035f2:	2b00      	cmp	r3, #0
 81035f4:	d10a      	bne.n	810360c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81035f6:	4b96      	ldr	r3, [pc, #600]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035fa:	f023 0107 	bic.w	r1, r3, #7
 81035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103604:	4a92      	ldr	r2, [pc, #584]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103606:	430b      	orrs	r3, r1
 8103608:	6553      	str	r3, [r2, #84]	; 0x54
 810360a:	e003      	b.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810360c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103610:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103618:	e9d3 2300 	ldrd	r2, r3, [r3]
 810361c:	f002 0304 	and.w	r3, r2, #4
 8103620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8103624:	2300      	movs	r3, #0
 8103626:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810362a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 810362e:	460b      	mov	r3, r1
 8103630:	4313      	orrs	r3, r2
 8103632:	d044      	beq.n	81036be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810363c:	2b05      	cmp	r3, #5
 810363e:	d825      	bhi.n	810368c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8103640:	a201      	add	r2, pc, #4	; (adr r2, 8103648 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8103642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103646:	bf00      	nop
 8103648:	08103695 	.word	0x08103695
 810364c:	08103661 	.word	0x08103661
 8103650:	08103677 	.word	0x08103677
 8103654:	08103695 	.word	0x08103695
 8103658:	08103695 	.word	0x08103695
 810365c:	08103695 	.word	0x08103695
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103664:	3308      	adds	r3, #8
 8103666:	2101      	movs	r1, #1
 8103668:	4618      	mov	r0, r3
 810366a:	f001 fdef 	bl	810524c <RCCEx_PLL2_Config>
 810366e:	4603      	mov	r3, r0
 8103670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103674:	e00f      	b.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810367a:	3328      	adds	r3, #40	; 0x28
 810367c:	2101      	movs	r1, #1
 810367e:	4618      	mov	r0, r3
 8103680:	f001 fe96 	bl	81053b0 <RCCEx_PLL3_Config>
 8103684:	4603      	mov	r3, r0
 8103686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810368a:	e004      	b.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810368c:	2301      	movs	r3, #1
 810368e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103692:	e000      	b.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8103694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810369a:	2b00      	cmp	r3, #0
 810369c:	d10b      	bne.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810369e:	4b6c      	ldr	r3, [pc, #432]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036a2:	f023 0107 	bic.w	r1, r3, #7
 81036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81036ae:	4a68      	ldr	r2, [pc, #416]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81036b0:	430b      	orrs	r3, r1
 81036b2:	6593      	str	r3, [r2, #88]	; 0x58
 81036b4:	e003      	b.n	81036be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81036ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036c6:	f002 0320 	and.w	r3, r2, #32
 81036ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 81036ce:	2300      	movs	r3, #0
 81036d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81036d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81036d8:	460b      	mov	r3, r1
 81036da:	4313      	orrs	r3, r2
 81036dc:	d055      	beq.n	810378a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81036e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81036ea:	d033      	beq.n	8103754 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81036ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81036f0:	d82c      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81036f6:	d02f      	beq.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81036fc:	d826      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81036fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103702:	d02b      	beq.n	810375c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8103704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103708:	d820      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810370a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810370e:	d012      	beq.n	8103736 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8103710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103714:	d81a      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103716:	2b00      	cmp	r3, #0
 8103718:	d022      	beq.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810371a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810371e:	d115      	bne.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103724:	3308      	adds	r3, #8
 8103726:	2100      	movs	r1, #0
 8103728:	4618      	mov	r0, r3
 810372a:	f001 fd8f 	bl	810524c <RCCEx_PLL2_Config>
 810372e:	4603      	mov	r3, r0
 8103730:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103734:	e015      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810373a:	3328      	adds	r3, #40	; 0x28
 810373c:	2102      	movs	r1, #2
 810373e:	4618      	mov	r0, r3
 8103740:	f001 fe36 	bl	81053b0 <RCCEx_PLL3_Config>
 8103744:	4603      	mov	r3, r0
 8103746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810374a:	e00a      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810374c:	2301      	movs	r3, #1
 810374e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103752:	e006      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103754:	bf00      	nop
 8103756:	e004      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103758:	bf00      	nop
 810375a:	e002      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810375c:	bf00      	nop
 810375e:	e000      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103766:	2b00      	cmp	r3, #0
 8103768:	d10b      	bne.n	8103782 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810376a:	4b39      	ldr	r3, [pc, #228]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810376e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810377a:	4a35      	ldr	r2, [pc, #212]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810377c:	430b      	orrs	r3, r1
 810377e:	6553      	str	r3, [r2, #84]	; 0x54
 8103780:	e003      	b.n	810378a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103792:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8103796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810379a:	2300      	movs	r3, #0
 810379c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81037a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81037a4:	460b      	mov	r3, r1
 81037a6:	4313      	orrs	r3, r2
 81037a8:	d058      	beq.n	810385c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81037ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81037b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81037b6:	d033      	beq.n	8103820 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81037b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81037bc:	d82c      	bhi.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81037c2:	d02f      	beq.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81037c8:	d826      	bhi.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81037ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81037ce:	d02b      	beq.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81037d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81037d4:	d820      	bhi.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81037d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81037da:	d012      	beq.n	8103802 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81037e0:	d81a      	bhi.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81037e2:	2b00      	cmp	r3, #0
 81037e4:	d022      	beq.n	810382c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81037ea:	d115      	bne.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81037f0:	3308      	adds	r3, #8
 81037f2:	2100      	movs	r1, #0
 81037f4:	4618      	mov	r0, r3
 81037f6:	f001 fd29 	bl	810524c <RCCEx_PLL2_Config>
 81037fa:	4603      	mov	r3, r0
 81037fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103800:	e015      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103806:	3328      	adds	r3, #40	; 0x28
 8103808:	2102      	movs	r1, #2
 810380a:	4618      	mov	r0, r3
 810380c:	f001 fdd0 	bl	81053b0 <RCCEx_PLL3_Config>
 8103810:	4603      	mov	r3, r0
 8103812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103816:	e00a      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103818:	2301      	movs	r3, #1
 810381a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810381e:	e006      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103820:	bf00      	nop
 8103822:	e004      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103824:	bf00      	nop
 8103826:	e002      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103828:	bf00      	nop
 810382a:	e000      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810382c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810382e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103832:	2b00      	cmp	r3, #0
 8103834:	d10e      	bne.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103836:	4b06      	ldr	r3, [pc, #24]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810383a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103846:	4a02      	ldr	r2, [pc, #8]	; (8103850 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103848:	430b      	orrs	r3, r1
 810384a:	6593      	str	r3, [r2, #88]	; 0x58
 810384c:	e006      	b.n	810385c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810384e:	bf00      	nop
 8103850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103858:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103864:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8103868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 810386c:	2300      	movs	r3, #0
 810386e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8103872:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8103876:	460b      	mov	r3, r1
 8103878:	4313      	orrs	r3, r2
 810387a:	d055      	beq.n	8103928 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103884:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103888:	d033      	beq.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810388a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810388e:	d82c      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103894:	d02f      	beq.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8103896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810389a:	d826      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810389c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81038a0:	d02b      	beq.n	81038fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81038a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81038a6:	d820      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81038a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81038ac:	d012      	beq.n	81038d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81038ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81038b2:	d81a      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81038b4:	2b00      	cmp	r3, #0
 81038b6:	d022      	beq.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81038bc:	d115      	bne.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038c2:	3308      	adds	r3, #8
 81038c4:	2100      	movs	r1, #0
 81038c6:	4618      	mov	r0, r3
 81038c8:	f001 fcc0 	bl	810524c <RCCEx_PLL2_Config>
 81038cc:	4603      	mov	r3, r0
 81038ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81038d2:	e015      	b.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038d8:	3328      	adds	r3, #40	; 0x28
 81038da:	2102      	movs	r1, #2
 81038dc:	4618      	mov	r0, r3
 81038de:	f001 fd67 	bl	81053b0 <RCCEx_PLL3_Config>
 81038e2:	4603      	mov	r3, r0
 81038e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81038e8:	e00a      	b.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038ea:	2301      	movs	r3, #1
 81038ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81038f0:	e006      	b.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038f2:	bf00      	nop
 81038f4:	e004      	b.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038f6:	bf00      	nop
 81038f8:	e002      	b.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038fa:	bf00      	nop
 81038fc:	e000      	b.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103904:	2b00      	cmp	r3, #0
 8103906:	d10b      	bne.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103908:	4ba1      	ldr	r3, [pc, #644]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810390c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8103910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103914:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103918:	4a9d      	ldr	r2, [pc, #628]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810391a:	430b      	orrs	r3, r1
 810391c:	6593      	str	r3, [r2, #88]	; 0x58
 810391e:	e003      	b.n	8103928 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103930:	f002 0308 	and.w	r3, r2, #8
 8103934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8103938:	2300      	movs	r3, #0
 810393a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810393e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8103942:	460b      	mov	r3, r1
 8103944:	4313      	orrs	r3, r2
 8103946:	d01e      	beq.n	8103986 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103954:	d10c      	bne.n	8103970 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810395a:	3328      	adds	r3, #40	; 0x28
 810395c:	2102      	movs	r1, #2
 810395e:	4618      	mov	r0, r3
 8103960:	f001 fd26 	bl	81053b0 <RCCEx_PLL3_Config>
 8103964:	4603      	mov	r3, r0
 8103966:	2b00      	cmp	r3, #0
 8103968:	d002      	beq.n	8103970 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810396a:	2301      	movs	r3, #1
 810396c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103970:	4b87      	ldr	r3, [pc, #540]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103974:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8103978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103980:	4a83      	ldr	r2, [pc, #524]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103982:	430b      	orrs	r3, r1
 8103984:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810398e:	f002 0310 	and.w	r3, r2, #16
 8103992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8103996:	2300      	movs	r3, #0
 8103998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 810399c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81039a0:	460b      	mov	r3, r1
 81039a2:	4313      	orrs	r3, r2
 81039a4:	d01e      	beq.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81039ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81039b2:	d10c      	bne.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039b8:	3328      	adds	r3, #40	; 0x28
 81039ba:	2102      	movs	r1, #2
 81039bc:	4618      	mov	r0, r3
 81039be:	f001 fcf7 	bl	81053b0 <RCCEx_PLL3_Config>
 81039c2:	4603      	mov	r3, r0
 81039c4:	2b00      	cmp	r3, #0
 81039c6:	d002      	beq.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81039c8:	2301      	movs	r3, #1
 81039ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81039ce:	4b70      	ldr	r3, [pc, #448]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81039de:	4a6c      	ldr	r2, [pc, #432]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81039e0:	430b      	orrs	r3, r1
 81039e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81039f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81039f4:	2300      	movs	r3, #0
 81039f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81039fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81039fe:	460b      	mov	r3, r1
 8103a00:	4313      	orrs	r3, r2
 8103a02:	d03e      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103a10:	d022      	beq.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8103a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103a16:	d81b      	bhi.n	8103a50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d003      	beq.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8103a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103a20:	d00b      	beq.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8103a22:	e015      	b.n	8103a50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a28:	3308      	adds	r3, #8
 8103a2a:	2100      	movs	r1, #0
 8103a2c:	4618      	mov	r0, r3
 8103a2e:	f001 fc0d 	bl	810524c <RCCEx_PLL2_Config>
 8103a32:	4603      	mov	r3, r0
 8103a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103a38:	e00f      	b.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a3e:	3328      	adds	r3, #40	; 0x28
 8103a40:	2102      	movs	r1, #2
 8103a42:	4618      	mov	r0, r3
 8103a44:	f001 fcb4 	bl	81053b0 <RCCEx_PLL3_Config>
 8103a48:	4603      	mov	r3, r0
 8103a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103a4e:	e004      	b.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a50:	2301      	movs	r3, #1
 8103a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103a56:	e000      	b.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d10b      	bne.n	8103a7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103a62:	4b4b      	ldr	r3, [pc, #300]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8103a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103a72:	4a47      	ldr	r2, [pc, #284]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a74:	430b      	orrs	r3, r1
 8103a76:	6593      	str	r3, [r2, #88]	; 0x58
 8103a78:	e003      	b.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103a7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a8a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8103a8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8103a90:	2300      	movs	r3, #0
 8103a92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8103a94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8103a98:	460b      	mov	r3, r1
 8103a9a:	4313      	orrs	r3, r2
 8103a9c:	d03b      	beq.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103aa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103aaa:	d01f      	beq.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8103aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103ab0:	d818      	bhi.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8103ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103ab6:	d003      	beq.n	8103ac0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8103ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103abc:	d007      	beq.n	8103ace <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103abe:	e011      	b.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ac0:	4b33      	ldr	r3, [pc, #204]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ac4:	4a32      	ldr	r2, [pc, #200]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103acc:	e00f      	b.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ad2:	3328      	adds	r3, #40	; 0x28
 8103ad4:	2101      	movs	r1, #1
 8103ad6:	4618      	mov	r0, r3
 8103ad8:	f001 fc6a 	bl	81053b0 <RCCEx_PLL3_Config>
 8103adc:	4603      	mov	r3, r0
 8103ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8103ae2:	e004      	b.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103ae4:	2301      	movs	r3, #1
 8103ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103aea:	e000      	b.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d10b      	bne.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103af6:	4b26      	ldr	r3, [pc, #152]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103afa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103b06:	4a22      	ldr	r2, [pc, #136]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b08:	430b      	orrs	r3, r1
 8103b0a:	6553      	str	r3, [r2, #84]	; 0x54
 8103b0c:	e003      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8103b22:	673b      	str	r3, [r7, #112]	; 0x70
 8103b24:	2300      	movs	r3, #0
 8103b26:	677b      	str	r3, [r7, #116]	; 0x74
 8103b28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8103b2c:	460b      	mov	r3, r1
 8103b2e:	4313      	orrs	r3, r2
 8103b30:	d034      	beq.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d003      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b40:	d007      	beq.n	8103b52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103b42:	e011      	b.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b44:	4b12      	ldr	r3, [pc, #72]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b48:	4a11      	ldr	r2, [pc, #68]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103b50:	e00e      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b56:	3308      	adds	r3, #8
 8103b58:	2102      	movs	r1, #2
 8103b5a:	4618      	mov	r0, r3
 8103b5c:	f001 fb76 	bl	810524c <RCCEx_PLL2_Config>
 8103b60:	4603      	mov	r3, r0
 8103b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103b66:	e003      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8103b68:	2301      	movs	r3, #1
 8103b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d10d      	bne.n	8103b94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103b78:	4b05      	ldr	r3, [pc, #20]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8103b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b86:	4a02      	ldr	r2, [pc, #8]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b88:	430b      	orrs	r3, r1
 8103b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103b8c:	e006      	b.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8103b8e:	bf00      	nop
 8103b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ba4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8103ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8103baa:	2300      	movs	r3, #0
 8103bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103bae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8103bb2:	460b      	mov	r3, r1
 8103bb4:	4313      	orrs	r3, r2
 8103bb6:	d00c      	beq.n	8103bd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bbc:	3328      	adds	r3, #40	; 0x28
 8103bbe:	2102      	movs	r1, #2
 8103bc0:	4618      	mov	r0, r3
 8103bc2:	f001 fbf5 	bl	81053b0 <RCCEx_PLL3_Config>
 8103bc6:	4603      	mov	r3, r0
 8103bc8:	2b00      	cmp	r3, #0
 8103bca:	d002      	beq.n	8103bd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103bcc:	2301      	movs	r3, #1
 8103bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8103bde:	663b      	str	r3, [r7, #96]	; 0x60
 8103be0:	2300      	movs	r3, #0
 8103be2:	667b      	str	r3, [r7, #100]	; 0x64
 8103be4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8103be8:	460b      	mov	r3, r1
 8103bea:	4313      	orrs	r3, r2
 8103bec:	d038      	beq.n	8103c60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103bfa:	d018      	beq.n	8103c2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c00:	d811      	bhi.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c06:	d014      	beq.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c0c:	d80b      	bhi.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d011      	beq.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8103c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c16:	d106      	bne.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c18:	4bc3      	ldr	r3, [pc, #780]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c1c:	4ac2      	ldr	r2, [pc, #776]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103c24:	e008      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c26:	2301      	movs	r3, #1
 8103c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103c2c:	e004      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103c2e:	bf00      	nop
 8103c30:	e002      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103c32:	bf00      	nop
 8103c34:	e000      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c3c:	2b00      	cmp	r3, #0
 8103c3e:	d10b      	bne.n	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103c40:	4bb9      	ldr	r3, [pc, #740]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8103c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103c50:	4ab5      	ldr	r2, [pc, #724]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c52:	430b      	orrs	r3, r1
 8103c54:	6553      	str	r3, [r2, #84]	; 0x54
 8103c56:	e003      	b.n	8103c60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8103c6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8103c6e:	2300      	movs	r3, #0
 8103c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103c72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8103c76:	460b      	mov	r3, r1
 8103c78:	4313      	orrs	r3, r2
 8103c7a:	d009      	beq.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103c7c:	4baa      	ldr	r3, [pc, #680]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103c8a:	4aa7      	ldr	r2, [pc, #668]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c8c:	430b      	orrs	r3, r1
 8103c8e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c98:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8103c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8103c9e:	2300      	movs	r3, #0
 8103ca0:	657b      	str	r3, [r7, #84]	; 0x54
 8103ca2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8103ca6:	460b      	mov	r3, r1
 8103ca8:	4313      	orrs	r3, r2
 8103caa:	d00a      	beq.n	8103cc2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103cac:	4b9e      	ldr	r3, [pc, #632]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cae:	691b      	ldr	r3, [r3, #16]
 8103cb0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8103cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103cbc:	4a9a      	ldr	r2, [pc, #616]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cbe:	430b      	orrs	r3, r1
 8103cc0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8103cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8103cd0:	2300      	movs	r3, #0
 8103cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103cd4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8103cd8:	460b      	mov	r3, r1
 8103cda:	4313      	orrs	r3, r2
 8103cdc:	d009      	beq.n	8103cf2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103cde:	4b92      	ldr	r3, [pc, #584]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ce2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8103ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103cec:	4a8e      	ldr	r2, [pc, #568]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cee:	430b      	orrs	r3, r1
 8103cf0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cfa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8103cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8103d00:	2300      	movs	r3, #0
 8103d02:	647b      	str	r3, [r7, #68]	; 0x44
 8103d04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8103d08:	460b      	mov	r3, r1
 8103d0a:	4313      	orrs	r3, r2
 8103d0c:	d00e      	beq.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103d0e:	4b86      	ldr	r3, [pc, #536]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d10:	691b      	ldr	r3, [r3, #16]
 8103d12:	4a85      	ldr	r2, [pc, #532]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103d18:	6113      	str	r3, [r2, #16]
 8103d1a:	4b83      	ldr	r3, [pc, #524]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d1c:	6919      	ldr	r1, [r3, #16]
 8103d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8103d26:	4a80      	ldr	r2, [pc, #512]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d28:	430b      	orrs	r3, r1
 8103d2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d34:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8103d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8103d3a:	2300      	movs	r3, #0
 8103d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103d3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8103d42:	460b      	mov	r3, r1
 8103d44:	4313      	orrs	r3, r2
 8103d46:	d009      	beq.n	8103d5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103d48:	4b77      	ldr	r3, [pc, #476]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d56:	4a74      	ldr	r2, [pc, #464]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d58:	430b      	orrs	r3, r1
 8103d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d64:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8103d68:	633b      	str	r3, [r7, #48]	; 0x30
 8103d6a:	2300      	movs	r3, #0
 8103d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8103d6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8103d72:	460b      	mov	r3, r1
 8103d74:	4313      	orrs	r3, r2
 8103d76:	d00a      	beq.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103d78:	4b6b      	ldr	r3, [pc, #428]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d7c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8103d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103d88:	4a67      	ldr	r2, [pc, #412]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d8a:	430b      	orrs	r3, r1
 8103d8c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d96:	2100      	movs	r1, #0
 8103d98:	62b9      	str	r1, [r7, #40]	; 0x28
 8103d9a:	f003 0301 	and.w	r3, r3, #1
 8103d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103da0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8103da4:	460b      	mov	r3, r1
 8103da6:	4313      	orrs	r3, r2
 8103da8:	d011      	beq.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dae:	3308      	adds	r3, #8
 8103db0:	2100      	movs	r1, #0
 8103db2:	4618      	mov	r0, r3
 8103db4:	f001 fa4a 	bl	810524c <RCCEx_PLL2_Config>
 8103db8:	4603      	mov	r3, r0
 8103dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8103dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	d003      	beq.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103dca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dd6:	2100      	movs	r1, #0
 8103dd8:	6239      	str	r1, [r7, #32]
 8103dda:	f003 0302 	and.w	r3, r3, #2
 8103dde:	627b      	str	r3, [r7, #36]	; 0x24
 8103de0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103de4:	460b      	mov	r3, r1
 8103de6:	4313      	orrs	r3, r2
 8103de8:	d011      	beq.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dee:	3308      	adds	r3, #8
 8103df0:	2101      	movs	r1, #1
 8103df2:	4618      	mov	r0, r3
 8103df4:	f001 fa2a 	bl	810524c <RCCEx_PLL2_Config>
 8103df8:	4603      	mov	r3, r0
 8103dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8103dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d003      	beq.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e16:	2100      	movs	r1, #0
 8103e18:	61b9      	str	r1, [r7, #24]
 8103e1a:	f003 0304 	and.w	r3, r3, #4
 8103e1e:	61fb      	str	r3, [r7, #28]
 8103e20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103e24:	460b      	mov	r3, r1
 8103e26:	4313      	orrs	r3, r2
 8103e28:	d011      	beq.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e2e:	3308      	adds	r3, #8
 8103e30:	2102      	movs	r1, #2
 8103e32:	4618      	mov	r0, r3
 8103e34:	f001 fa0a 	bl	810524c <RCCEx_PLL2_Config>
 8103e38:	4603      	mov	r3, r0
 8103e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8103e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d003      	beq.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e56:	2100      	movs	r1, #0
 8103e58:	6139      	str	r1, [r7, #16]
 8103e5a:	f003 0308 	and.w	r3, r3, #8
 8103e5e:	617b      	str	r3, [r7, #20]
 8103e60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103e64:	460b      	mov	r3, r1
 8103e66:	4313      	orrs	r3, r2
 8103e68:	d011      	beq.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e6e:	3328      	adds	r3, #40	; 0x28
 8103e70:	2100      	movs	r1, #0
 8103e72:	4618      	mov	r0, r3
 8103e74:	f001 fa9c 	bl	81053b0 <RCCEx_PLL3_Config>
 8103e78:	4603      	mov	r3, r0
 8103e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8103e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d003      	beq.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e96:	2100      	movs	r1, #0
 8103e98:	60b9      	str	r1, [r7, #8]
 8103e9a:	f003 0310 	and.w	r3, r3, #16
 8103e9e:	60fb      	str	r3, [r7, #12]
 8103ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103ea4:	460b      	mov	r3, r1
 8103ea6:	4313      	orrs	r3, r2
 8103ea8:	d011      	beq.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103eae:	3328      	adds	r3, #40	; 0x28
 8103eb0:	2101      	movs	r1, #1
 8103eb2:	4618      	mov	r0, r3
 8103eb4:	f001 fa7c 	bl	81053b0 <RCCEx_PLL3_Config>
 8103eb8:	4603      	mov	r3, r0
 8103eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8103ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	d003      	beq.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103eca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ed6:	2100      	movs	r1, #0
 8103ed8:	6039      	str	r1, [r7, #0]
 8103eda:	f003 0320 	and.w	r3, r3, #32
 8103ede:	607b      	str	r3, [r7, #4]
 8103ee0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103ee4:	460b      	mov	r3, r1
 8103ee6:	4313      	orrs	r3, r2
 8103ee8:	d011      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103eee:	3328      	adds	r3, #40	; 0x28
 8103ef0:	2102      	movs	r1, #2
 8103ef2:	4618      	mov	r0, r3
 8103ef4:	f001 fa5c 	bl	81053b0 <RCCEx_PLL3_Config>
 8103ef8:	4603      	mov	r3, r0
 8103efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8103efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d003      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8103f0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8103f12:	2b00      	cmp	r3, #0
 8103f14:	d101      	bne.n	8103f1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8103f16:	2300      	movs	r3, #0
 8103f18:	e000      	b.n	8103f1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8103f1a:	2301      	movs	r3, #1
}
 8103f1c:	4618      	mov	r0, r3
 8103f1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8103f22:	46bd      	mov	sp, r7
 8103f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103f28:	58024400 	.word	0x58024400

08103f2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8103f2c:	b580      	push	{r7, lr}
 8103f2e:	b090      	sub	sp, #64	; 0x40
 8103f30:	af00      	add	r7, sp, #0
 8103f32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8103f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103f3a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8103f3e:	430b      	orrs	r3, r1
 8103f40:	f040 8094 	bne.w	810406c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8103f44:	4b9e      	ldr	r3, [pc, #632]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f48:	f003 0307 	and.w	r3, r3, #7
 8103f4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8103f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103f50:	2b04      	cmp	r3, #4
 8103f52:	f200 8087 	bhi.w	8104064 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8103f56:	a201      	add	r2, pc, #4	; (adr r2, 8103f5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8103f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f5c:	08103f71 	.word	0x08103f71
 8103f60:	08103f99 	.word	0x08103f99
 8103f64:	08103fc1 	.word	0x08103fc1
 8103f68:	0810405d 	.word	0x0810405d
 8103f6c:	08103fe9 	.word	0x08103fe9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103f70:	4b93      	ldr	r3, [pc, #588]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103f7c:	d108      	bne.n	8103f90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8103f82:	4618      	mov	r0, r3
 8103f84:	f001 f810 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103f8c:	f000 bd45 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103f90:	2300      	movs	r3, #0
 8103f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103f94:	f000 bd41 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103f98:	4b89      	ldr	r3, [pc, #548]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103f9a:	681b      	ldr	r3, [r3, #0]
 8103f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8103fa4:	d108      	bne.n	8103fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103fa6:	f107 0318 	add.w	r3, r7, #24
 8103faa:	4618      	mov	r0, r3
 8103fac:	f000 fd54 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103fb0:	69bb      	ldr	r3, [r7, #24]
 8103fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fb4:	f000 bd31 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103fb8:	2300      	movs	r3, #0
 8103fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103fbc:	f000 bd2d 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103fc0:	4b7f      	ldr	r3, [pc, #508]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103fcc:	d108      	bne.n	8103fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103fce:	f107 030c 	add.w	r3, r7, #12
 8103fd2:	4618      	mov	r0, r3
 8103fd4:	f000 fe94 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103fd8:	68fb      	ldr	r3, [r7, #12]
 8103fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fdc:	f000 bd1d 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103fe0:	2300      	movs	r3, #0
 8103fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103fe4:	f000 bd19 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103fe8:	4b75      	ldr	r3, [pc, #468]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8103ff0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103ff2:	4b73      	ldr	r3, [pc, #460]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	f003 0304 	and.w	r3, r3, #4
 8103ffa:	2b04      	cmp	r3, #4
 8103ffc:	d10c      	bne.n	8104018 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8103ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104000:	2b00      	cmp	r3, #0
 8104002:	d109      	bne.n	8104018 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104004:	4b6e      	ldr	r3, [pc, #440]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	08db      	lsrs	r3, r3, #3
 810400a:	f003 0303 	and.w	r3, r3, #3
 810400e:	4a6d      	ldr	r2, [pc, #436]	; (81041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104010:	fa22 f303 	lsr.w	r3, r2, r3
 8104014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104016:	e01f      	b.n	8104058 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104018:	4b69      	ldr	r3, [pc, #420]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104024:	d106      	bne.n	8104034 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810402c:	d102      	bne.n	8104034 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810402e:	4b66      	ldr	r3, [pc, #408]	; (81041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104032:	e011      	b.n	8104058 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104034:	4b62      	ldr	r3, [pc, #392]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810403c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104040:	d106      	bne.n	8104050 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104048:	d102      	bne.n	8104050 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810404a:	4b60      	ldr	r3, [pc, #384]	; (81041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810404c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810404e:	e003      	b.n	8104058 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104050:	2300      	movs	r3, #0
 8104052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104054:	f000 bce1 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104058:	f000 bcdf 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810405c:	4b5c      	ldr	r3, [pc, #368]	; (81041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810405e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104060:	f000 bcdb 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104064:	2300      	movs	r3, #0
 8104066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104068:	f000 bcd7 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810406c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104070:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8104074:	430b      	orrs	r3, r1
 8104076:	f040 80ad 	bne.w	81041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810407a:	4b51      	ldr	r3, [pc, #324]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810407e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104082:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810408a:	d056      	beq.n	810413a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104092:	f200 8090 	bhi.w	81041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104098:	2bc0      	cmp	r3, #192	; 0xc0
 810409a:	f000 8088 	beq.w	81041ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81040a0:	2bc0      	cmp	r3, #192	; 0xc0
 81040a2:	f200 8088 	bhi.w	81041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81040a8:	2b80      	cmp	r3, #128	; 0x80
 81040aa:	d032      	beq.n	8104112 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81040ae:	2b80      	cmp	r3, #128	; 0x80
 81040b0:	f200 8081 	bhi.w	81041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81040b6:	2b00      	cmp	r3, #0
 81040b8:	d003      	beq.n	81040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81040bc:	2b40      	cmp	r3, #64	; 0x40
 81040be:	d014      	beq.n	81040ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81040c0:	e079      	b.n	81041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81040c2:	4b3f      	ldr	r3, [pc, #252]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81040ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81040ce:	d108      	bne.n	81040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81040d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81040d4:	4618      	mov	r0, r3
 81040d6:	f000 ff67 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81040de:	f000 bc9c 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81040e2:	2300      	movs	r3, #0
 81040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81040e6:	f000 bc98 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81040ea:	4b35      	ldr	r3, [pc, #212]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81040f6:	d108      	bne.n	810410a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81040f8:	f107 0318 	add.w	r3, r7, #24
 81040fc:	4618      	mov	r0, r3
 81040fe:	f000 fcab 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104102:	69bb      	ldr	r3, [r7, #24]
 8104104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104106:	f000 bc88 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810410a:	2300      	movs	r3, #0
 810410c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810410e:	f000 bc84 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104112:	4b2b      	ldr	r3, [pc, #172]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810411a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810411e:	d108      	bne.n	8104132 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104120:	f107 030c 	add.w	r3, r7, #12
 8104124:	4618      	mov	r0, r3
 8104126:	f000 fdeb 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810412a:	68fb      	ldr	r3, [r7, #12]
 810412c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810412e:	f000 bc74 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104132:	2300      	movs	r3, #0
 8104134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104136:	f000 bc70 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810413a:	4b21      	ldr	r3, [pc, #132]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810413e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104142:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104144:	4b1e      	ldr	r3, [pc, #120]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	f003 0304 	and.w	r3, r3, #4
 810414c:	2b04      	cmp	r3, #4
 810414e:	d10c      	bne.n	810416a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104152:	2b00      	cmp	r3, #0
 8104154:	d109      	bne.n	810416a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104156:	4b1a      	ldr	r3, [pc, #104]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	08db      	lsrs	r3, r3, #3
 810415c:	f003 0303 	and.w	r3, r3, #3
 8104160:	4a18      	ldr	r2, [pc, #96]	; (81041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104162:	fa22 f303 	lsr.w	r3, r2, r3
 8104166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104168:	e01f      	b.n	81041aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810416a:	4b15      	ldr	r3, [pc, #84]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104176:	d106      	bne.n	8104186 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810417a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810417e:	d102      	bne.n	8104186 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104180:	4b11      	ldr	r3, [pc, #68]	; (81041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104184:	e011      	b.n	81041aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104186:	4b0e      	ldr	r3, [pc, #56]	; (81041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810418e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104192:	d106      	bne.n	81041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810419a:	d102      	bne.n	81041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810419c:	4b0b      	ldr	r3, [pc, #44]	; (81041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810419e:	63fb      	str	r3, [r7, #60]	; 0x3c
 81041a0:	e003      	b.n	81041aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81041a2:	2300      	movs	r3, #0
 81041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81041a6:	f000 bc38 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81041aa:	f000 bc36 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81041ae:	4b08      	ldr	r3, [pc, #32]	; (81041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81041b2:	f000 bc32 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81041b6:	2300      	movs	r3, #0
 81041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81041ba:	f000 bc2e 	b.w	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81041be:	bf00      	nop
 81041c0:	58024400 	.word	0x58024400
 81041c4:	03d09000 	.word	0x03d09000
 81041c8:	003d0900 	.word	0x003d0900
 81041cc:	007a1200 	.word	0x007a1200
 81041d0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81041d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81041d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 81041dc:	430b      	orrs	r3, r1
 81041de:	f040 809c 	bne.w	810431a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81041e2:	4b9e      	ldr	r3, [pc, #632]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81041ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041f2:	d054      	beq.n	810429e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041fa:	f200 808b 	bhi.w	8104314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104200:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104204:	f000 8083 	beq.w	810430e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810420a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810420e:	f200 8081 	bhi.w	8104314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104218:	d02f      	beq.n	810427a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810421c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104220:	d878      	bhi.n	8104314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104224:	2b00      	cmp	r3, #0
 8104226:	d004      	beq.n	8104232 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810422a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810422e:	d012      	beq.n	8104256 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104230:	e070      	b.n	8104314 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104232:	4b8a      	ldr	r3, [pc, #552]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104234:	681b      	ldr	r3, [r3, #0]
 8104236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810423a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810423e:	d107      	bne.n	8104250 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104244:	4618      	mov	r0, r3
 8104246:	f000 feaf 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810424c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810424e:	e3e4      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104250:	2300      	movs	r3, #0
 8104252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104254:	e3e1      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104256:	4b81      	ldr	r3, [pc, #516]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810425e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104262:	d107      	bne.n	8104274 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104264:	f107 0318 	add.w	r3, r7, #24
 8104268:	4618      	mov	r0, r3
 810426a:	f000 fbf5 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810426e:	69bb      	ldr	r3, [r7, #24]
 8104270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104272:	e3d2      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104274:	2300      	movs	r3, #0
 8104276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104278:	e3cf      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810427a:	4b78      	ldr	r3, [pc, #480]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104286:	d107      	bne.n	8104298 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104288:	f107 030c 	add.w	r3, r7, #12
 810428c:	4618      	mov	r0, r3
 810428e:	f000 fd37 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104292:	68fb      	ldr	r3, [r7, #12]
 8104294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104296:	e3c0      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104298:	2300      	movs	r3, #0
 810429a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810429c:	e3bd      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810429e:	4b6f      	ldr	r3, [pc, #444]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81042a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81042a8:	4b6c      	ldr	r3, [pc, #432]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	f003 0304 	and.w	r3, r3, #4
 81042b0:	2b04      	cmp	r3, #4
 81042b2:	d10c      	bne.n	81042ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	d109      	bne.n	81042ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81042ba:	4b68      	ldr	r3, [pc, #416]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	08db      	lsrs	r3, r3, #3
 81042c0:	f003 0303 	and.w	r3, r3, #3
 81042c4:	4a66      	ldr	r2, [pc, #408]	; (8104460 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81042c6:	fa22 f303 	lsr.w	r3, r2, r3
 81042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 81042cc:	e01e      	b.n	810430c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81042ce:	4b63      	ldr	r3, [pc, #396]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81042da:	d106      	bne.n	81042ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81042de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81042e2:	d102      	bne.n	81042ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81042e4:	4b5f      	ldr	r3, [pc, #380]	; (8104464 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81042e8:	e010      	b.n	810430c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81042ea:	4b5c      	ldr	r3, [pc, #368]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81042f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81042f6:	d106      	bne.n	8104306 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81042fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81042fe:	d102      	bne.n	8104306 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104300:	4b59      	ldr	r3, [pc, #356]	; (8104468 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104304:	e002      	b.n	810430c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104306:	2300      	movs	r3, #0
 8104308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810430a:	e386      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810430c:	e385      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810430e:	4b57      	ldr	r3, [pc, #348]	; (810446c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104312:	e382      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104314:	2300      	movs	r3, #0
 8104316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104318:	e37f      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810431a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810431e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8104322:	430b      	orrs	r3, r1
 8104324:	f040 80a7 	bne.w	8104476 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104328:	4b4c      	ldr	r3, [pc, #304]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810432c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104330:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104338:	d055      	beq.n	81043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810433c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104340:	f200 8096 	bhi.w	8104470 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104346:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810434a:	f000 8084 	beq.w	8104456 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104350:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104354:	f200 808c 	bhi.w	8104470 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810435a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810435e:	d030      	beq.n	81043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104366:	f200 8083 	bhi.w	8104470 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810436c:	2b00      	cmp	r3, #0
 810436e:	d004      	beq.n	810437a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104376:	d012      	beq.n	810439e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104378:	e07a      	b.n	8104470 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810437a:	4b38      	ldr	r3, [pc, #224]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104386:	d107      	bne.n	8104398 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810438c:	4618      	mov	r0, r3
 810438e:	f000 fe0b 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104396:	e340      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104398:	2300      	movs	r3, #0
 810439a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810439c:	e33d      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810439e:	4b2f      	ldr	r3, [pc, #188]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81043a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81043aa:	d107      	bne.n	81043bc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81043ac:	f107 0318 	add.w	r3, r7, #24
 81043b0:	4618      	mov	r0, r3
 81043b2:	f000 fb51 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81043b6:	69bb      	ldr	r3, [r7, #24]
 81043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043ba:	e32e      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043bc:	2300      	movs	r3, #0
 81043be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81043c0:	e32b      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81043c2:	4b26      	ldr	r3, [pc, #152]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81043ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043ce:	d107      	bne.n	81043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81043d0:	f107 030c 	add.w	r3, r7, #12
 81043d4:	4618      	mov	r0, r3
 81043d6:	f000 fc93 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81043da:	68fb      	ldr	r3, [r7, #12]
 81043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043de:	e31c      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043e0:	2300      	movs	r3, #0
 81043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81043e4:	e319      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81043e6:	4b1d      	ldr	r3, [pc, #116]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81043ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81043ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81043f0:	4b1a      	ldr	r3, [pc, #104]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	f003 0304 	and.w	r3, r3, #4
 81043f8:	2b04      	cmp	r3, #4
 81043fa:	d10c      	bne.n	8104416 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81043fe:	2b00      	cmp	r3, #0
 8104400:	d109      	bne.n	8104416 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104402:	4b16      	ldr	r3, [pc, #88]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	08db      	lsrs	r3, r3, #3
 8104408:	f003 0303 	and.w	r3, r3, #3
 810440c:	4a14      	ldr	r2, [pc, #80]	; (8104460 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810440e:	fa22 f303 	lsr.w	r3, r2, r3
 8104412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104414:	e01e      	b.n	8104454 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104416:	4b11      	ldr	r3, [pc, #68]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104418:	681b      	ldr	r3, [r3, #0]
 810441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104422:	d106      	bne.n	8104432 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810442a:	d102      	bne.n	8104432 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810442c:	4b0d      	ldr	r3, [pc, #52]	; (8104464 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810442e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104430:	e010      	b.n	8104454 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104432:	4b0a      	ldr	r3, [pc, #40]	; (810445c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810443a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810443e:	d106      	bne.n	810444e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104446:	d102      	bne.n	810444e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104448:	4b07      	ldr	r3, [pc, #28]	; (8104468 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810444a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810444c:	e002      	b.n	8104454 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810444e:	2300      	movs	r3, #0
 8104450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104452:	e2e2      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104454:	e2e1      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104456:	4b05      	ldr	r3, [pc, #20]	; (810446c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810445a:	e2de      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810445c:	58024400 	.word	0x58024400
 8104460:	03d09000 	.word	0x03d09000
 8104464:	003d0900 	.word	0x003d0900
 8104468:	007a1200 	.word	0x007a1200
 810446c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104470:	2300      	movs	r3, #0
 8104472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104474:	e2d1      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104476:	e9d7 2300 	ldrd	r2, r3, [r7]
 810447a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 810447e:	430b      	orrs	r3, r1
 8104480:	f040 809c 	bne.w	81045bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104484:	4b93      	ldr	r3, [pc, #588]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104488:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810448c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104494:	d054      	beq.n	8104540 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810449c:	f200 808b 	bhi.w	81045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81044a6:	f000 8083 	beq.w	81045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81044b0:	f200 8081 	bhi.w	81045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81044ba:	d02f      	beq.n	810451c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81044c2:	d878      	bhi.n	81045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d004      	beq.n	81044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81044d0:	d012      	beq.n	81044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81044d2:	e070      	b.n	81045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81044d4:	4b7f      	ldr	r3, [pc, #508]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81044dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81044e0:	d107      	bne.n	81044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81044e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81044e6:	4618      	mov	r0, r3
 81044e8:	f000 fd5e 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81044f0:	e293      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81044f2:	2300      	movs	r3, #0
 81044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81044f6:	e290      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81044f8:	4b76      	ldr	r3, [pc, #472]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104504:	d107      	bne.n	8104516 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104506:	f107 0318 	add.w	r3, r7, #24
 810450a:	4618      	mov	r0, r3
 810450c:	f000 faa4 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104510:	69bb      	ldr	r3, [r7, #24]
 8104512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104514:	e281      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104516:	2300      	movs	r3, #0
 8104518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810451a:	e27e      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810451c:	4b6d      	ldr	r3, [pc, #436]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104528:	d107      	bne.n	810453a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810452a:	f107 030c 	add.w	r3, r7, #12
 810452e:	4618      	mov	r0, r3
 8104530:	f000 fbe6 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104538:	e26f      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810453a:	2300      	movs	r3, #0
 810453c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810453e:	e26c      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104540:	4b64      	ldr	r3, [pc, #400]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104548:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810454a:	4b62      	ldr	r3, [pc, #392]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	f003 0304 	and.w	r3, r3, #4
 8104552:	2b04      	cmp	r3, #4
 8104554:	d10c      	bne.n	8104570 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104558:	2b00      	cmp	r3, #0
 810455a:	d109      	bne.n	8104570 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810455c:	4b5d      	ldr	r3, [pc, #372]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	08db      	lsrs	r3, r3, #3
 8104562:	f003 0303 	and.w	r3, r3, #3
 8104566:	4a5c      	ldr	r2, [pc, #368]	; (81046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104568:	fa22 f303 	lsr.w	r3, r2, r3
 810456c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810456e:	e01e      	b.n	81045ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104570:	4b58      	ldr	r3, [pc, #352]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810457c:	d106      	bne.n	810458c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104584:	d102      	bne.n	810458c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104586:	4b55      	ldr	r3, [pc, #340]	; (81046dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104588:	63fb      	str	r3, [r7, #60]	; 0x3c
 810458a:	e010      	b.n	81045ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810458c:	4b51      	ldr	r3, [pc, #324]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104598:	d106      	bne.n	81045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810459c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81045a0:	d102      	bne.n	81045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81045a2:	4b4f      	ldr	r3, [pc, #316]	; (81046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81045a6:	e002      	b.n	81045ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81045a8:	2300      	movs	r3, #0
 81045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81045ac:	e235      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81045ae:	e234      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81045b0:	4b4c      	ldr	r3, [pc, #304]	; (81046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81045b4:	e231      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81045b6:	2300      	movs	r3, #0
 81045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81045ba:	e22e      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81045bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81045c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 81045c4:	430b      	orrs	r3, r1
 81045c6:	f040 808f 	bne.w	81046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81045ca:	4b42      	ldr	r3, [pc, #264]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81045cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81045ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 81045d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 81045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81045da:	d06b      	beq.n	81046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81045e2:	d874      	bhi.n	81046ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81045ea:	d056      	beq.n	810469a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81045f2:	d86c      	bhi.n	81046ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81045fa:	d03b      	beq.n	8104674 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104602:	d864      	bhi.n	81046ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810460a:	d021      	beq.n	8104650 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810460e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104612:	d85c      	bhi.n	81046ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104616:	2b00      	cmp	r3, #0
 8104618:	d004      	beq.n	8104624 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104620:	d004      	beq.n	810462c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104622:	e054      	b.n	81046ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104624:	f7fe fa62 	bl	8102aec <HAL_RCC_GetPCLK1Freq>
 8104628:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810462a:	e1f6      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810462c:	4b29      	ldr	r3, [pc, #164]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104638:	d107      	bne.n	810464a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810463a:	f107 0318 	add.w	r3, r7, #24
 810463e:	4618      	mov	r0, r3
 8104640:	f000 fa0a 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104644:	69fb      	ldr	r3, [r7, #28]
 8104646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104648:	e1e7      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810464a:	2300      	movs	r3, #0
 810464c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810464e:	e1e4      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104650:	4b20      	ldr	r3, [pc, #128]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104652:	681b      	ldr	r3, [r3, #0]
 8104654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810465c:	d107      	bne.n	810466e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810465e:	f107 030c 	add.w	r3, r7, #12
 8104662:	4618      	mov	r0, r3
 8104664:	f000 fb4c 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104668:	693b      	ldr	r3, [r7, #16]
 810466a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810466c:	e1d5      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810466e:	2300      	movs	r3, #0
 8104670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104672:	e1d2      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104674:	4b17      	ldr	r3, [pc, #92]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	f003 0304 	and.w	r3, r3, #4
 810467c:	2b04      	cmp	r3, #4
 810467e:	d109      	bne.n	8104694 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104680:	4b14      	ldr	r3, [pc, #80]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	08db      	lsrs	r3, r3, #3
 8104686:	f003 0303 	and.w	r3, r3, #3
 810468a:	4a13      	ldr	r2, [pc, #76]	; (81046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810468c:	fa22 f303 	lsr.w	r3, r2, r3
 8104690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104692:	e1c2      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104694:	2300      	movs	r3, #0
 8104696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104698:	e1bf      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810469a:	4b0e      	ldr	r3, [pc, #56]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81046a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81046a6:	d102      	bne.n	81046ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81046a8:	4b0c      	ldr	r3, [pc, #48]	; (81046dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046ac:	e1b5      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046ae:	2300      	movs	r3, #0
 81046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046b2:	e1b2      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81046b4:	4b07      	ldr	r3, [pc, #28]	; (81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81046bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81046c0:	d102      	bne.n	81046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81046c2:	4b07      	ldr	r3, [pc, #28]	; (81046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046c6:	e1a8      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046c8:	2300      	movs	r3, #0
 81046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046cc:	e1a5      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81046ce:	2300      	movs	r3, #0
 81046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046d2:	e1a2      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81046d4:	58024400 	.word	0x58024400
 81046d8:	03d09000 	.word	0x03d09000
 81046dc:	003d0900 	.word	0x003d0900
 81046e0:	007a1200 	.word	0x007a1200
 81046e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81046ec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 81046f0:	430b      	orrs	r3, r1
 81046f2:	d173      	bne.n	81047dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81046f4:	4b9c      	ldr	r3, [pc, #624]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81046fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104704:	d02f      	beq.n	8104766 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810470c:	d863      	bhi.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104710:	2b00      	cmp	r3, #0
 8104712:	d004      	beq.n	810471e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810471a:	d012      	beq.n	8104742 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810471c:	e05b      	b.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810471e:	4b92      	ldr	r3, [pc, #584]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810472a:	d107      	bne.n	810473c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810472c:	f107 0318 	add.w	r3, r7, #24
 8104730:	4618      	mov	r0, r3
 8104732:	f000 f991 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104736:	69bb      	ldr	r3, [r7, #24]
 8104738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810473a:	e16e      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810473c:	2300      	movs	r3, #0
 810473e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104740:	e16b      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104742:	4b89      	ldr	r3, [pc, #548]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810474a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810474e:	d107      	bne.n	8104760 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104750:	f107 030c 	add.w	r3, r7, #12
 8104754:	4618      	mov	r0, r3
 8104756:	f000 fad3 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810475a:	697b      	ldr	r3, [r7, #20]
 810475c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810475e:	e15c      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104760:	2300      	movs	r3, #0
 8104762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104764:	e159      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104766:	4b80      	ldr	r3, [pc, #512]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810476a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810476e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104770:	4b7d      	ldr	r3, [pc, #500]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	f003 0304 	and.w	r3, r3, #4
 8104778:	2b04      	cmp	r3, #4
 810477a:	d10c      	bne.n	8104796 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810477e:	2b00      	cmp	r3, #0
 8104780:	d109      	bne.n	8104796 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104782:	4b79      	ldr	r3, [pc, #484]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	08db      	lsrs	r3, r3, #3
 8104788:	f003 0303 	and.w	r3, r3, #3
 810478c:	4a77      	ldr	r2, [pc, #476]	; (810496c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810478e:	fa22 f303 	lsr.w	r3, r2, r3
 8104792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104794:	e01e      	b.n	81047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104796:	4b74      	ldr	r3, [pc, #464]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047a2:	d106      	bne.n	81047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81047a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81047aa:	d102      	bne.n	81047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81047ac:	4b70      	ldr	r3, [pc, #448]	; (8104970 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 81047b0:	e010      	b.n	81047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81047b2:	4b6d      	ldr	r3, [pc, #436]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81047b4:	681b      	ldr	r3, [r3, #0]
 81047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81047ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81047be:	d106      	bne.n	81047ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81047c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81047c6:	d102      	bne.n	81047ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81047c8:	4b6a      	ldr	r3, [pc, #424]	; (8104974 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 81047cc:	e002      	b.n	81047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81047ce:	2300      	movs	r3, #0
 81047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81047d2:	e122      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81047d4:	e121      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81047d6:	2300      	movs	r3, #0
 81047d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81047da:	e11e      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81047dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81047e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 81047e4:	430b      	orrs	r3, r1
 81047e6:	d133      	bne.n	8104850 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81047e8:	4b5f      	ldr	r3, [pc, #380]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81047f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047f4:	2b00      	cmp	r3, #0
 81047f6:	d004      	beq.n	8104802 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81047fe:	d012      	beq.n	8104826 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104800:	e023      	b.n	810484a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104802:	4b59      	ldr	r3, [pc, #356]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810480a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810480e:	d107      	bne.n	8104820 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104814:	4618      	mov	r0, r3
 8104816:	f000 fbc7 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810481c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810481e:	e0fc      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104820:	2300      	movs	r3, #0
 8104822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104824:	e0f9      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104826:	4b50      	ldr	r3, [pc, #320]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810482e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104832:	d107      	bne.n	8104844 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104834:	f107 0318 	add.w	r3, r7, #24
 8104838:	4618      	mov	r0, r3
 810483a:	f000 f90d 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810483e:	6a3b      	ldr	r3, [r7, #32]
 8104840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104842:	e0ea      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104844:	2300      	movs	r3, #0
 8104846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104848:	e0e7      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810484a:	2300      	movs	r3, #0
 810484c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810484e:	e0e4      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104854:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8104858:	430b      	orrs	r3, r1
 810485a:	f040 808d 	bne.w	8104978 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810485e:	4b42      	ldr	r3, [pc, #264]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104862:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8104866:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810486e:	d06b      	beq.n	8104948 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104876:	d874      	bhi.n	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810487e:	d056      	beq.n	810492e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104886:	d86c      	bhi.n	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810488a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810488e:	d03b      	beq.n	8104908 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104896:	d864      	bhi.n	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810489a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810489e:	d021      	beq.n	81048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81048a6:	d85c      	bhi.n	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048aa:	2b00      	cmp	r3, #0
 81048ac:	d004      	beq.n	81048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81048b4:	d004      	beq.n	81048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81048b6:	e054      	b.n	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81048b8:	f000 f8b8 	bl	8104a2c <HAL_RCCEx_GetD3PCLK1Freq>
 81048bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81048be:	e0ac      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81048c0:	4b29      	ldr	r3, [pc, #164]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81048c2:	681b      	ldr	r3, [r3, #0]
 81048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81048c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81048cc:	d107      	bne.n	81048de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81048ce:	f107 0318 	add.w	r3, r7, #24
 81048d2:	4618      	mov	r0, r3
 81048d4:	f000 f8c0 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81048d8:	69fb      	ldr	r3, [r7, #28]
 81048da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81048dc:	e09d      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81048de:	2300      	movs	r3, #0
 81048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81048e2:	e09a      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81048e4:	4b20      	ldr	r3, [pc, #128]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81048ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81048f0:	d107      	bne.n	8104902 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81048f2:	f107 030c 	add.w	r3, r7, #12
 81048f6:	4618      	mov	r0, r3
 81048f8:	f000 fa02 	bl	8104d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81048fc:	693b      	ldr	r3, [r7, #16]
 81048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104900:	e08b      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104902:	2300      	movs	r3, #0
 8104904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104906:	e088      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104908:	4b17      	ldr	r3, [pc, #92]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	f003 0304 	and.w	r3, r3, #4
 8104910:	2b04      	cmp	r3, #4
 8104912:	d109      	bne.n	8104928 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104914:	4b14      	ldr	r3, [pc, #80]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104916:	681b      	ldr	r3, [r3, #0]
 8104918:	08db      	lsrs	r3, r3, #3
 810491a:	f003 0303 	and.w	r3, r3, #3
 810491e:	4a13      	ldr	r2, [pc, #76]	; (810496c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104920:	fa22 f303 	lsr.w	r3, r2, r3
 8104924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104926:	e078      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104928:	2300      	movs	r3, #0
 810492a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810492c:	e075      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810492e:	4b0e      	ldr	r3, [pc, #56]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810493a:	d102      	bne.n	8104942 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810493c:	4b0c      	ldr	r3, [pc, #48]	; (8104970 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810493e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104940:	e06b      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104942:	2300      	movs	r3, #0
 8104944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104946:	e068      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104948:	4b07      	ldr	r3, [pc, #28]	; (8104968 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104954:	d102      	bne.n	810495c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104956:	4b07      	ldr	r3, [pc, #28]	; (8104974 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810495a:	e05e      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810495c:	2300      	movs	r3, #0
 810495e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104960:	e05b      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104962:	2300      	movs	r3, #0
 8104964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104966:	e058      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104968:	58024400 	.word	0x58024400
 810496c:	03d09000 	.word	0x03d09000
 8104970:	003d0900 	.word	0x003d0900
 8104974:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104978:	e9d7 2300 	ldrd	r2, r3, [r7]
 810497c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8104980:	430b      	orrs	r3, r1
 8104982:	d148      	bne.n	8104a16 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104984:	4b27      	ldr	r3, [pc, #156]	; (8104a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810498c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104994:	d02a      	beq.n	81049ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8104996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810499c:	d838      	bhi.n	8104a10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049a0:	2b00      	cmp	r3, #0
 81049a2:	d004      	beq.n	81049ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81049aa:	d00d      	beq.n	81049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81049ac:	e030      	b.n	8104a10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81049ae:	4b1d      	ldr	r3, [pc, #116]	; (8104a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81049b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81049ba:	d102      	bne.n	81049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81049bc:	4b1a      	ldr	r3, [pc, #104]	; (8104a28 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81049be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049c0:	e02b      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049c2:	2300      	movs	r3, #0
 81049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049c6:	e028      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81049c8:	4b16      	ldr	r3, [pc, #88]	; (8104a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81049d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81049d4:	d107      	bne.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81049d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81049da:	4618      	mov	r0, r3
 81049dc:	f000 fae4 	bl	8104fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049e4:	e019      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049e6:	2300      	movs	r3, #0
 81049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049ea:	e016      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81049ec:	4b0d      	ldr	r3, [pc, #52]	; (8104a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81049f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81049f8:	d107      	bne.n	8104a0a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81049fa:	f107 0318 	add.w	r3, r7, #24
 81049fe:	4618      	mov	r0, r3
 8104a00:	f000 f82a 	bl	8104a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104a04:	69fb      	ldr	r3, [r7, #28]
 8104a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a08:	e007      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a0a:	2300      	movs	r3, #0
 8104a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a0e:	e004      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104a10:	2300      	movs	r3, #0
 8104a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a14:	e001      	b.n	8104a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104a16:	2300      	movs	r3, #0
 8104a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8104a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8104a1c:	4618      	mov	r0, r3
 8104a1e:	3740      	adds	r7, #64	; 0x40
 8104a20:	46bd      	mov	sp, r7
 8104a22:	bd80      	pop	{r7, pc}
 8104a24:	58024400 	.word	0x58024400
 8104a28:	007a1200 	.word	0x007a1200

08104a2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104a2c:	b580      	push	{r7, lr}
 8104a2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104a30:	f7fe f82a 	bl	8102a88 <HAL_RCC_GetHCLKFreq>
 8104a34:	4602      	mov	r2, r0
 8104a36:	4b06      	ldr	r3, [pc, #24]	; (8104a50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104a38:	6a1b      	ldr	r3, [r3, #32]
 8104a3a:	091b      	lsrs	r3, r3, #4
 8104a3c:	f003 0307 	and.w	r3, r3, #7
 8104a40:	4904      	ldr	r1, [pc, #16]	; (8104a54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104a42:	5ccb      	ldrb	r3, [r1, r3]
 8104a44:	f003 031f 	and.w	r3, r3, #31
 8104a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104a4c:	4618      	mov	r0, r3
 8104a4e:	bd80      	pop	{r7, pc}
 8104a50:	58024400 	.word	0x58024400
 8104a54:	081068f0 	.word	0x081068f0

08104a58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104a58:	b480      	push	{r7}
 8104a5a:	b089      	sub	sp, #36	; 0x24
 8104a5c:	af00      	add	r7, sp, #0
 8104a5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104a60:	4ba1      	ldr	r3, [pc, #644]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a64:	f003 0303 	and.w	r3, r3, #3
 8104a68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104a6a:	4b9f      	ldr	r3, [pc, #636]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a6e:	0b1b      	lsrs	r3, r3, #12
 8104a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104a74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104a76:	4b9c      	ldr	r3, [pc, #624]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a7a:	091b      	lsrs	r3, r3, #4
 8104a7c:	f003 0301 	and.w	r3, r3, #1
 8104a80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104a82:	4b99      	ldr	r3, [pc, #612]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104a86:	08db      	lsrs	r3, r3, #3
 8104a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104a8c:	693a      	ldr	r2, [r7, #16]
 8104a8e:	fb02 f303 	mul.w	r3, r2, r3
 8104a92:	ee07 3a90 	vmov	s15, r3
 8104a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104a9e:	697b      	ldr	r3, [r7, #20]
 8104aa0:	2b00      	cmp	r3, #0
 8104aa2:	f000 8111 	beq.w	8104cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104aa6:	69bb      	ldr	r3, [r7, #24]
 8104aa8:	2b02      	cmp	r3, #2
 8104aaa:	f000 8083 	beq.w	8104bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104aae:	69bb      	ldr	r3, [r7, #24]
 8104ab0:	2b02      	cmp	r3, #2
 8104ab2:	f200 80a1 	bhi.w	8104bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104ab6:	69bb      	ldr	r3, [r7, #24]
 8104ab8:	2b00      	cmp	r3, #0
 8104aba:	d003      	beq.n	8104ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104abc:	69bb      	ldr	r3, [r7, #24]
 8104abe:	2b01      	cmp	r3, #1
 8104ac0:	d056      	beq.n	8104b70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104ac2:	e099      	b.n	8104bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ac4:	4b88      	ldr	r3, [pc, #544]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	f003 0320 	and.w	r3, r3, #32
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	d02d      	beq.n	8104b2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ad0:	4b85      	ldr	r3, [pc, #532]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	08db      	lsrs	r3, r3, #3
 8104ad6:	f003 0303 	and.w	r3, r3, #3
 8104ada:	4a84      	ldr	r2, [pc, #528]	; (8104cec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104adc:	fa22 f303 	lsr.w	r3, r2, r3
 8104ae0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104ae2:	68bb      	ldr	r3, [r7, #8]
 8104ae4:	ee07 3a90 	vmov	s15, r3
 8104ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104aec:	697b      	ldr	r3, [r7, #20]
 8104aee:	ee07 3a90 	vmov	s15, r3
 8104af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104afa:	4b7b      	ldr	r3, [pc, #492]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b02:	ee07 3a90 	vmov	s15, r3
 8104b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104b2a:	e087      	b.n	8104c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104b2c:	697b      	ldr	r3, [r7, #20]
 8104b2e:	ee07 3a90 	vmov	s15, r3
 8104b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b3e:	4b6a      	ldr	r3, [pc, #424]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b46:	ee07 3a90 	vmov	s15, r3
 8104b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b6e:	e065      	b.n	8104c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104b70:	697b      	ldr	r3, [r7, #20]
 8104b72:	ee07 3a90 	vmov	s15, r3
 8104b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b82:	4b59      	ldr	r3, [pc, #356]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b8a:	ee07 3a90 	vmov	s15, r3
 8104b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104bb2:	e043      	b.n	8104c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104bb4:	697b      	ldr	r3, [r7, #20]
 8104bb6:	ee07 3a90 	vmov	s15, r3
 8104bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bc6:	4b48      	ldr	r3, [pc, #288]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bce:	ee07 3a90 	vmov	s15, r3
 8104bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104bf6:	e021      	b.n	8104c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104bf8:	697b      	ldr	r3, [r7, #20]
 8104bfa:	ee07 3a90 	vmov	s15, r3
 8104bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c0a:	4b37      	ldr	r3, [pc, #220]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c12:	ee07 3a90 	vmov	s15, r3
 8104c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104c3c:	4b2a      	ldr	r3, [pc, #168]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c40:	0a5b      	lsrs	r3, r3, #9
 8104c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c46:	ee07 3a90 	vmov	s15, r3
 8104c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c62:	ee17 2a90 	vmov	r2, s15
 8104c66:	687b      	ldr	r3, [r7, #4]
 8104c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104c6a:	4b1f      	ldr	r3, [pc, #124]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c6e:	0c1b      	lsrs	r3, r3, #16
 8104c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c74:	ee07 3a90 	vmov	s15, r3
 8104c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c90:	ee17 2a90 	vmov	r2, s15
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104c98:	4b13      	ldr	r3, [pc, #76]	; (8104ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c9c:	0e1b      	lsrs	r3, r3, #24
 8104c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ca2:	ee07 3a90 	vmov	s15, r3
 8104ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8104cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104cbe:	ee17 2a90 	vmov	r2, s15
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104cc6:	e008      	b.n	8104cda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	2200      	movs	r2, #0
 8104ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	2200      	movs	r2, #0
 8104cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	2200      	movs	r2, #0
 8104cd8:	609a      	str	r2, [r3, #8]
}
 8104cda:	bf00      	nop
 8104cdc:	3724      	adds	r7, #36	; 0x24
 8104cde:	46bd      	mov	sp, r7
 8104ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ce4:	4770      	bx	lr
 8104ce6:	bf00      	nop
 8104ce8:	58024400 	.word	0x58024400
 8104cec:	03d09000 	.word	0x03d09000
 8104cf0:	46000000 	.word	0x46000000
 8104cf4:	4c742400 	.word	0x4c742400
 8104cf8:	4a742400 	.word	0x4a742400
 8104cfc:	4af42400 	.word	0x4af42400

08104d00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104d00:	b480      	push	{r7}
 8104d02:	b089      	sub	sp, #36	; 0x24
 8104d04:	af00      	add	r7, sp, #0
 8104d06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d08:	4ba1      	ldr	r3, [pc, #644]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d0c:	f003 0303 	and.w	r3, r3, #3
 8104d10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8104d12:	4b9f      	ldr	r3, [pc, #636]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d16:	0d1b      	lsrs	r3, r3, #20
 8104d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104d1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104d1e:	4b9c      	ldr	r3, [pc, #624]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d22:	0a1b      	lsrs	r3, r3, #8
 8104d24:	f003 0301 	and.w	r3, r3, #1
 8104d28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8104d2a:	4b99      	ldr	r3, [pc, #612]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104d2e:	08db      	lsrs	r3, r3, #3
 8104d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104d34:	693a      	ldr	r2, [r7, #16]
 8104d36:	fb02 f303 	mul.w	r3, r2, r3
 8104d3a:	ee07 3a90 	vmov	s15, r3
 8104d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104d46:	697b      	ldr	r3, [r7, #20]
 8104d48:	2b00      	cmp	r3, #0
 8104d4a:	f000 8111 	beq.w	8104f70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104d4e:	69bb      	ldr	r3, [r7, #24]
 8104d50:	2b02      	cmp	r3, #2
 8104d52:	f000 8083 	beq.w	8104e5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104d56:	69bb      	ldr	r3, [r7, #24]
 8104d58:	2b02      	cmp	r3, #2
 8104d5a:	f200 80a1 	bhi.w	8104ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104d5e:	69bb      	ldr	r3, [r7, #24]
 8104d60:	2b00      	cmp	r3, #0
 8104d62:	d003      	beq.n	8104d6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104d64:	69bb      	ldr	r3, [r7, #24]
 8104d66:	2b01      	cmp	r3, #1
 8104d68:	d056      	beq.n	8104e18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104d6a:	e099      	b.n	8104ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104d6c:	4b88      	ldr	r3, [pc, #544]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d6e:	681b      	ldr	r3, [r3, #0]
 8104d70:	f003 0320 	and.w	r3, r3, #32
 8104d74:	2b00      	cmp	r3, #0
 8104d76:	d02d      	beq.n	8104dd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104d78:	4b85      	ldr	r3, [pc, #532]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	08db      	lsrs	r3, r3, #3
 8104d7e:	f003 0303 	and.w	r3, r3, #3
 8104d82:	4a84      	ldr	r2, [pc, #528]	; (8104f94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104d84:	fa22 f303 	lsr.w	r3, r2, r3
 8104d88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104d8a:	68bb      	ldr	r3, [r7, #8]
 8104d8c:	ee07 3a90 	vmov	s15, r3
 8104d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d94:	697b      	ldr	r3, [r7, #20]
 8104d96:	ee07 3a90 	vmov	s15, r3
 8104d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104da2:	4b7b      	ldr	r3, [pc, #492]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104daa:	ee07 3a90 	vmov	s15, r3
 8104dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104db6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104dce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104dd2:	e087      	b.n	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104dd4:	697b      	ldr	r3, [r7, #20]
 8104dd6:	ee07 3a90 	vmov	s15, r3
 8104dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104f9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104de6:	4b6a      	ldr	r3, [pc, #424]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104dee:	ee07 3a90 	vmov	s15, r3
 8104df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104dfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e16:	e065      	b.n	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104e18:	697b      	ldr	r3, [r7, #20]
 8104e1a:	ee07 3a90 	vmov	s15, r3
 8104e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e2a:	4b59      	ldr	r3, [pc, #356]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e32:	ee07 3a90 	vmov	s15, r3
 8104e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e5a:	e043      	b.n	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104e5c:	697b      	ldr	r3, [r7, #20]
 8104e5e:	ee07 3a90 	vmov	s15, r3
 8104e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e6e:	4b48      	ldr	r3, [pc, #288]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e76:	ee07 3a90 	vmov	s15, r3
 8104e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e9e:	e021      	b.n	8104ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104ea0:	697b      	ldr	r3, [r7, #20]
 8104ea2:	ee07 3a90 	vmov	s15, r3
 8104ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104eaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eb2:	4b37      	ldr	r3, [pc, #220]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104eba:	ee07 3a90 	vmov	s15, r3
 8104ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ec6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ee2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8104ee4:	4b2a      	ldr	r3, [pc, #168]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ee8:	0a5b      	lsrs	r3, r3, #9
 8104eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104eee:	ee07 3a90 	vmov	s15, r3
 8104ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f0a:	ee17 2a90 	vmov	r2, s15
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8104f12:	4b1f      	ldr	r3, [pc, #124]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104f16:	0c1b      	lsrs	r3, r3, #16
 8104f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f1c:	ee07 3a90 	vmov	s15, r3
 8104f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f38:	ee17 2a90 	vmov	r2, s15
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8104f40:	4b13      	ldr	r3, [pc, #76]	; (8104f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104f44:	0e1b      	lsrs	r3, r3, #24
 8104f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f4a:	ee07 3a90 	vmov	s15, r3
 8104f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f66:	ee17 2a90 	vmov	r2, s15
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104f6e:	e008      	b.n	8104f82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	2200      	movs	r2, #0
 8104f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104f76:	687b      	ldr	r3, [r7, #4]
 8104f78:	2200      	movs	r2, #0
 8104f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	2200      	movs	r2, #0
 8104f80:	609a      	str	r2, [r3, #8]
}
 8104f82:	bf00      	nop
 8104f84:	3724      	adds	r7, #36	; 0x24
 8104f86:	46bd      	mov	sp, r7
 8104f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f8c:	4770      	bx	lr
 8104f8e:	bf00      	nop
 8104f90:	58024400 	.word	0x58024400
 8104f94:	03d09000 	.word	0x03d09000
 8104f98:	46000000 	.word	0x46000000
 8104f9c:	4c742400 	.word	0x4c742400
 8104fa0:	4a742400 	.word	0x4a742400
 8104fa4:	4af42400 	.word	0x4af42400

08104fa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8104fa8:	b480      	push	{r7}
 8104faa:	b089      	sub	sp, #36	; 0x24
 8104fac:	af00      	add	r7, sp, #0
 8104fae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104fb0:	4ba0      	ldr	r3, [pc, #640]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fb4:	f003 0303 	and.w	r3, r3, #3
 8104fb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8104fba:	4b9e      	ldr	r3, [pc, #632]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fbe:	091b      	lsrs	r3, r3, #4
 8104fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104fc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8104fc6:	4b9b      	ldr	r3, [pc, #620]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fca:	f003 0301 	and.w	r3, r3, #1
 8104fce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104fd0:	4b98      	ldr	r3, [pc, #608]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104fd4:	08db      	lsrs	r3, r3, #3
 8104fd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104fda:	693a      	ldr	r2, [r7, #16]
 8104fdc:	fb02 f303 	mul.w	r3, r2, r3
 8104fe0:	ee07 3a90 	vmov	s15, r3
 8104fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8104fec:	697b      	ldr	r3, [r7, #20]
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	f000 8111 	beq.w	8105216 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8104ff4:	69bb      	ldr	r3, [r7, #24]
 8104ff6:	2b02      	cmp	r3, #2
 8104ff8:	f000 8083 	beq.w	8105102 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8104ffc:	69bb      	ldr	r3, [r7, #24]
 8104ffe:	2b02      	cmp	r3, #2
 8105000:	f200 80a1 	bhi.w	8105146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105004:	69bb      	ldr	r3, [r7, #24]
 8105006:	2b00      	cmp	r3, #0
 8105008:	d003      	beq.n	8105012 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810500a:	69bb      	ldr	r3, [r7, #24]
 810500c:	2b01      	cmp	r3, #1
 810500e:	d056      	beq.n	81050be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105010:	e099      	b.n	8105146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105012:	4b88      	ldr	r3, [pc, #544]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	f003 0320 	and.w	r3, r3, #32
 810501a:	2b00      	cmp	r3, #0
 810501c:	d02d      	beq.n	810507a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810501e:	4b85      	ldr	r3, [pc, #532]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	08db      	lsrs	r3, r3, #3
 8105024:	f003 0303 	and.w	r3, r3, #3
 8105028:	4a83      	ldr	r2, [pc, #524]	; (8105238 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810502a:	fa22 f303 	lsr.w	r3, r2, r3
 810502e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105030:	68bb      	ldr	r3, [r7, #8]
 8105032:	ee07 3a90 	vmov	s15, r3
 8105036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810503a:	697b      	ldr	r3, [r7, #20]
 810503c:	ee07 3a90 	vmov	s15, r3
 8105040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105048:	4b7a      	ldr	r3, [pc, #488]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810504c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105050:	ee07 3a90 	vmov	s15, r3
 8105054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105058:	ed97 6a03 	vldr	s12, [r7, #12]
 810505c:	eddf 5a77 	vldr	s11, [pc, #476]	; 810523c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810506c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105074:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105078:	e087      	b.n	810518a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810507a:	697b      	ldr	r3, [r7, #20]
 810507c:	ee07 3a90 	vmov	s15, r3
 8105080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105084:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810508c:	4b69      	ldr	r3, [pc, #420]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105094:	ee07 3a90 	vmov	s15, r3
 8105098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810509c:	ed97 6a03 	vldr	s12, [r7, #12]
 81050a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 810523c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81050a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050bc:	e065      	b.n	810518a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81050be:	697b      	ldr	r3, [r7, #20]
 81050c0:	ee07 3a90 	vmov	s15, r3
 81050c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105244 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81050cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050d0:	4b58      	ldr	r3, [pc, #352]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050d8:	ee07 3a90 	vmov	s15, r3
 81050dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050e0:	ed97 6a03 	vldr	s12, [r7, #12]
 81050e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 810523c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81050e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105100:	e043      	b.n	810518a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105102:	697b      	ldr	r3, [r7, #20]
 8105104:	ee07 3a90 	vmov	s15, r3
 8105108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810510c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105248 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105114:	4b47      	ldr	r3, [pc, #284]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810511c:	ee07 3a90 	vmov	s15, r3
 8105120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105124:	ed97 6a03 	vldr	s12, [r7, #12]
 8105128:	eddf 5a44 	vldr	s11, [pc, #272]	; 810523c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810512c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810513c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105144:	e021      	b.n	810518a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105146:	697b      	ldr	r3, [r7, #20]
 8105148:	ee07 3a90 	vmov	s15, r3
 810514c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105150:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8105240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105158:	4b36      	ldr	r3, [pc, #216]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810515c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105160:	ee07 3a90 	vmov	s15, r3
 8105164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105168:	ed97 6a03 	vldr	s12, [r7, #12]
 810516c:	eddf 5a33 	vldr	s11, [pc, #204]	; 810523c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810517c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105188:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810518a:	4b2a      	ldr	r3, [pc, #168]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810518e:	0a5b      	lsrs	r3, r3, #9
 8105190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105194:	ee07 3a90 	vmov	s15, r3
 8105198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810519c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81051a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81051a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051b0:	ee17 2a90 	vmov	r2, s15
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81051b8:	4b1e      	ldr	r3, [pc, #120]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81051bc:	0c1b      	lsrs	r3, r3, #16
 81051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81051c2:	ee07 3a90 	vmov	s15, r3
 81051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81051ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81051d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051de:	ee17 2a90 	vmov	r2, s15
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81051e6:	4b13      	ldr	r3, [pc, #76]	; (8105234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81051ea:	0e1b      	lsrs	r3, r3, #24
 81051ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81051f0:	ee07 3a90 	vmov	s15, r3
 81051f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81051fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105200:	edd7 6a07 	vldr	s13, [r7, #28]
 8105204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810520c:	ee17 2a90 	vmov	r2, s15
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105214:	e008      	b.n	8105228 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	2200      	movs	r2, #0
 810521a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	2200      	movs	r2, #0
 8105220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	2200      	movs	r2, #0
 8105226:	609a      	str	r2, [r3, #8]
}
 8105228:	bf00      	nop
 810522a:	3724      	adds	r7, #36	; 0x24
 810522c:	46bd      	mov	sp, r7
 810522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105232:	4770      	bx	lr
 8105234:	58024400 	.word	0x58024400
 8105238:	03d09000 	.word	0x03d09000
 810523c:	46000000 	.word	0x46000000
 8105240:	4c742400 	.word	0x4c742400
 8105244:	4a742400 	.word	0x4a742400
 8105248:	4af42400 	.word	0x4af42400

0810524c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810524c:	b580      	push	{r7, lr}
 810524e:	b084      	sub	sp, #16
 8105250:	af00      	add	r7, sp, #0
 8105252:	6078      	str	r0, [r7, #4]
 8105254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105256:	2300      	movs	r3, #0
 8105258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810525a:	4b54      	ldr	r3, [pc, #336]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 810525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810525e:	f003 0303 	and.w	r3, r3, #3
 8105262:	2b03      	cmp	r3, #3
 8105264:	d101      	bne.n	810526a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105266:	2301      	movs	r3, #1
 8105268:	e09b      	b.n	81053a2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810526a:	4b50      	ldr	r3, [pc, #320]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	4a4f      	ldr	r2, [pc, #316]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105270:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105276:	f7fb fca3 	bl	8100bc0 <HAL_GetTick>
 810527a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810527c:	e008      	b.n	8105290 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810527e:	f7fb fc9f 	bl	8100bc0 <HAL_GetTick>
 8105282:	4602      	mov	r2, r0
 8105284:	68bb      	ldr	r3, [r7, #8]
 8105286:	1ad3      	subs	r3, r2, r3
 8105288:	2b02      	cmp	r3, #2
 810528a:	d901      	bls.n	8105290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810528c:	2303      	movs	r3, #3
 810528e:	e088      	b.n	81053a2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105290:	4b46      	ldr	r3, [pc, #280]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105292:	681b      	ldr	r3, [r3, #0]
 8105294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105298:	2b00      	cmp	r3, #0
 810529a:	d1f0      	bne.n	810527e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810529c:	4b43      	ldr	r3, [pc, #268]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 810529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	031b      	lsls	r3, r3, #12
 81052aa:	4940      	ldr	r1, [pc, #256]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 81052ac:	4313      	orrs	r3, r2
 81052ae:	628b      	str	r3, [r1, #40]	; 0x28
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	685b      	ldr	r3, [r3, #4]
 81052b4:	3b01      	subs	r3, #1
 81052b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	689b      	ldr	r3, [r3, #8]
 81052be:	3b01      	subs	r3, #1
 81052c0:	025b      	lsls	r3, r3, #9
 81052c2:	b29b      	uxth	r3, r3
 81052c4:	431a      	orrs	r2, r3
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	68db      	ldr	r3, [r3, #12]
 81052ca:	3b01      	subs	r3, #1
 81052cc:	041b      	lsls	r3, r3, #16
 81052ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81052d2:	431a      	orrs	r2, r3
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	691b      	ldr	r3, [r3, #16]
 81052d8:	3b01      	subs	r3, #1
 81052da:	061b      	lsls	r3, r3, #24
 81052dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81052e0:	4932      	ldr	r1, [pc, #200]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 81052e2:	4313      	orrs	r3, r2
 81052e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81052e6:	4b31      	ldr	r3, [pc, #196]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 81052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	695b      	ldr	r3, [r3, #20]
 81052f2:	492e      	ldr	r1, [pc, #184]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 81052f4:	4313      	orrs	r3, r2
 81052f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81052f8:	4b2c      	ldr	r3, [pc, #176]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 81052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052fc:	f023 0220 	bic.w	r2, r3, #32
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	699b      	ldr	r3, [r3, #24]
 8105304:	4929      	ldr	r1, [pc, #164]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105306:	4313      	orrs	r3, r2
 8105308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810530a:	4b28      	ldr	r3, [pc, #160]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 810530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810530e:	4a27      	ldr	r2, [pc, #156]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105310:	f023 0310 	bic.w	r3, r3, #16
 8105314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105316:	4b25      	ldr	r3, [pc, #148]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810531e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105322:	687a      	ldr	r2, [r7, #4]
 8105324:	69d2      	ldr	r2, [r2, #28]
 8105326:	00d2      	lsls	r2, r2, #3
 8105328:	4920      	ldr	r1, [pc, #128]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 810532a:	4313      	orrs	r3, r2
 810532c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810532e:	4b1f      	ldr	r3, [pc, #124]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105332:	4a1e      	ldr	r2, [pc, #120]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105334:	f043 0310 	orr.w	r3, r3, #16
 8105338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810533a:	683b      	ldr	r3, [r7, #0]
 810533c:	2b00      	cmp	r3, #0
 810533e:	d106      	bne.n	810534e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105340:	4b1a      	ldr	r3, [pc, #104]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105344:	4a19      	ldr	r2, [pc, #100]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810534a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810534c:	e00f      	b.n	810536e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810534e:	683b      	ldr	r3, [r7, #0]
 8105350:	2b01      	cmp	r3, #1
 8105352:	d106      	bne.n	8105362 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105354:	4b15      	ldr	r3, [pc, #84]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105358:	4a14      	ldr	r2, [pc, #80]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 810535a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810535e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105360:	e005      	b.n	810536e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105362:	4b12      	ldr	r3, [pc, #72]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105366:	4a11      	ldr	r2, [pc, #68]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810536c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810536e:	4b0f      	ldr	r3, [pc, #60]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	4a0e      	ldr	r2, [pc, #56]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810537a:	f7fb fc21 	bl	8100bc0 <HAL_GetTick>
 810537e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105380:	e008      	b.n	8105394 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105382:	f7fb fc1d 	bl	8100bc0 <HAL_GetTick>
 8105386:	4602      	mov	r2, r0
 8105388:	68bb      	ldr	r3, [r7, #8]
 810538a:	1ad3      	subs	r3, r2, r3
 810538c:	2b02      	cmp	r3, #2
 810538e:	d901      	bls.n	8105394 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105390:	2303      	movs	r3, #3
 8105392:	e006      	b.n	81053a2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105394:	4b05      	ldr	r3, [pc, #20]	; (81053ac <RCCEx_PLL2_Config+0x160>)
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810539c:	2b00      	cmp	r3, #0
 810539e:	d0f0      	beq.n	8105382 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81053a2:	4618      	mov	r0, r3
 81053a4:	3710      	adds	r7, #16
 81053a6:	46bd      	mov	sp, r7
 81053a8:	bd80      	pop	{r7, pc}
 81053aa:	bf00      	nop
 81053ac:	58024400 	.word	0x58024400

081053b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81053b0:	b580      	push	{r7, lr}
 81053b2:	b084      	sub	sp, #16
 81053b4:	af00      	add	r7, sp, #0
 81053b6:	6078      	str	r0, [r7, #4]
 81053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81053ba:	2300      	movs	r3, #0
 81053bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81053be:	4b54      	ldr	r3, [pc, #336]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053c2:	f003 0303 	and.w	r3, r3, #3
 81053c6:	2b03      	cmp	r3, #3
 81053c8:	d101      	bne.n	81053ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81053ca:	2301      	movs	r3, #1
 81053cc:	e09b      	b.n	8105506 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81053ce:	4b50      	ldr	r3, [pc, #320]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	4a4f      	ldr	r2, [pc, #316]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81053d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81053d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81053da:	f7fb fbf1 	bl	8100bc0 <HAL_GetTick>
 81053de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81053e0:	e008      	b.n	81053f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81053e2:	f7fb fbed 	bl	8100bc0 <HAL_GetTick>
 81053e6:	4602      	mov	r2, r0
 81053e8:	68bb      	ldr	r3, [r7, #8]
 81053ea:	1ad3      	subs	r3, r2, r3
 81053ec:	2b02      	cmp	r3, #2
 81053ee:	d901      	bls.n	81053f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81053f0:	2303      	movs	r3, #3
 81053f2:	e088      	b.n	8105506 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81053f4:	4b46      	ldr	r3, [pc, #280]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81053fc:	2b00      	cmp	r3, #0
 81053fe:	d1f0      	bne.n	81053e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105400:	4b43      	ldr	r3, [pc, #268]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105404:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105408:	687b      	ldr	r3, [r7, #4]
 810540a:	681b      	ldr	r3, [r3, #0]
 810540c:	051b      	lsls	r3, r3, #20
 810540e:	4940      	ldr	r1, [pc, #256]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105410:	4313      	orrs	r3, r2
 8105412:	628b      	str	r3, [r1, #40]	; 0x28
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	685b      	ldr	r3, [r3, #4]
 8105418:	3b01      	subs	r3, #1
 810541a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	689b      	ldr	r3, [r3, #8]
 8105422:	3b01      	subs	r3, #1
 8105424:	025b      	lsls	r3, r3, #9
 8105426:	b29b      	uxth	r3, r3
 8105428:	431a      	orrs	r2, r3
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	68db      	ldr	r3, [r3, #12]
 810542e:	3b01      	subs	r3, #1
 8105430:	041b      	lsls	r3, r3, #16
 8105432:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105436:	431a      	orrs	r2, r3
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	691b      	ldr	r3, [r3, #16]
 810543c:	3b01      	subs	r3, #1
 810543e:	061b      	lsls	r3, r3, #24
 8105440:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105444:	4932      	ldr	r1, [pc, #200]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105446:	4313      	orrs	r3, r2
 8105448:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810544a:	4b31      	ldr	r3, [pc, #196]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 810544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810544e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	695b      	ldr	r3, [r3, #20]
 8105456:	492e      	ldr	r1, [pc, #184]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105458:	4313      	orrs	r3, r2
 810545a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810545c:	4b2c      	ldr	r3, [pc, #176]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 810545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105460:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	699b      	ldr	r3, [r3, #24]
 8105468:	4929      	ldr	r1, [pc, #164]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 810546a:	4313      	orrs	r3, r2
 810546c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810546e:	4b28      	ldr	r3, [pc, #160]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105472:	4a27      	ldr	r2, [pc, #156]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810547a:	4b25      	ldr	r3, [pc, #148]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 810547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810547e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105482:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105486:	687a      	ldr	r2, [r7, #4]
 8105488:	69d2      	ldr	r2, [r2, #28]
 810548a:	00d2      	lsls	r2, r2, #3
 810548c:	4920      	ldr	r1, [pc, #128]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 810548e:	4313      	orrs	r3, r2
 8105490:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105492:	4b1f      	ldr	r3, [pc, #124]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105496:	4a1e      	ldr	r2, [pc, #120]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 8105498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810549c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810549e:	683b      	ldr	r3, [r7, #0]
 81054a0:	2b00      	cmp	r3, #0
 81054a2:	d106      	bne.n	81054b2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81054a4:	4b1a      	ldr	r3, [pc, #104]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054a8:	4a19      	ldr	r2, [pc, #100]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81054ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 81054b0:	e00f      	b.n	81054d2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81054b2:	683b      	ldr	r3, [r7, #0]
 81054b4:	2b01      	cmp	r3, #1
 81054b6:	d106      	bne.n	81054c6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81054b8:	4b15      	ldr	r3, [pc, #84]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054bc:	4a14      	ldr	r2, [pc, #80]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81054c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81054c4:	e005      	b.n	81054d2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81054c6:	4b12      	ldr	r3, [pc, #72]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054ca:	4a11      	ldr	r2, [pc, #68]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81054d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81054d2:	4b0f      	ldr	r3, [pc, #60]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	4a0e      	ldr	r2, [pc, #56]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81054dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81054de:	f7fb fb6f 	bl	8100bc0 <HAL_GetTick>
 81054e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81054e4:	e008      	b.n	81054f8 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81054e6:	f7fb fb6b 	bl	8100bc0 <HAL_GetTick>
 81054ea:	4602      	mov	r2, r0
 81054ec:	68bb      	ldr	r3, [r7, #8]
 81054ee:	1ad3      	subs	r3, r2, r3
 81054f0:	2b02      	cmp	r3, #2
 81054f2:	d901      	bls.n	81054f8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81054f4:	2303      	movs	r3, #3
 81054f6:	e006      	b.n	8105506 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81054f8:	4b05      	ldr	r3, [pc, #20]	; (8105510 <RCCEx_PLL3_Config+0x160>)
 81054fa:	681b      	ldr	r3, [r3, #0]
 81054fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105500:	2b00      	cmp	r3, #0
 8105502:	d0f0      	beq.n	81054e6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105504:	7bfb      	ldrb	r3, [r7, #15]
}
 8105506:	4618      	mov	r0, r3
 8105508:	3710      	adds	r7, #16
 810550a:	46bd      	mov	sp, r7
 810550c:	bd80      	pop	{r7, pc}
 810550e:	bf00      	nop
 8105510:	58024400 	.word	0x58024400

08105514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105514:	b580      	push	{r7, lr}
 8105516:	b082      	sub	sp, #8
 8105518:	af00      	add	r7, sp, #0
 810551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810551c:	687b      	ldr	r3, [r7, #4]
 810551e:	2b00      	cmp	r3, #0
 8105520:	d101      	bne.n	8105526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105522:	2301      	movs	r3, #1
 8105524:	e049      	b.n	81055ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810552c:	b2db      	uxtb	r3, r3
 810552e:	2b00      	cmp	r3, #0
 8105530:	d106      	bne.n	8105540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	2200      	movs	r2, #0
 8105536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810553a:	6878      	ldr	r0, [r7, #4]
 810553c:	f7fb f9d4 	bl	81008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	2202      	movs	r2, #2
 8105544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681a      	ldr	r2, [r3, #0]
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	3304      	adds	r3, #4
 8105550:	4619      	mov	r1, r3
 8105552:	4610      	mov	r0, r2
 8105554:	f000 f99e 	bl	8105894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	2201      	movs	r2, #1
 810555c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	2201      	movs	r2, #1
 8105564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	2201      	movs	r2, #1
 810556c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	2201      	movs	r2, #1
 8105574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	2201      	movs	r2, #1
 810557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	2201      	movs	r2, #1
 8105584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	2201      	movs	r2, #1
 810558c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	2201      	movs	r2, #1
 8105594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	2201      	movs	r2, #1
 810559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	2201      	movs	r2, #1
 81055a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	2201      	movs	r2, #1
 81055ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	2201      	movs	r2, #1
 81055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81055b8:	2300      	movs	r3, #0
}
 81055ba:	4618      	mov	r0, r3
 81055bc:	3708      	adds	r7, #8
 81055be:	46bd      	mov	sp, r7
 81055c0:	bd80      	pop	{r7, pc}
	...

081055c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 81055c4:	b480      	push	{r7}
 81055c6:	b085      	sub	sp, #20
 81055c8:	af00      	add	r7, sp, #0
 81055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81055d2:	b2db      	uxtb	r3, r3
 81055d4:	2b01      	cmp	r3, #1
 81055d6:	d001      	beq.n	81055dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 81055d8:	2301      	movs	r3, #1
 81055da:	e04c      	b.n	8105676 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	2202      	movs	r2, #2
 81055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	4a26      	ldr	r2, [pc, #152]	; (8105684 <HAL_TIM_Base_Start+0xc0>)
 81055ea:	4293      	cmp	r3, r2
 81055ec:	d022      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81055f6:	d01d      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	4a22      	ldr	r2, [pc, #136]	; (8105688 <HAL_TIM_Base_Start+0xc4>)
 81055fe:	4293      	cmp	r3, r2
 8105600:	d018      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	4a21      	ldr	r2, [pc, #132]	; (810568c <HAL_TIM_Base_Start+0xc8>)
 8105608:	4293      	cmp	r3, r2
 810560a:	d013      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	4a1f      	ldr	r2, [pc, #124]	; (8105690 <HAL_TIM_Base_Start+0xcc>)
 8105612:	4293      	cmp	r3, r2
 8105614:	d00e      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	681b      	ldr	r3, [r3, #0]
 810561a:	4a1e      	ldr	r2, [pc, #120]	; (8105694 <HAL_TIM_Base_Start+0xd0>)
 810561c:	4293      	cmp	r3, r2
 810561e:	d009      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	4a1c      	ldr	r2, [pc, #112]	; (8105698 <HAL_TIM_Base_Start+0xd4>)
 8105626:	4293      	cmp	r3, r2
 8105628:	d004      	beq.n	8105634 <HAL_TIM_Base_Start+0x70>
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	681b      	ldr	r3, [r3, #0]
 810562e:	4a1b      	ldr	r2, [pc, #108]	; (810569c <HAL_TIM_Base_Start+0xd8>)
 8105630:	4293      	cmp	r3, r2
 8105632:	d115      	bne.n	8105660 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	681b      	ldr	r3, [r3, #0]
 8105638:	689a      	ldr	r2, [r3, #8]
 810563a:	4b19      	ldr	r3, [pc, #100]	; (81056a0 <HAL_TIM_Base_Start+0xdc>)
 810563c:	4013      	ands	r3, r2
 810563e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105640:	68fb      	ldr	r3, [r7, #12]
 8105642:	2b06      	cmp	r3, #6
 8105644:	d015      	beq.n	8105672 <HAL_TIM_Base_Start+0xae>
 8105646:	68fb      	ldr	r3, [r7, #12]
 8105648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810564c:	d011      	beq.n	8105672 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	681a      	ldr	r2, [r3, #0]
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f042 0201 	orr.w	r2, r2, #1
 810565c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810565e:	e008      	b.n	8105672 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	681a      	ldr	r2, [r3, #0]
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	f042 0201 	orr.w	r2, r2, #1
 810566e:	601a      	str	r2, [r3, #0]
 8105670:	e000      	b.n	8105674 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105674:	2300      	movs	r3, #0
}
 8105676:	4618      	mov	r0, r3
 8105678:	3714      	adds	r7, #20
 810567a:	46bd      	mov	sp, r7
 810567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105680:	4770      	bx	lr
 8105682:	bf00      	nop
 8105684:	40010000 	.word	0x40010000
 8105688:	40000400 	.word	0x40000400
 810568c:	40000800 	.word	0x40000800
 8105690:	40000c00 	.word	0x40000c00
 8105694:	40010400 	.word	0x40010400
 8105698:	40001800 	.word	0x40001800
 810569c:	40014000 	.word	0x40014000
 81056a0:	00010007 	.word	0x00010007

081056a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81056a4:	b580      	push	{r7, lr}
 81056a6:	b084      	sub	sp, #16
 81056a8:	af00      	add	r7, sp, #0
 81056aa:	6078      	str	r0, [r7, #4]
 81056ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81056ae:	2300      	movs	r3, #0
 81056b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81056b8:	2b01      	cmp	r3, #1
 81056ba:	d101      	bne.n	81056c0 <HAL_TIM_ConfigClockSource+0x1c>
 81056bc:	2302      	movs	r3, #2
 81056be:	e0de      	b.n	810587e <HAL_TIM_ConfigClockSource+0x1da>
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	2201      	movs	r2, #1
 81056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	2202      	movs	r2, #2
 81056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	689b      	ldr	r3, [r3, #8]
 81056d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81056d8:	68bb      	ldr	r3, [r7, #8]
 81056da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81056de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81056e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81056e4:	68bb      	ldr	r3, [r7, #8]
 81056e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81056ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	68ba      	ldr	r2, [r7, #8]
 81056f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81056f4:	683b      	ldr	r3, [r7, #0]
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	4a63      	ldr	r2, [pc, #396]	; (8105888 <HAL_TIM_ConfigClockSource+0x1e4>)
 81056fa:	4293      	cmp	r3, r2
 81056fc:	f000 80a9 	beq.w	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105700:	4a61      	ldr	r2, [pc, #388]	; (8105888 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105702:	4293      	cmp	r3, r2
 8105704:	f200 80ae 	bhi.w	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105708:	4a60      	ldr	r2, [pc, #384]	; (810588c <HAL_TIM_ConfigClockSource+0x1e8>)
 810570a:	4293      	cmp	r3, r2
 810570c:	f000 80a1 	beq.w	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105710:	4a5e      	ldr	r2, [pc, #376]	; (810588c <HAL_TIM_ConfigClockSource+0x1e8>)
 8105712:	4293      	cmp	r3, r2
 8105714:	f200 80a6 	bhi.w	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105718:	4a5d      	ldr	r2, [pc, #372]	; (8105890 <HAL_TIM_ConfigClockSource+0x1ec>)
 810571a:	4293      	cmp	r3, r2
 810571c:	f000 8099 	beq.w	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105720:	4a5b      	ldr	r2, [pc, #364]	; (8105890 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105722:	4293      	cmp	r3, r2
 8105724:	f200 809e 	bhi.w	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105728:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810572c:	f000 8091 	beq.w	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105730:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105734:	f200 8096 	bhi.w	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810573c:	f000 8089 	beq.w	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105744:	f200 808e 	bhi.w	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810574c:	d03e      	beq.n	81057cc <HAL_TIM_ConfigClockSource+0x128>
 810574e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105752:	f200 8087 	bhi.w	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810575a:	f000 8086 	beq.w	810586a <HAL_TIM_ConfigClockSource+0x1c6>
 810575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105762:	d87f      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105764:	2b70      	cmp	r3, #112	; 0x70
 8105766:	d01a      	beq.n	810579e <HAL_TIM_ConfigClockSource+0xfa>
 8105768:	2b70      	cmp	r3, #112	; 0x70
 810576a:	d87b      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 810576c:	2b60      	cmp	r3, #96	; 0x60
 810576e:	d050      	beq.n	8105812 <HAL_TIM_ConfigClockSource+0x16e>
 8105770:	2b60      	cmp	r3, #96	; 0x60
 8105772:	d877      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105774:	2b50      	cmp	r3, #80	; 0x50
 8105776:	d03c      	beq.n	81057f2 <HAL_TIM_ConfigClockSource+0x14e>
 8105778:	2b50      	cmp	r3, #80	; 0x50
 810577a:	d873      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 810577c:	2b40      	cmp	r3, #64	; 0x40
 810577e:	d058      	beq.n	8105832 <HAL_TIM_ConfigClockSource+0x18e>
 8105780:	2b40      	cmp	r3, #64	; 0x40
 8105782:	d86f      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105784:	2b30      	cmp	r3, #48	; 0x30
 8105786:	d064      	beq.n	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105788:	2b30      	cmp	r3, #48	; 0x30
 810578a:	d86b      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 810578c:	2b20      	cmp	r3, #32
 810578e:	d060      	beq.n	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105790:	2b20      	cmp	r3, #32
 8105792:	d867      	bhi.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
 8105794:	2b00      	cmp	r3, #0
 8105796:	d05c      	beq.n	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 8105798:	2b10      	cmp	r3, #16
 810579a:	d05a      	beq.n	8105852 <HAL_TIM_ConfigClockSource+0x1ae>
 810579c:	e062      	b.n	8105864 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810579e:	687b      	ldr	r3, [r7, #4]
 81057a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81057a2:	683b      	ldr	r3, [r7, #0]
 81057a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81057a6:	683b      	ldr	r3, [r7, #0]
 81057a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81057aa:	683b      	ldr	r3, [r7, #0]
 81057ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81057ae:	f000 f987 	bl	8105ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	681b      	ldr	r3, [r3, #0]
 81057b6:	689b      	ldr	r3, [r3, #8]
 81057b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81057ba:	68bb      	ldr	r3, [r7, #8]
 81057bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81057c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	681b      	ldr	r3, [r3, #0]
 81057c6:	68ba      	ldr	r2, [r7, #8]
 81057c8:	609a      	str	r2, [r3, #8]
      break;
 81057ca:	e04f      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81057d0:	683b      	ldr	r3, [r7, #0]
 81057d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81057d4:	683b      	ldr	r3, [r7, #0]
 81057d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81057d8:	683b      	ldr	r3, [r7, #0]
 81057da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81057dc:	f000 f970 	bl	8105ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	689a      	ldr	r2, [r3, #8]
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81057ee:	609a      	str	r2, [r3, #8]
      break;
 81057f0:	e03c      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81057f6:	683b      	ldr	r3, [r7, #0]
 81057f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81057fa:	683b      	ldr	r3, [r7, #0]
 81057fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81057fe:	461a      	mov	r2, r3
 8105800:	f000 f8e2 	bl	81059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	2150      	movs	r1, #80	; 0x50
 810580a:	4618      	mov	r0, r3
 810580c:	f000 f93b 	bl	8105a86 <TIM_ITRx_SetConfig>
      break;
 8105810:	e02c      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105816:	683b      	ldr	r3, [r7, #0]
 8105818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810581a:	683b      	ldr	r3, [r7, #0]
 810581c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810581e:	461a      	mov	r2, r3
 8105820:	f000 f901 	bl	8105a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	2160      	movs	r1, #96	; 0x60
 810582a:	4618      	mov	r0, r3
 810582c:	f000 f92b 	bl	8105a86 <TIM_ITRx_SetConfig>
      break;
 8105830:	e01c      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105836:	683b      	ldr	r3, [r7, #0]
 8105838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810583a:	683b      	ldr	r3, [r7, #0]
 810583c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810583e:	461a      	mov	r2, r3
 8105840:	f000 f8c2 	bl	81059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	2140      	movs	r1, #64	; 0x40
 810584a:	4618      	mov	r0, r3
 810584c:	f000 f91b 	bl	8105a86 <TIM_ITRx_SetConfig>
      break;
 8105850:	e00c      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	681a      	ldr	r2, [r3, #0]
 8105856:	683b      	ldr	r3, [r7, #0]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	4619      	mov	r1, r3
 810585c:	4610      	mov	r0, r2
 810585e:	f000 f912 	bl	8105a86 <TIM_ITRx_SetConfig>
      break;
 8105862:	e003      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105864:	2301      	movs	r3, #1
 8105866:	73fb      	strb	r3, [r7, #15]
      break;
 8105868:	e000      	b.n	810586c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810586a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	2201      	movs	r2, #1
 8105870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	2200      	movs	r2, #0
 8105878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810587c:	7bfb      	ldrb	r3, [r7, #15]
}
 810587e:	4618      	mov	r0, r3
 8105880:	3710      	adds	r7, #16
 8105882:	46bd      	mov	sp, r7
 8105884:	bd80      	pop	{r7, pc}
 8105886:	bf00      	nop
 8105888:	00100040 	.word	0x00100040
 810588c:	00100030 	.word	0x00100030
 8105890:	00100020 	.word	0x00100020

08105894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8105894:	b480      	push	{r7}
 8105896:	b085      	sub	sp, #20
 8105898:	af00      	add	r7, sp, #0
 810589a:	6078      	str	r0, [r7, #4]
 810589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	4a40      	ldr	r2, [pc, #256]	; (81059a8 <TIM_Base_SetConfig+0x114>)
 81058a8:	4293      	cmp	r3, r2
 81058aa:	d013      	beq.n	81058d4 <TIM_Base_SetConfig+0x40>
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058b2:	d00f      	beq.n	81058d4 <TIM_Base_SetConfig+0x40>
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	4a3d      	ldr	r2, [pc, #244]	; (81059ac <TIM_Base_SetConfig+0x118>)
 81058b8:	4293      	cmp	r3, r2
 81058ba:	d00b      	beq.n	81058d4 <TIM_Base_SetConfig+0x40>
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	4a3c      	ldr	r2, [pc, #240]	; (81059b0 <TIM_Base_SetConfig+0x11c>)
 81058c0:	4293      	cmp	r3, r2
 81058c2:	d007      	beq.n	81058d4 <TIM_Base_SetConfig+0x40>
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	4a3b      	ldr	r2, [pc, #236]	; (81059b4 <TIM_Base_SetConfig+0x120>)
 81058c8:	4293      	cmp	r3, r2
 81058ca:	d003      	beq.n	81058d4 <TIM_Base_SetConfig+0x40>
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	4a3a      	ldr	r2, [pc, #232]	; (81059b8 <TIM_Base_SetConfig+0x124>)
 81058d0:	4293      	cmp	r3, r2
 81058d2:	d108      	bne.n	81058e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81058da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81058dc:	683b      	ldr	r3, [r7, #0]
 81058de:	685b      	ldr	r3, [r3, #4]
 81058e0:	68fa      	ldr	r2, [r7, #12]
 81058e2:	4313      	orrs	r3, r2
 81058e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	4a2f      	ldr	r2, [pc, #188]	; (81059a8 <TIM_Base_SetConfig+0x114>)
 81058ea:	4293      	cmp	r3, r2
 81058ec:	d01f      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058f4:	d01b      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	4a2c      	ldr	r2, [pc, #176]	; (81059ac <TIM_Base_SetConfig+0x118>)
 81058fa:	4293      	cmp	r3, r2
 81058fc:	d017      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	4a2b      	ldr	r2, [pc, #172]	; (81059b0 <TIM_Base_SetConfig+0x11c>)
 8105902:	4293      	cmp	r3, r2
 8105904:	d013      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	4a2a      	ldr	r2, [pc, #168]	; (81059b4 <TIM_Base_SetConfig+0x120>)
 810590a:	4293      	cmp	r3, r2
 810590c:	d00f      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 810590e:	687b      	ldr	r3, [r7, #4]
 8105910:	4a29      	ldr	r2, [pc, #164]	; (81059b8 <TIM_Base_SetConfig+0x124>)
 8105912:	4293      	cmp	r3, r2
 8105914:	d00b      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	4a28      	ldr	r2, [pc, #160]	; (81059bc <TIM_Base_SetConfig+0x128>)
 810591a:	4293      	cmp	r3, r2
 810591c:	d007      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	4a27      	ldr	r2, [pc, #156]	; (81059c0 <TIM_Base_SetConfig+0x12c>)
 8105922:	4293      	cmp	r3, r2
 8105924:	d003      	beq.n	810592e <TIM_Base_SetConfig+0x9a>
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	4a26      	ldr	r2, [pc, #152]	; (81059c4 <TIM_Base_SetConfig+0x130>)
 810592a:	4293      	cmp	r3, r2
 810592c:	d108      	bne.n	8105940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105936:	683b      	ldr	r3, [r7, #0]
 8105938:	68db      	ldr	r3, [r3, #12]
 810593a:	68fa      	ldr	r2, [r7, #12]
 810593c:	4313      	orrs	r3, r2
 810593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105946:	683b      	ldr	r3, [r7, #0]
 8105948:	695b      	ldr	r3, [r3, #20]
 810594a:	4313      	orrs	r3, r2
 810594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	68fa      	ldr	r2, [r7, #12]
 8105952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105954:	683b      	ldr	r3, [r7, #0]
 8105956:	689a      	ldr	r2, [r3, #8]
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810595c:	683b      	ldr	r3, [r7, #0]
 810595e:	681a      	ldr	r2, [r3, #0]
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	4a10      	ldr	r2, [pc, #64]	; (81059a8 <TIM_Base_SetConfig+0x114>)
 8105968:	4293      	cmp	r3, r2
 810596a:	d00f      	beq.n	810598c <TIM_Base_SetConfig+0xf8>
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	4a12      	ldr	r2, [pc, #72]	; (81059b8 <TIM_Base_SetConfig+0x124>)
 8105970:	4293      	cmp	r3, r2
 8105972:	d00b      	beq.n	810598c <TIM_Base_SetConfig+0xf8>
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	4a11      	ldr	r2, [pc, #68]	; (81059bc <TIM_Base_SetConfig+0x128>)
 8105978:	4293      	cmp	r3, r2
 810597a:	d007      	beq.n	810598c <TIM_Base_SetConfig+0xf8>
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	4a10      	ldr	r2, [pc, #64]	; (81059c0 <TIM_Base_SetConfig+0x12c>)
 8105980:	4293      	cmp	r3, r2
 8105982:	d003      	beq.n	810598c <TIM_Base_SetConfig+0xf8>
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	4a0f      	ldr	r2, [pc, #60]	; (81059c4 <TIM_Base_SetConfig+0x130>)
 8105988:	4293      	cmp	r3, r2
 810598a:	d103      	bne.n	8105994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810598c:	683b      	ldr	r3, [r7, #0]
 810598e:	691a      	ldr	r2, [r3, #16]
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	2201      	movs	r2, #1
 8105998:	615a      	str	r2, [r3, #20]
}
 810599a:	bf00      	nop
 810599c:	3714      	adds	r7, #20
 810599e:	46bd      	mov	sp, r7
 81059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059a4:	4770      	bx	lr
 81059a6:	bf00      	nop
 81059a8:	40010000 	.word	0x40010000
 81059ac:	40000400 	.word	0x40000400
 81059b0:	40000800 	.word	0x40000800
 81059b4:	40000c00 	.word	0x40000c00
 81059b8:	40010400 	.word	0x40010400
 81059bc:	40014000 	.word	0x40014000
 81059c0:	40014400 	.word	0x40014400
 81059c4:	40014800 	.word	0x40014800

081059c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81059c8:	b480      	push	{r7}
 81059ca:	b087      	sub	sp, #28
 81059cc:	af00      	add	r7, sp, #0
 81059ce:	60f8      	str	r0, [r7, #12]
 81059d0:	60b9      	str	r1, [r7, #8]
 81059d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81059d4:	68fb      	ldr	r3, [r7, #12]
 81059d6:	6a1b      	ldr	r3, [r3, #32]
 81059d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81059da:	68fb      	ldr	r3, [r7, #12]
 81059dc:	6a1b      	ldr	r3, [r3, #32]
 81059de:	f023 0201 	bic.w	r2, r3, #1
 81059e2:	68fb      	ldr	r3, [r7, #12]
 81059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81059e6:	68fb      	ldr	r3, [r7, #12]
 81059e8:	699b      	ldr	r3, [r3, #24]
 81059ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81059ec:	693b      	ldr	r3, [r7, #16]
 81059ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81059f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	011b      	lsls	r3, r3, #4
 81059f8:	693a      	ldr	r2, [r7, #16]
 81059fa:	4313      	orrs	r3, r2
 81059fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81059fe:	697b      	ldr	r3, [r7, #20]
 8105a00:	f023 030a 	bic.w	r3, r3, #10
 8105a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8105a06:	697a      	ldr	r2, [r7, #20]
 8105a08:	68bb      	ldr	r3, [r7, #8]
 8105a0a:	4313      	orrs	r3, r2
 8105a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8105a0e:	68fb      	ldr	r3, [r7, #12]
 8105a10:	693a      	ldr	r2, [r7, #16]
 8105a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105a14:	68fb      	ldr	r3, [r7, #12]
 8105a16:	697a      	ldr	r2, [r7, #20]
 8105a18:	621a      	str	r2, [r3, #32]
}
 8105a1a:	bf00      	nop
 8105a1c:	371c      	adds	r7, #28
 8105a1e:	46bd      	mov	sp, r7
 8105a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a24:	4770      	bx	lr

08105a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105a26:	b480      	push	{r7}
 8105a28:	b087      	sub	sp, #28
 8105a2a:	af00      	add	r7, sp, #0
 8105a2c:	60f8      	str	r0, [r7, #12]
 8105a2e:	60b9      	str	r1, [r7, #8]
 8105a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105a32:	68fb      	ldr	r3, [r7, #12]
 8105a34:	6a1b      	ldr	r3, [r3, #32]
 8105a36:	f023 0210 	bic.w	r2, r3, #16
 8105a3a:	68fb      	ldr	r3, [r7, #12]
 8105a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105a3e:	68fb      	ldr	r3, [r7, #12]
 8105a40:	699b      	ldr	r3, [r3, #24]
 8105a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8105a44:	68fb      	ldr	r3, [r7, #12]
 8105a46:	6a1b      	ldr	r3, [r3, #32]
 8105a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8105a4a:	697b      	ldr	r3, [r7, #20]
 8105a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8105a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	031b      	lsls	r3, r3, #12
 8105a56:	697a      	ldr	r2, [r7, #20]
 8105a58:	4313      	orrs	r3, r2
 8105a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105a5c:	693b      	ldr	r3, [r7, #16]
 8105a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8105a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8105a64:	68bb      	ldr	r3, [r7, #8]
 8105a66:	011b      	lsls	r3, r3, #4
 8105a68:	693a      	ldr	r2, [r7, #16]
 8105a6a:	4313      	orrs	r3, r2
 8105a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8105a6e:	68fb      	ldr	r3, [r7, #12]
 8105a70:	697a      	ldr	r2, [r7, #20]
 8105a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105a74:	68fb      	ldr	r3, [r7, #12]
 8105a76:	693a      	ldr	r2, [r7, #16]
 8105a78:	621a      	str	r2, [r3, #32]
}
 8105a7a:	bf00      	nop
 8105a7c:	371c      	adds	r7, #28
 8105a7e:	46bd      	mov	sp, r7
 8105a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a84:	4770      	bx	lr

08105a86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8105a86:	b480      	push	{r7}
 8105a88:	b085      	sub	sp, #20
 8105a8a:	af00      	add	r7, sp, #0
 8105a8c:	6078      	str	r0, [r7, #4]
 8105a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8105a90:	687b      	ldr	r3, [r7, #4]
 8105a92:	689b      	ldr	r3, [r3, #8]
 8105a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8105a96:	68fb      	ldr	r3, [r7, #12]
 8105a98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8105a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105aa2:	683a      	ldr	r2, [r7, #0]
 8105aa4:	68fb      	ldr	r3, [r7, #12]
 8105aa6:	4313      	orrs	r3, r2
 8105aa8:	f043 0307 	orr.w	r3, r3, #7
 8105aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	68fa      	ldr	r2, [r7, #12]
 8105ab2:	609a      	str	r2, [r3, #8]
}
 8105ab4:	bf00      	nop
 8105ab6:	3714      	adds	r7, #20
 8105ab8:	46bd      	mov	sp, r7
 8105aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105abe:	4770      	bx	lr

08105ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105ac0:	b480      	push	{r7}
 8105ac2:	b087      	sub	sp, #28
 8105ac4:	af00      	add	r7, sp, #0
 8105ac6:	60f8      	str	r0, [r7, #12]
 8105ac8:	60b9      	str	r1, [r7, #8]
 8105aca:	607a      	str	r2, [r7, #4]
 8105acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105ace:	68fb      	ldr	r3, [r7, #12]
 8105ad0:	689b      	ldr	r3, [r3, #8]
 8105ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105ad4:	697b      	ldr	r3, [r7, #20]
 8105ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105adc:	683b      	ldr	r3, [r7, #0]
 8105ade:	021a      	lsls	r2, r3, #8
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	431a      	orrs	r2, r3
 8105ae4:	68bb      	ldr	r3, [r7, #8]
 8105ae6:	4313      	orrs	r3, r2
 8105ae8:	697a      	ldr	r2, [r7, #20]
 8105aea:	4313      	orrs	r3, r2
 8105aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105aee:	68fb      	ldr	r3, [r7, #12]
 8105af0:	697a      	ldr	r2, [r7, #20]
 8105af2:	609a      	str	r2, [r3, #8]
}
 8105af4:	bf00      	nop
 8105af6:	371c      	adds	r7, #28
 8105af8:	46bd      	mov	sp, r7
 8105afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105afe:	4770      	bx	lr

08105b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105b00:	b480      	push	{r7}
 8105b02:	b085      	sub	sp, #20
 8105b04:	af00      	add	r7, sp, #0
 8105b06:	6078      	str	r0, [r7, #4]
 8105b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105b10:	2b01      	cmp	r3, #1
 8105b12:	d101      	bne.n	8105b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8105b14:	2302      	movs	r3, #2
 8105b16:	e06d      	b.n	8105bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	2201      	movs	r2, #1
 8105b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	2202      	movs	r2, #2
 8105b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	681b      	ldr	r3, [r3, #0]
 8105b2c:	685b      	ldr	r3, [r3, #4]
 8105b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	689b      	ldr	r3, [r3, #8]
 8105b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	4a30      	ldr	r2, [pc, #192]	; (8105c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105b3e:	4293      	cmp	r3, r2
 8105b40:	d004      	beq.n	8105b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	4a2f      	ldr	r2, [pc, #188]	; (8105c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105b48:	4293      	cmp	r3, r2
 8105b4a:	d108      	bne.n	8105b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105b4c:	68fb      	ldr	r3, [r7, #12]
 8105b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8105b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105b54:	683b      	ldr	r3, [r7, #0]
 8105b56:	685b      	ldr	r3, [r3, #4]
 8105b58:	68fa      	ldr	r2, [r7, #12]
 8105b5a:	4313      	orrs	r3, r2
 8105b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8105b5e:	68fb      	ldr	r3, [r7, #12]
 8105b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105b66:	683b      	ldr	r3, [r7, #0]
 8105b68:	681b      	ldr	r3, [r3, #0]
 8105b6a:	68fa      	ldr	r2, [r7, #12]
 8105b6c:	4313      	orrs	r3, r2
 8105b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	681b      	ldr	r3, [r3, #0]
 8105b74:	68fa      	ldr	r2, [r7, #12]
 8105b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	4a20      	ldr	r2, [pc, #128]	; (8105c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105b7e:	4293      	cmp	r3, r2
 8105b80:	d022      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105b8a:	d01d      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	4a1d      	ldr	r2, [pc, #116]	; (8105c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8105b92:	4293      	cmp	r3, r2
 8105b94:	d018      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	4a1c      	ldr	r2, [pc, #112]	; (8105c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105b9c:	4293      	cmp	r3, r2
 8105b9e:	d013      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	681b      	ldr	r3, [r3, #0]
 8105ba4:	4a1a      	ldr	r2, [pc, #104]	; (8105c10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8105ba6:	4293      	cmp	r3, r2
 8105ba8:	d00e      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	681b      	ldr	r3, [r3, #0]
 8105bae:	4a15      	ldr	r2, [pc, #84]	; (8105c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105bb0:	4293      	cmp	r3, r2
 8105bb2:	d009      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	4a16      	ldr	r2, [pc, #88]	; (8105c14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8105bba:	4293      	cmp	r3, r2
 8105bbc:	d004      	beq.n	8105bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	681b      	ldr	r3, [r3, #0]
 8105bc2:	4a15      	ldr	r2, [pc, #84]	; (8105c18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8105bc4:	4293      	cmp	r3, r2
 8105bc6:	d10c      	bne.n	8105be2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105bc8:	68bb      	ldr	r3, [r7, #8]
 8105bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105bd0:	683b      	ldr	r3, [r7, #0]
 8105bd2:	689b      	ldr	r3, [r3, #8]
 8105bd4:	68ba      	ldr	r2, [r7, #8]
 8105bd6:	4313      	orrs	r3, r2
 8105bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	681b      	ldr	r3, [r3, #0]
 8105bde:	68ba      	ldr	r2, [r7, #8]
 8105be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	2201      	movs	r2, #1
 8105be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	2200      	movs	r2, #0
 8105bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8105bf2:	2300      	movs	r3, #0
}
 8105bf4:	4618      	mov	r0, r3
 8105bf6:	3714      	adds	r7, #20
 8105bf8:	46bd      	mov	sp, r7
 8105bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bfe:	4770      	bx	lr
 8105c00:	40010000 	.word	0x40010000
 8105c04:	40010400 	.word	0x40010400
 8105c08:	40000400 	.word	0x40000400
 8105c0c:	40000800 	.word	0x40000800
 8105c10:	40000c00 	.word	0x40000c00
 8105c14:	40001800 	.word	0x40001800
 8105c18:	40014000 	.word	0x40014000

08105c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105c1c:	b580      	push	{r7, lr}
 8105c1e:	b08a      	sub	sp, #40	; 0x28
 8105c20:	af02      	add	r7, sp, #8
 8105c22:	60f8      	str	r0, [r7, #12]
 8105c24:	60b9      	str	r1, [r7, #8]
 8105c26:	603b      	str	r3, [r7, #0]
 8105c28:	4613      	mov	r3, r2
 8105c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105c2c:	68fb      	ldr	r3, [r7, #12]
 8105c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105c32:	2b20      	cmp	r3, #32
 8105c34:	d17b      	bne.n	8105d2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8105c36:	68bb      	ldr	r3, [r7, #8]
 8105c38:	2b00      	cmp	r3, #0
 8105c3a:	d002      	beq.n	8105c42 <HAL_UART_Transmit+0x26>
 8105c3c:	88fb      	ldrh	r3, [r7, #6]
 8105c3e:	2b00      	cmp	r3, #0
 8105c40:	d101      	bne.n	8105c46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8105c42:	2301      	movs	r3, #1
 8105c44:	e074      	b.n	8105d30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105c46:	68fb      	ldr	r3, [r7, #12]
 8105c48:	2200      	movs	r2, #0
 8105c4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	2221      	movs	r2, #33	; 0x21
 8105c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105c56:	f7fa ffb3 	bl	8100bc0 <HAL_GetTick>
 8105c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105c5c:	68fb      	ldr	r3, [r7, #12]
 8105c5e:	88fa      	ldrh	r2, [r7, #6]
 8105c60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105c64:	68fb      	ldr	r3, [r7, #12]
 8105c66:	88fa      	ldrh	r2, [r7, #6]
 8105c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105c6c:	68fb      	ldr	r3, [r7, #12]
 8105c6e:	689b      	ldr	r3, [r3, #8]
 8105c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105c74:	d108      	bne.n	8105c88 <HAL_UART_Transmit+0x6c>
 8105c76:	68fb      	ldr	r3, [r7, #12]
 8105c78:	691b      	ldr	r3, [r3, #16]
 8105c7a:	2b00      	cmp	r3, #0
 8105c7c:	d104      	bne.n	8105c88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8105c7e:	2300      	movs	r3, #0
 8105c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8105c82:	68bb      	ldr	r3, [r7, #8]
 8105c84:	61bb      	str	r3, [r7, #24]
 8105c86:	e003      	b.n	8105c90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8105c88:	68bb      	ldr	r3, [r7, #8]
 8105c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105c8c:	2300      	movs	r3, #0
 8105c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8105c90:	e030      	b.n	8105cf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8105c92:	683b      	ldr	r3, [r7, #0]
 8105c94:	9300      	str	r3, [sp, #0]
 8105c96:	697b      	ldr	r3, [r7, #20]
 8105c98:	2200      	movs	r2, #0
 8105c9a:	2180      	movs	r1, #128	; 0x80
 8105c9c:	68f8      	ldr	r0, [r7, #12]
 8105c9e:	f000 f84b 	bl	8105d38 <UART_WaitOnFlagUntilTimeout>
 8105ca2:	4603      	mov	r3, r0
 8105ca4:	2b00      	cmp	r3, #0
 8105ca6:	d005      	beq.n	8105cb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8105ca8:	68fb      	ldr	r3, [r7, #12]
 8105caa:	2220      	movs	r2, #32
 8105cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8105cb0:	2303      	movs	r3, #3
 8105cb2:	e03d      	b.n	8105d30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8105cb4:	69fb      	ldr	r3, [r7, #28]
 8105cb6:	2b00      	cmp	r3, #0
 8105cb8:	d10b      	bne.n	8105cd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105cba:	69bb      	ldr	r3, [r7, #24]
 8105cbc:	881b      	ldrh	r3, [r3, #0]
 8105cbe:	461a      	mov	r2, r3
 8105cc0:	68fb      	ldr	r3, [r7, #12]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105cc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8105cca:	69bb      	ldr	r3, [r7, #24]
 8105ccc:	3302      	adds	r3, #2
 8105cce:	61bb      	str	r3, [r7, #24]
 8105cd0:	e007      	b.n	8105ce2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8105cd2:	69fb      	ldr	r3, [r7, #28]
 8105cd4:	781a      	ldrb	r2, [r3, #0]
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8105cdc:	69fb      	ldr	r3, [r7, #28]
 8105cde:	3301      	adds	r3, #1
 8105ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8105ce2:	68fb      	ldr	r3, [r7, #12]
 8105ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105ce8:	b29b      	uxth	r3, r3
 8105cea:	3b01      	subs	r3, #1
 8105cec:	b29a      	uxth	r2, r3
 8105cee:	68fb      	ldr	r3, [r7, #12]
 8105cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105cfa:	b29b      	uxth	r3, r3
 8105cfc:	2b00      	cmp	r3, #0
 8105cfe:	d1c8      	bne.n	8105c92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8105d00:	683b      	ldr	r3, [r7, #0]
 8105d02:	9300      	str	r3, [sp, #0]
 8105d04:	697b      	ldr	r3, [r7, #20]
 8105d06:	2200      	movs	r2, #0
 8105d08:	2140      	movs	r1, #64	; 0x40
 8105d0a:	68f8      	ldr	r0, [r7, #12]
 8105d0c:	f000 f814 	bl	8105d38 <UART_WaitOnFlagUntilTimeout>
 8105d10:	4603      	mov	r3, r0
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d005      	beq.n	8105d22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8105d16:	68fb      	ldr	r3, [r7, #12]
 8105d18:	2220      	movs	r2, #32
 8105d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8105d1e:	2303      	movs	r3, #3
 8105d20:	e006      	b.n	8105d30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	2220      	movs	r2, #32
 8105d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8105d2a:	2300      	movs	r3, #0
 8105d2c:	e000      	b.n	8105d30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8105d2e:	2302      	movs	r3, #2
  }
}
 8105d30:	4618      	mov	r0, r3
 8105d32:	3720      	adds	r7, #32
 8105d34:	46bd      	mov	sp, r7
 8105d36:	bd80      	pop	{r7, pc}

08105d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105d38:	b580      	push	{r7, lr}
 8105d3a:	b084      	sub	sp, #16
 8105d3c:	af00      	add	r7, sp, #0
 8105d3e:	60f8      	str	r0, [r7, #12]
 8105d40:	60b9      	str	r1, [r7, #8]
 8105d42:	603b      	str	r3, [r7, #0]
 8105d44:	4613      	mov	r3, r2
 8105d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105d48:	e049      	b.n	8105dde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105d4a:	69bb      	ldr	r3, [r7, #24]
 8105d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d50:	d045      	beq.n	8105dde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105d52:	f7fa ff35 	bl	8100bc0 <HAL_GetTick>
 8105d56:	4602      	mov	r2, r0
 8105d58:	683b      	ldr	r3, [r7, #0]
 8105d5a:	1ad3      	subs	r3, r2, r3
 8105d5c:	69ba      	ldr	r2, [r7, #24]
 8105d5e:	429a      	cmp	r2, r3
 8105d60:	d302      	bcc.n	8105d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8105d62:	69bb      	ldr	r3, [r7, #24]
 8105d64:	2b00      	cmp	r3, #0
 8105d66:	d101      	bne.n	8105d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8105d68:	2303      	movs	r3, #3
 8105d6a:	e048      	b.n	8105dfe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105d6c:	68fb      	ldr	r3, [r7, #12]
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	f003 0304 	and.w	r3, r3, #4
 8105d76:	2b00      	cmp	r3, #0
 8105d78:	d031      	beq.n	8105dde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8105d7a:	68fb      	ldr	r3, [r7, #12]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	69db      	ldr	r3, [r3, #28]
 8105d80:	f003 0308 	and.w	r3, r3, #8
 8105d84:	2b08      	cmp	r3, #8
 8105d86:	d110      	bne.n	8105daa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8105d88:	68fb      	ldr	r3, [r7, #12]
 8105d8a:	681b      	ldr	r3, [r3, #0]
 8105d8c:	2208      	movs	r2, #8
 8105d8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8105d90:	68f8      	ldr	r0, [r7, #12]
 8105d92:	f000 f838 	bl	8105e06 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8105d96:	68fb      	ldr	r3, [r7, #12]
 8105d98:	2208      	movs	r2, #8
 8105d9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8105d9e:	68fb      	ldr	r3, [r7, #12]
 8105da0:	2200      	movs	r2, #0
 8105da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8105da6:	2301      	movs	r3, #1
 8105da8:	e029      	b.n	8105dfe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	69db      	ldr	r3, [r3, #28]
 8105db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105db8:	d111      	bne.n	8105dde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105dba:	68fb      	ldr	r3, [r7, #12]
 8105dbc:	681b      	ldr	r3, [r3, #0]
 8105dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8105dc4:	68f8      	ldr	r0, [r7, #12]
 8105dc6:	f000 f81e 	bl	8105e06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105dca:	68fb      	ldr	r3, [r7, #12]
 8105dcc:	2220      	movs	r2, #32
 8105dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105dd2:	68fb      	ldr	r3, [r7, #12]
 8105dd4:	2200      	movs	r2, #0
 8105dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8105dda:	2303      	movs	r3, #3
 8105ddc:	e00f      	b.n	8105dfe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105dde:	68fb      	ldr	r3, [r7, #12]
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	69da      	ldr	r2, [r3, #28]
 8105de4:	68bb      	ldr	r3, [r7, #8]
 8105de6:	4013      	ands	r3, r2
 8105de8:	68ba      	ldr	r2, [r7, #8]
 8105dea:	429a      	cmp	r2, r3
 8105dec:	bf0c      	ite	eq
 8105dee:	2301      	moveq	r3, #1
 8105df0:	2300      	movne	r3, #0
 8105df2:	b2db      	uxtb	r3, r3
 8105df4:	461a      	mov	r2, r3
 8105df6:	79fb      	ldrb	r3, [r7, #7]
 8105df8:	429a      	cmp	r2, r3
 8105dfa:	d0a6      	beq.n	8105d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105dfc:	2300      	movs	r3, #0
}
 8105dfe:	4618      	mov	r0, r3
 8105e00:	3710      	adds	r7, #16
 8105e02:	46bd      	mov	sp, r7
 8105e04:	bd80      	pop	{r7, pc}

08105e06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8105e06:	b480      	push	{r7}
 8105e08:	b095      	sub	sp, #84	; 0x54
 8105e0a:	af00      	add	r7, sp, #0
 8105e0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105e16:	e853 3f00 	ldrex	r3, [r3]
 8105e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8105e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8105e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	461a      	mov	r2, r3
 8105e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8105e2e:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8105e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105e34:	e841 2300 	strex	r3, r2, [r1]
 8105e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e3c:	2b00      	cmp	r3, #0
 8105e3e:	d1e6      	bne.n	8105e0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	681b      	ldr	r3, [r3, #0]
 8105e44:	3308      	adds	r3, #8
 8105e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e48:	6a3b      	ldr	r3, [r7, #32]
 8105e4a:	e853 3f00 	ldrex	r3, [r3]
 8105e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8105e50:	69fb      	ldr	r3, [r7, #28]
 8105e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105e56:	f023 0301 	bic.w	r3, r3, #1
 8105e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	3308      	adds	r3, #8
 8105e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8105e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105e6c:	e841 2300 	strex	r3, r2, [r1]
 8105e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105e74:	2b00      	cmp	r3, #0
 8105e76:	d1e3      	bne.n	8105e40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105e78:	687b      	ldr	r3, [r7, #4]
 8105e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e7c:	2b01      	cmp	r3, #1
 8105e7e:	d118      	bne.n	8105eb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e86:	68fb      	ldr	r3, [r7, #12]
 8105e88:	e853 3f00 	ldrex	r3, [r3]
 8105e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8105e8e:	68bb      	ldr	r3, [r7, #8]
 8105e90:	f023 0310 	bic.w	r3, r3, #16
 8105e94:	647b      	str	r3, [r7, #68]	; 0x44
 8105e96:	687b      	ldr	r3, [r7, #4]
 8105e98:	681b      	ldr	r3, [r3, #0]
 8105e9a:	461a      	mov	r2, r3
 8105e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8105e9e:	61bb      	str	r3, [r7, #24]
 8105ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105ea2:	6979      	ldr	r1, [r7, #20]
 8105ea4:	69ba      	ldr	r2, [r7, #24]
 8105ea6:	e841 2300 	strex	r3, r2, [r1]
 8105eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8105eac:	693b      	ldr	r3, [r7, #16]
 8105eae:	2b00      	cmp	r3, #0
 8105eb0:	d1e6      	bne.n	8105e80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	2220      	movs	r2, #32
 8105eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	2200      	movs	r2, #0
 8105ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	2200      	movs	r2, #0
 8105ec4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8105ec6:	bf00      	nop
 8105ec8:	3754      	adds	r7, #84	; 0x54
 8105eca:	46bd      	mov	sp, r7
 8105ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ed0:	4770      	bx	lr
	...

08105ed4 <siprintf>:
 8105ed4:	b40e      	push	{r1, r2, r3}
 8105ed6:	b500      	push	{lr}
 8105ed8:	b09c      	sub	sp, #112	; 0x70
 8105eda:	ab1d      	add	r3, sp, #116	; 0x74
 8105edc:	9002      	str	r0, [sp, #8]
 8105ede:	9006      	str	r0, [sp, #24]
 8105ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8105ee4:	4809      	ldr	r0, [pc, #36]	; (8105f0c <siprintf+0x38>)
 8105ee6:	9107      	str	r1, [sp, #28]
 8105ee8:	9104      	str	r1, [sp, #16]
 8105eea:	4909      	ldr	r1, [pc, #36]	; (8105f10 <siprintf+0x3c>)
 8105eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8105ef0:	9105      	str	r1, [sp, #20]
 8105ef2:	6800      	ldr	r0, [r0, #0]
 8105ef4:	9301      	str	r3, [sp, #4]
 8105ef6:	a902      	add	r1, sp, #8
 8105ef8:	f000 f9cc 	bl	8106294 <_svfiprintf_r>
 8105efc:	9b02      	ldr	r3, [sp, #8]
 8105efe:	2200      	movs	r2, #0
 8105f00:	701a      	strb	r2, [r3, #0]
 8105f02:	b01c      	add	sp, #112	; 0x70
 8105f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8105f08:	b003      	add	sp, #12
 8105f0a:	4770      	bx	lr
 8105f0c:	1000005c 	.word	0x1000005c
 8105f10:	ffff0208 	.word	0xffff0208

08105f14 <_vsniprintf_r>:
 8105f14:	b530      	push	{r4, r5, lr}
 8105f16:	4614      	mov	r4, r2
 8105f18:	2c00      	cmp	r4, #0
 8105f1a:	b09b      	sub	sp, #108	; 0x6c
 8105f1c:	4605      	mov	r5, r0
 8105f1e:	461a      	mov	r2, r3
 8105f20:	da05      	bge.n	8105f2e <_vsniprintf_r+0x1a>
 8105f22:	238b      	movs	r3, #139	; 0x8b
 8105f24:	6003      	str	r3, [r0, #0]
 8105f26:	f04f 30ff 	mov.w	r0, #4294967295
 8105f2a:	b01b      	add	sp, #108	; 0x6c
 8105f2c:	bd30      	pop	{r4, r5, pc}
 8105f2e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8105f32:	f8ad 300c 	strh.w	r3, [sp, #12]
 8105f36:	bf14      	ite	ne
 8105f38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8105f3c:	4623      	moveq	r3, r4
 8105f3e:	9302      	str	r3, [sp, #8]
 8105f40:	9305      	str	r3, [sp, #20]
 8105f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8105f46:	9100      	str	r1, [sp, #0]
 8105f48:	9104      	str	r1, [sp, #16]
 8105f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8105f4e:	4669      	mov	r1, sp
 8105f50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8105f52:	f000 f99f 	bl	8106294 <_svfiprintf_r>
 8105f56:	1c43      	adds	r3, r0, #1
 8105f58:	bfbc      	itt	lt
 8105f5a:	238b      	movlt	r3, #139	; 0x8b
 8105f5c:	602b      	strlt	r3, [r5, #0]
 8105f5e:	2c00      	cmp	r4, #0
 8105f60:	d0e3      	beq.n	8105f2a <_vsniprintf_r+0x16>
 8105f62:	9b00      	ldr	r3, [sp, #0]
 8105f64:	2200      	movs	r2, #0
 8105f66:	701a      	strb	r2, [r3, #0]
 8105f68:	e7df      	b.n	8105f2a <_vsniprintf_r+0x16>
	...

08105f6c <vsniprintf>:
 8105f6c:	b507      	push	{r0, r1, r2, lr}
 8105f6e:	9300      	str	r3, [sp, #0]
 8105f70:	4613      	mov	r3, r2
 8105f72:	460a      	mov	r2, r1
 8105f74:	4601      	mov	r1, r0
 8105f76:	4803      	ldr	r0, [pc, #12]	; (8105f84 <vsniprintf+0x18>)
 8105f78:	6800      	ldr	r0, [r0, #0]
 8105f7a:	f7ff ffcb 	bl	8105f14 <_vsniprintf_r>
 8105f7e:	b003      	add	sp, #12
 8105f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8105f84:	1000005c 	.word	0x1000005c

08105f88 <memset>:
 8105f88:	4402      	add	r2, r0
 8105f8a:	4603      	mov	r3, r0
 8105f8c:	4293      	cmp	r3, r2
 8105f8e:	d100      	bne.n	8105f92 <memset+0xa>
 8105f90:	4770      	bx	lr
 8105f92:	f803 1b01 	strb.w	r1, [r3], #1
 8105f96:	e7f9      	b.n	8105f8c <memset+0x4>

08105f98 <__errno>:
 8105f98:	4b01      	ldr	r3, [pc, #4]	; (8105fa0 <__errno+0x8>)
 8105f9a:	6818      	ldr	r0, [r3, #0]
 8105f9c:	4770      	bx	lr
 8105f9e:	bf00      	nop
 8105fa0:	1000005c 	.word	0x1000005c

08105fa4 <__libc_init_array>:
 8105fa4:	b570      	push	{r4, r5, r6, lr}
 8105fa6:	4d0d      	ldr	r5, [pc, #52]	; (8105fdc <__libc_init_array+0x38>)
 8105fa8:	4c0d      	ldr	r4, [pc, #52]	; (8105fe0 <__libc_init_array+0x3c>)
 8105faa:	1b64      	subs	r4, r4, r5
 8105fac:	10a4      	asrs	r4, r4, #2
 8105fae:	2600      	movs	r6, #0
 8105fb0:	42a6      	cmp	r6, r4
 8105fb2:	d109      	bne.n	8105fc8 <__libc_init_array+0x24>
 8105fb4:	4d0b      	ldr	r5, [pc, #44]	; (8105fe4 <__libc_init_array+0x40>)
 8105fb6:	4c0c      	ldr	r4, [pc, #48]	; (8105fe8 <__libc_init_array+0x44>)
 8105fb8:	f000 fc6a 	bl	8106890 <_init>
 8105fbc:	1b64      	subs	r4, r4, r5
 8105fbe:	10a4      	asrs	r4, r4, #2
 8105fc0:	2600      	movs	r6, #0
 8105fc2:	42a6      	cmp	r6, r4
 8105fc4:	d105      	bne.n	8105fd2 <__libc_init_array+0x2e>
 8105fc6:	bd70      	pop	{r4, r5, r6, pc}
 8105fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8105fcc:	4798      	blx	r3
 8105fce:	3601      	adds	r6, #1
 8105fd0:	e7ee      	b.n	8105fb0 <__libc_init_array+0xc>
 8105fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8105fd6:	4798      	blx	r3
 8105fd8:	3601      	adds	r6, #1
 8105fda:	e7f2      	b.n	8105fc2 <__libc_init_array+0x1e>
 8105fdc:	08106934 	.word	0x08106934
 8105fe0:	08106934 	.word	0x08106934
 8105fe4:	08106934 	.word	0x08106934
 8105fe8:	08106938 	.word	0x08106938

08105fec <__retarget_lock_acquire_recursive>:
 8105fec:	4770      	bx	lr

08105fee <__retarget_lock_release_recursive>:
 8105fee:	4770      	bx	lr

08105ff0 <_free_r>:
 8105ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8105ff2:	2900      	cmp	r1, #0
 8105ff4:	d044      	beq.n	8106080 <_free_r+0x90>
 8105ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105ffa:	9001      	str	r0, [sp, #4]
 8105ffc:	2b00      	cmp	r3, #0
 8105ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8106002:	bfb8      	it	lt
 8106004:	18e4      	addlt	r4, r4, r3
 8106006:	f000 f8df 	bl	81061c8 <__malloc_lock>
 810600a:	4a1e      	ldr	r2, [pc, #120]	; (8106084 <_free_r+0x94>)
 810600c:	9801      	ldr	r0, [sp, #4]
 810600e:	6813      	ldr	r3, [r2, #0]
 8106010:	b933      	cbnz	r3, 8106020 <_free_r+0x30>
 8106012:	6063      	str	r3, [r4, #4]
 8106014:	6014      	str	r4, [r2, #0]
 8106016:	b003      	add	sp, #12
 8106018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810601c:	f000 b8da 	b.w	81061d4 <__malloc_unlock>
 8106020:	42a3      	cmp	r3, r4
 8106022:	d908      	bls.n	8106036 <_free_r+0x46>
 8106024:	6825      	ldr	r5, [r4, #0]
 8106026:	1961      	adds	r1, r4, r5
 8106028:	428b      	cmp	r3, r1
 810602a:	bf01      	itttt	eq
 810602c:	6819      	ldreq	r1, [r3, #0]
 810602e:	685b      	ldreq	r3, [r3, #4]
 8106030:	1949      	addeq	r1, r1, r5
 8106032:	6021      	streq	r1, [r4, #0]
 8106034:	e7ed      	b.n	8106012 <_free_r+0x22>
 8106036:	461a      	mov	r2, r3
 8106038:	685b      	ldr	r3, [r3, #4]
 810603a:	b10b      	cbz	r3, 8106040 <_free_r+0x50>
 810603c:	42a3      	cmp	r3, r4
 810603e:	d9fa      	bls.n	8106036 <_free_r+0x46>
 8106040:	6811      	ldr	r1, [r2, #0]
 8106042:	1855      	adds	r5, r2, r1
 8106044:	42a5      	cmp	r5, r4
 8106046:	d10b      	bne.n	8106060 <_free_r+0x70>
 8106048:	6824      	ldr	r4, [r4, #0]
 810604a:	4421      	add	r1, r4
 810604c:	1854      	adds	r4, r2, r1
 810604e:	42a3      	cmp	r3, r4
 8106050:	6011      	str	r1, [r2, #0]
 8106052:	d1e0      	bne.n	8106016 <_free_r+0x26>
 8106054:	681c      	ldr	r4, [r3, #0]
 8106056:	685b      	ldr	r3, [r3, #4]
 8106058:	6053      	str	r3, [r2, #4]
 810605a:	440c      	add	r4, r1
 810605c:	6014      	str	r4, [r2, #0]
 810605e:	e7da      	b.n	8106016 <_free_r+0x26>
 8106060:	d902      	bls.n	8106068 <_free_r+0x78>
 8106062:	230c      	movs	r3, #12
 8106064:	6003      	str	r3, [r0, #0]
 8106066:	e7d6      	b.n	8106016 <_free_r+0x26>
 8106068:	6825      	ldr	r5, [r4, #0]
 810606a:	1961      	adds	r1, r4, r5
 810606c:	428b      	cmp	r3, r1
 810606e:	bf04      	itt	eq
 8106070:	6819      	ldreq	r1, [r3, #0]
 8106072:	685b      	ldreq	r3, [r3, #4]
 8106074:	6063      	str	r3, [r4, #4]
 8106076:	bf04      	itt	eq
 8106078:	1949      	addeq	r1, r1, r5
 810607a:	6021      	streq	r1, [r4, #0]
 810607c:	6054      	str	r4, [r2, #4]
 810607e:	e7ca      	b.n	8106016 <_free_r+0x26>
 8106080:	b003      	add	sp, #12
 8106082:	bd30      	pop	{r4, r5, pc}
 8106084:	10000464 	.word	0x10000464

08106088 <sbrk_aligned>:
 8106088:	b570      	push	{r4, r5, r6, lr}
 810608a:	4e0e      	ldr	r6, [pc, #56]	; (81060c4 <sbrk_aligned+0x3c>)
 810608c:	460c      	mov	r4, r1
 810608e:	6831      	ldr	r1, [r6, #0]
 8106090:	4605      	mov	r5, r0
 8106092:	b911      	cbnz	r1, 810609a <sbrk_aligned+0x12>
 8106094:	f000 fba6 	bl	81067e4 <_sbrk_r>
 8106098:	6030      	str	r0, [r6, #0]
 810609a:	4621      	mov	r1, r4
 810609c:	4628      	mov	r0, r5
 810609e:	f000 fba1 	bl	81067e4 <_sbrk_r>
 81060a2:	1c43      	adds	r3, r0, #1
 81060a4:	d00a      	beq.n	81060bc <sbrk_aligned+0x34>
 81060a6:	1cc4      	adds	r4, r0, #3
 81060a8:	f024 0403 	bic.w	r4, r4, #3
 81060ac:	42a0      	cmp	r0, r4
 81060ae:	d007      	beq.n	81060c0 <sbrk_aligned+0x38>
 81060b0:	1a21      	subs	r1, r4, r0
 81060b2:	4628      	mov	r0, r5
 81060b4:	f000 fb96 	bl	81067e4 <_sbrk_r>
 81060b8:	3001      	adds	r0, #1
 81060ba:	d101      	bne.n	81060c0 <sbrk_aligned+0x38>
 81060bc:	f04f 34ff 	mov.w	r4, #4294967295
 81060c0:	4620      	mov	r0, r4
 81060c2:	bd70      	pop	{r4, r5, r6, pc}
 81060c4:	10000468 	.word	0x10000468

081060c8 <_malloc_r>:
 81060c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81060cc:	1ccd      	adds	r5, r1, #3
 81060ce:	f025 0503 	bic.w	r5, r5, #3
 81060d2:	3508      	adds	r5, #8
 81060d4:	2d0c      	cmp	r5, #12
 81060d6:	bf38      	it	cc
 81060d8:	250c      	movcc	r5, #12
 81060da:	2d00      	cmp	r5, #0
 81060dc:	4607      	mov	r7, r0
 81060de:	db01      	blt.n	81060e4 <_malloc_r+0x1c>
 81060e0:	42a9      	cmp	r1, r5
 81060e2:	d905      	bls.n	81060f0 <_malloc_r+0x28>
 81060e4:	230c      	movs	r3, #12
 81060e6:	603b      	str	r3, [r7, #0]
 81060e8:	2600      	movs	r6, #0
 81060ea:	4630      	mov	r0, r6
 81060ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81060f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81061c4 <_malloc_r+0xfc>
 81060f4:	f000 f868 	bl	81061c8 <__malloc_lock>
 81060f8:	f8d8 3000 	ldr.w	r3, [r8]
 81060fc:	461c      	mov	r4, r3
 81060fe:	bb5c      	cbnz	r4, 8106158 <_malloc_r+0x90>
 8106100:	4629      	mov	r1, r5
 8106102:	4638      	mov	r0, r7
 8106104:	f7ff ffc0 	bl	8106088 <sbrk_aligned>
 8106108:	1c43      	adds	r3, r0, #1
 810610a:	4604      	mov	r4, r0
 810610c:	d155      	bne.n	81061ba <_malloc_r+0xf2>
 810610e:	f8d8 4000 	ldr.w	r4, [r8]
 8106112:	4626      	mov	r6, r4
 8106114:	2e00      	cmp	r6, #0
 8106116:	d145      	bne.n	81061a4 <_malloc_r+0xdc>
 8106118:	2c00      	cmp	r4, #0
 810611a:	d048      	beq.n	81061ae <_malloc_r+0xe6>
 810611c:	6823      	ldr	r3, [r4, #0]
 810611e:	4631      	mov	r1, r6
 8106120:	4638      	mov	r0, r7
 8106122:	eb04 0903 	add.w	r9, r4, r3
 8106126:	f000 fb5d 	bl	81067e4 <_sbrk_r>
 810612a:	4581      	cmp	r9, r0
 810612c:	d13f      	bne.n	81061ae <_malloc_r+0xe6>
 810612e:	6821      	ldr	r1, [r4, #0]
 8106130:	1a6d      	subs	r5, r5, r1
 8106132:	4629      	mov	r1, r5
 8106134:	4638      	mov	r0, r7
 8106136:	f7ff ffa7 	bl	8106088 <sbrk_aligned>
 810613a:	3001      	adds	r0, #1
 810613c:	d037      	beq.n	81061ae <_malloc_r+0xe6>
 810613e:	6823      	ldr	r3, [r4, #0]
 8106140:	442b      	add	r3, r5
 8106142:	6023      	str	r3, [r4, #0]
 8106144:	f8d8 3000 	ldr.w	r3, [r8]
 8106148:	2b00      	cmp	r3, #0
 810614a:	d038      	beq.n	81061be <_malloc_r+0xf6>
 810614c:	685a      	ldr	r2, [r3, #4]
 810614e:	42a2      	cmp	r2, r4
 8106150:	d12b      	bne.n	81061aa <_malloc_r+0xe2>
 8106152:	2200      	movs	r2, #0
 8106154:	605a      	str	r2, [r3, #4]
 8106156:	e00f      	b.n	8106178 <_malloc_r+0xb0>
 8106158:	6822      	ldr	r2, [r4, #0]
 810615a:	1b52      	subs	r2, r2, r5
 810615c:	d41f      	bmi.n	810619e <_malloc_r+0xd6>
 810615e:	2a0b      	cmp	r2, #11
 8106160:	d917      	bls.n	8106192 <_malloc_r+0xca>
 8106162:	1961      	adds	r1, r4, r5
 8106164:	42a3      	cmp	r3, r4
 8106166:	6025      	str	r5, [r4, #0]
 8106168:	bf18      	it	ne
 810616a:	6059      	strne	r1, [r3, #4]
 810616c:	6863      	ldr	r3, [r4, #4]
 810616e:	bf08      	it	eq
 8106170:	f8c8 1000 	streq.w	r1, [r8]
 8106174:	5162      	str	r2, [r4, r5]
 8106176:	604b      	str	r3, [r1, #4]
 8106178:	4638      	mov	r0, r7
 810617a:	f104 060b 	add.w	r6, r4, #11
 810617e:	f000 f829 	bl	81061d4 <__malloc_unlock>
 8106182:	f026 0607 	bic.w	r6, r6, #7
 8106186:	1d23      	adds	r3, r4, #4
 8106188:	1af2      	subs	r2, r6, r3
 810618a:	d0ae      	beq.n	81060ea <_malloc_r+0x22>
 810618c:	1b9b      	subs	r3, r3, r6
 810618e:	50a3      	str	r3, [r4, r2]
 8106190:	e7ab      	b.n	81060ea <_malloc_r+0x22>
 8106192:	42a3      	cmp	r3, r4
 8106194:	6862      	ldr	r2, [r4, #4]
 8106196:	d1dd      	bne.n	8106154 <_malloc_r+0x8c>
 8106198:	f8c8 2000 	str.w	r2, [r8]
 810619c:	e7ec      	b.n	8106178 <_malloc_r+0xb0>
 810619e:	4623      	mov	r3, r4
 81061a0:	6864      	ldr	r4, [r4, #4]
 81061a2:	e7ac      	b.n	81060fe <_malloc_r+0x36>
 81061a4:	4634      	mov	r4, r6
 81061a6:	6876      	ldr	r6, [r6, #4]
 81061a8:	e7b4      	b.n	8106114 <_malloc_r+0x4c>
 81061aa:	4613      	mov	r3, r2
 81061ac:	e7cc      	b.n	8106148 <_malloc_r+0x80>
 81061ae:	230c      	movs	r3, #12
 81061b0:	603b      	str	r3, [r7, #0]
 81061b2:	4638      	mov	r0, r7
 81061b4:	f000 f80e 	bl	81061d4 <__malloc_unlock>
 81061b8:	e797      	b.n	81060ea <_malloc_r+0x22>
 81061ba:	6025      	str	r5, [r4, #0]
 81061bc:	e7dc      	b.n	8106178 <_malloc_r+0xb0>
 81061be:	605b      	str	r3, [r3, #4]
 81061c0:	deff      	udf	#255	; 0xff
 81061c2:	bf00      	nop
 81061c4:	10000464 	.word	0x10000464

081061c8 <__malloc_lock>:
 81061c8:	4801      	ldr	r0, [pc, #4]	; (81061d0 <__malloc_lock+0x8>)
 81061ca:	f7ff bf0f 	b.w	8105fec <__retarget_lock_acquire_recursive>
 81061ce:	bf00      	nop
 81061d0:	10000460 	.word	0x10000460

081061d4 <__malloc_unlock>:
 81061d4:	4801      	ldr	r0, [pc, #4]	; (81061dc <__malloc_unlock+0x8>)
 81061d6:	f7ff bf0a 	b.w	8105fee <__retarget_lock_release_recursive>
 81061da:	bf00      	nop
 81061dc:	10000460 	.word	0x10000460

081061e0 <__ssputs_r>:
 81061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81061e4:	688e      	ldr	r6, [r1, #8]
 81061e6:	461f      	mov	r7, r3
 81061e8:	42be      	cmp	r6, r7
 81061ea:	680b      	ldr	r3, [r1, #0]
 81061ec:	4682      	mov	sl, r0
 81061ee:	460c      	mov	r4, r1
 81061f0:	4690      	mov	r8, r2
 81061f2:	d82c      	bhi.n	810624e <__ssputs_r+0x6e>
 81061f4:	898a      	ldrh	r2, [r1, #12]
 81061f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 81061fa:	d026      	beq.n	810624a <__ssputs_r+0x6a>
 81061fc:	6965      	ldr	r5, [r4, #20]
 81061fe:	6909      	ldr	r1, [r1, #16]
 8106200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8106204:	eba3 0901 	sub.w	r9, r3, r1
 8106208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810620c:	1c7b      	adds	r3, r7, #1
 810620e:	444b      	add	r3, r9
 8106210:	106d      	asrs	r5, r5, #1
 8106212:	429d      	cmp	r5, r3
 8106214:	bf38      	it	cc
 8106216:	461d      	movcc	r5, r3
 8106218:	0553      	lsls	r3, r2, #21
 810621a:	d527      	bpl.n	810626c <__ssputs_r+0x8c>
 810621c:	4629      	mov	r1, r5
 810621e:	f7ff ff53 	bl	81060c8 <_malloc_r>
 8106222:	4606      	mov	r6, r0
 8106224:	b360      	cbz	r0, 8106280 <__ssputs_r+0xa0>
 8106226:	6921      	ldr	r1, [r4, #16]
 8106228:	464a      	mov	r2, r9
 810622a:	f000 faeb 	bl	8106804 <memcpy>
 810622e:	89a3      	ldrh	r3, [r4, #12]
 8106230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8106234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106238:	81a3      	strh	r3, [r4, #12]
 810623a:	6126      	str	r6, [r4, #16]
 810623c:	6165      	str	r5, [r4, #20]
 810623e:	444e      	add	r6, r9
 8106240:	eba5 0509 	sub.w	r5, r5, r9
 8106244:	6026      	str	r6, [r4, #0]
 8106246:	60a5      	str	r5, [r4, #8]
 8106248:	463e      	mov	r6, r7
 810624a:	42be      	cmp	r6, r7
 810624c:	d900      	bls.n	8106250 <__ssputs_r+0x70>
 810624e:	463e      	mov	r6, r7
 8106250:	6820      	ldr	r0, [r4, #0]
 8106252:	4632      	mov	r2, r6
 8106254:	4641      	mov	r1, r8
 8106256:	f000 faab 	bl	81067b0 <memmove>
 810625a:	68a3      	ldr	r3, [r4, #8]
 810625c:	1b9b      	subs	r3, r3, r6
 810625e:	60a3      	str	r3, [r4, #8]
 8106260:	6823      	ldr	r3, [r4, #0]
 8106262:	4433      	add	r3, r6
 8106264:	6023      	str	r3, [r4, #0]
 8106266:	2000      	movs	r0, #0
 8106268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810626c:	462a      	mov	r2, r5
 810626e:	f000 fad7 	bl	8106820 <_realloc_r>
 8106272:	4606      	mov	r6, r0
 8106274:	2800      	cmp	r0, #0
 8106276:	d1e0      	bne.n	810623a <__ssputs_r+0x5a>
 8106278:	6921      	ldr	r1, [r4, #16]
 810627a:	4650      	mov	r0, sl
 810627c:	f7ff feb8 	bl	8105ff0 <_free_r>
 8106280:	230c      	movs	r3, #12
 8106282:	f8ca 3000 	str.w	r3, [sl]
 8106286:	89a3      	ldrh	r3, [r4, #12]
 8106288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810628c:	81a3      	strh	r3, [r4, #12]
 810628e:	f04f 30ff 	mov.w	r0, #4294967295
 8106292:	e7e9      	b.n	8106268 <__ssputs_r+0x88>

08106294 <_svfiprintf_r>:
 8106294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106298:	4698      	mov	r8, r3
 810629a:	898b      	ldrh	r3, [r1, #12]
 810629c:	061b      	lsls	r3, r3, #24
 810629e:	b09d      	sub	sp, #116	; 0x74
 81062a0:	4607      	mov	r7, r0
 81062a2:	460d      	mov	r5, r1
 81062a4:	4614      	mov	r4, r2
 81062a6:	d50e      	bpl.n	81062c6 <_svfiprintf_r+0x32>
 81062a8:	690b      	ldr	r3, [r1, #16]
 81062aa:	b963      	cbnz	r3, 81062c6 <_svfiprintf_r+0x32>
 81062ac:	2140      	movs	r1, #64	; 0x40
 81062ae:	f7ff ff0b 	bl	81060c8 <_malloc_r>
 81062b2:	6028      	str	r0, [r5, #0]
 81062b4:	6128      	str	r0, [r5, #16]
 81062b6:	b920      	cbnz	r0, 81062c2 <_svfiprintf_r+0x2e>
 81062b8:	230c      	movs	r3, #12
 81062ba:	603b      	str	r3, [r7, #0]
 81062bc:	f04f 30ff 	mov.w	r0, #4294967295
 81062c0:	e0d0      	b.n	8106464 <_svfiprintf_r+0x1d0>
 81062c2:	2340      	movs	r3, #64	; 0x40
 81062c4:	616b      	str	r3, [r5, #20]
 81062c6:	2300      	movs	r3, #0
 81062c8:	9309      	str	r3, [sp, #36]	; 0x24
 81062ca:	2320      	movs	r3, #32
 81062cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81062d0:	f8cd 800c 	str.w	r8, [sp, #12]
 81062d4:	2330      	movs	r3, #48	; 0x30
 81062d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810647c <_svfiprintf_r+0x1e8>
 81062da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81062de:	f04f 0901 	mov.w	r9, #1
 81062e2:	4623      	mov	r3, r4
 81062e4:	469a      	mov	sl, r3
 81062e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81062ea:	b10a      	cbz	r2, 81062f0 <_svfiprintf_r+0x5c>
 81062ec:	2a25      	cmp	r2, #37	; 0x25
 81062ee:	d1f9      	bne.n	81062e4 <_svfiprintf_r+0x50>
 81062f0:	ebba 0b04 	subs.w	fp, sl, r4
 81062f4:	d00b      	beq.n	810630e <_svfiprintf_r+0x7a>
 81062f6:	465b      	mov	r3, fp
 81062f8:	4622      	mov	r2, r4
 81062fa:	4629      	mov	r1, r5
 81062fc:	4638      	mov	r0, r7
 81062fe:	f7ff ff6f 	bl	81061e0 <__ssputs_r>
 8106302:	3001      	adds	r0, #1
 8106304:	f000 80a9 	beq.w	810645a <_svfiprintf_r+0x1c6>
 8106308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810630a:	445a      	add	r2, fp
 810630c:	9209      	str	r2, [sp, #36]	; 0x24
 810630e:	f89a 3000 	ldrb.w	r3, [sl]
 8106312:	2b00      	cmp	r3, #0
 8106314:	f000 80a1 	beq.w	810645a <_svfiprintf_r+0x1c6>
 8106318:	2300      	movs	r3, #0
 810631a:	f04f 32ff 	mov.w	r2, #4294967295
 810631e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106322:	f10a 0a01 	add.w	sl, sl, #1
 8106326:	9304      	str	r3, [sp, #16]
 8106328:	9307      	str	r3, [sp, #28]
 810632a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810632e:	931a      	str	r3, [sp, #104]	; 0x68
 8106330:	4654      	mov	r4, sl
 8106332:	2205      	movs	r2, #5
 8106334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106338:	4850      	ldr	r0, [pc, #320]	; (810647c <_svfiprintf_r+0x1e8>)
 810633a:	f7f9 ffd9 	bl	81002f0 <memchr>
 810633e:	9a04      	ldr	r2, [sp, #16]
 8106340:	b9d8      	cbnz	r0, 810637a <_svfiprintf_r+0xe6>
 8106342:	06d0      	lsls	r0, r2, #27
 8106344:	bf44      	itt	mi
 8106346:	2320      	movmi	r3, #32
 8106348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810634c:	0711      	lsls	r1, r2, #28
 810634e:	bf44      	itt	mi
 8106350:	232b      	movmi	r3, #43	; 0x2b
 8106352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106356:	f89a 3000 	ldrb.w	r3, [sl]
 810635a:	2b2a      	cmp	r3, #42	; 0x2a
 810635c:	d015      	beq.n	810638a <_svfiprintf_r+0xf6>
 810635e:	9a07      	ldr	r2, [sp, #28]
 8106360:	4654      	mov	r4, sl
 8106362:	2000      	movs	r0, #0
 8106364:	f04f 0c0a 	mov.w	ip, #10
 8106368:	4621      	mov	r1, r4
 810636a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810636e:	3b30      	subs	r3, #48	; 0x30
 8106370:	2b09      	cmp	r3, #9
 8106372:	d94d      	bls.n	8106410 <_svfiprintf_r+0x17c>
 8106374:	b1b0      	cbz	r0, 81063a4 <_svfiprintf_r+0x110>
 8106376:	9207      	str	r2, [sp, #28]
 8106378:	e014      	b.n	81063a4 <_svfiprintf_r+0x110>
 810637a:	eba0 0308 	sub.w	r3, r0, r8
 810637e:	fa09 f303 	lsl.w	r3, r9, r3
 8106382:	4313      	orrs	r3, r2
 8106384:	9304      	str	r3, [sp, #16]
 8106386:	46a2      	mov	sl, r4
 8106388:	e7d2      	b.n	8106330 <_svfiprintf_r+0x9c>
 810638a:	9b03      	ldr	r3, [sp, #12]
 810638c:	1d19      	adds	r1, r3, #4
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	9103      	str	r1, [sp, #12]
 8106392:	2b00      	cmp	r3, #0
 8106394:	bfbb      	ittet	lt
 8106396:	425b      	neglt	r3, r3
 8106398:	f042 0202 	orrlt.w	r2, r2, #2
 810639c:	9307      	strge	r3, [sp, #28]
 810639e:	9307      	strlt	r3, [sp, #28]
 81063a0:	bfb8      	it	lt
 81063a2:	9204      	strlt	r2, [sp, #16]
 81063a4:	7823      	ldrb	r3, [r4, #0]
 81063a6:	2b2e      	cmp	r3, #46	; 0x2e
 81063a8:	d10c      	bne.n	81063c4 <_svfiprintf_r+0x130>
 81063aa:	7863      	ldrb	r3, [r4, #1]
 81063ac:	2b2a      	cmp	r3, #42	; 0x2a
 81063ae:	d134      	bne.n	810641a <_svfiprintf_r+0x186>
 81063b0:	9b03      	ldr	r3, [sp, #12]
 81063b2:	1d1a      	adds	r2, r3, #4
 81063b4:	681b      	ldr	r3, [r3, #0]
 81063b6:	9203      	str	r2, [sp, #12]
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	bfb8      	it	lt
 81063bc:	f04f 33ff 	movlt.w	r3, #4294967295
 81063c0:	3402      	adds	r4, #2
 81063c2:	9305      	str	r3, [sp, #20]
 81063c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810648c <_svfiprintf_r+0x1f8>
 81063c8:	7821      	ldrb	r1, [r4, #0]
 81063ca:	2203      	movs	r2, #3
 81063cc:	4650      	mov	r0, sl
 81063ce:	f7f9 ff8f 	bl	81002f0 <memchr>
 81063d2:	b138      	cbz	r0, 81063e4 <_svfiprintf_r+0x150>
 81063d4:	9b04      	ldr	r3, [sp, #16]
 81063d6:	eba0 000a 	sub.w	r0, r0, sl
 81063da:	2240      	movs	r2, #64	; 0x40
 81063dc:	4082      	lsls	r2, r0
 81063de:	4313      	orrs	r3, r2
 81063e0:	3401      	adds	r4, #1
 81063e2:	9304      	str	r3, [sp, #16]
 81063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81063e8:	4825      	ldr	r0, [pc, #148]	; (8106480 <_svfiprintf_r+0x1ec>)
 81063ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81063ee:	2206      	movs	r2, #6
 81063f0:	f7f9 ff7e 	bl	81002f0 <memchr>
 81063f4:	2800      	cmp	r0, #0
 81063f6:	d038      	beq.n	810646a <_svfiprintf_r+0x1d6>
 81063f8:	4b22      	ldr	r3, [pc, #136]	; (8106484 <_svfiprintf_r+0x1f0>)
 81063fa:	bb1b      	cbnz	r3, 8106444 <_svfiprintf_r+0x1b0>
 81063fc:	9b03      	ldr	r3, [sp, #12]
 81063fe:	3307      	adds	r3, #7
 8106400:	f023 0307 	bic.w	r3, r3, #7
 8106404:	3308      	adds	r3, #8
 8106406:	9303      	str	r3, [sp, #12]
 8106408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810640a:	4433      	add	r3, r6
 810640c:	9309      	str	r3, [sp, #36]	; 0x24
 810640e:	e768      	b.n	81062e2 <_svfiprintf_r+0x4e>
 8106410:	fb0c 3202 	mla	r2, ip, r2, r3
 8106414:	460c      	mov	r4, r1
 8106416:	2001      	movs	r0, #1
 8106418:	e7a6      	b.n	8106368 <_svfiprintf_r+0xd4>
 810641a:	2300      	movs	r3, #0
 810641c:	3401      	adds	r4, #1
 810641e:	9305      	str	r3, [sp, #20]
 8106420:	4619      	mov	r1, r3
 8106422:	f04f 0c0a 	mov.w	ip, #10
 8106426:	4620      	mov	r0, r4
 8106428:	f810 2b01 	ldrb.w	r2, [r0], #1
 810642c:	3a30      	subs	r2, #48	; 0x30
 810642e:	2a09      	cmp	r2, #9
 8106430:	d903      	bls.n	810643a <_svfiprintf_r+0x1a6>
 8106432:	2b00      	cmp	r3, #0
 8106434:	d0c6      	beq.n	81063c4 <_svfiprintf_r+0x130>
 8106436:	9105      	str	r1, [sp, #20]
 8106438:	e7c4      	b.n	81063c4 <_svfiprintf_r+0x130>
 810643a:	fb0c 2101 	mla	r1, ip, r1, r2
 810643e:	4604      	mov	r4, r0
 8106440:	2301      	movs	r3, #1
 8106442:	e7f0      	b.n	8106426 <_svfiprintf_r+0x192>
 8106444:	ab03      	add	r3, sp, #12
 8106446:	9300      	str	r3, [sp, #0]
 8106448:	462a      	mov	r2, r5
 810644a:	4b0f      	ldr	r3, [pc, #60]	; (8106488 <_svfiprintf_r+0x1f4>)
 810644c:	a904      	add	r1, sp, #16
 810644e:	4638      	mov	r0, r7
 8106450:	f3af 8000 	nop.w
 8106454:	1c42      	adds	r2, r0, #1
 8106456:	4606      	mov	r6, r0
 8106458:	d1d6      	bne.n	8106408 <_svfiprintf_r+0x174>
 810645a:	89ab      	ldrh	r3, [r5, #12]
 810645c:	065b      	lsls	r3, r3, #25
 810645e:	f53f af2d 	bmi.w	81062bc <_svfiprintf_r+0x28>
 8106462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8106464:	b01d      	add	sp, #116	; 0x74
 8106466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810646a:	ab03      	add	r3, sp, #12
 810646c:	9300      	str	r3, [sp, #0]
 810646e:	462a      	mov	r2, r5
 8106470:	4b05      	ldr	r3, [pc, #20]	; (8106488 <_svfiprintf_r+0x1f4>)
 8106472:	a904      	add	r1, sp, #16
 8106474:	4638      	mov	r0, r7
 8106476:	f000 f879 	bl	810656c <_printf_i>
 810647a:	e7eb      	b.n	8106454 <_svfiprintf_r+0x1c0>
 810647c:	08106900 	.word	0x08106900
 8106480:	0810690a 	.word	0x0810690a
 8106484:	00000000 	.word	0x00000000
 8106488:	081061e1 	.word	0x081061e1
 810648c:	08106906 	.word	0x08106906

08106490 <_printf_common>:
 8106490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106494:	4616      	mov	r6, r2
 8106496:	4699      	mov	r9, r3
 8106498:	688a      	ldr	r2, [r1, #8]
 810649a:	690b      	ldr	r3, [r1, #16]
 810649c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81064a0:	4293      	cmp	r3, r2
 81064a2:	bfb8      	it	lt
 81064a4:	4613      	movlt	r3, r2
 81064a6:	6033      	str	r3, [r6, #0]
 81064a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81064ac:	4607      	mov	r7, r0
 81064ae:	460c      	mov	r4, r1
 81064b0:	b10a      	cbz	r2, 81064b6 <_printf_common+0x26>
 81064b2:	3301      	adds	r3, #1
 81064b4:	6033      	str	r3, [r6, #0]
 81064b6:	6823      	ldr	r3, [r4, #0]
 81064b8:	0699      	lsls	r1, r3, #26
 81064ba:	bf42      	ittt	mi
 81064bc:	6833      	ldrmi	r3, [r6, #0]
 81064be:	3302      	addmi	r3, #2
 81064c0:	6033      	strmi	r3, [r6, #0]
 81064c2:	6825      	ldr	r5, [r4, #0]
 81064c4:	f015 0506 	ands.w	r5, r5, #6
 81064c8:	d106      	bne.n	81064d8 <_printf_common+0x48>
 81064ca:	f104 0a19 	add.w	sl, r4, #25
 81064ce:	68e3      	ldr	r3, [r4, #12]
 81064d0:	6832      	ldr	r2, [r6, #0]
 81064d2:	1a9b      	subs	r3, r3, r2
 81064d4:	42ab      	cmp	r3, r5
 81064d6:	dc26      	bgt.n	8106526 <_printf_common+0x96>
 81064d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81064dc:	1e13      	subs	r3, r2, #0
 81064de:	6822      	ldr	r2, [r4, #0]
 81064e0:	bf18      	it	ne
 81064e2:	2301      	movne	r3, #1
 81064e4:	0692      	lsls	r2, r2, #26
 81064e6:	d42b      	bmi.n	8106540 <_printf_common+0xb0>
 81064e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81064ec:	4649      	mov	r1, r9
 81064ee:	4638      	mov	r0, r7
 81064f0:	47c0      	blx	r8
 81064f2:	3001      	adds	r0, #1
 81064f4:	d01e      	beq.n	8106534 <_printf_common+0xa4>
 81064f6:	6823      	ldr	r3, [r4, #0]
 81064f8:	6922      	ldr	r2, [r4, #16]
 81064fa:	f003 0306 	and.w	r3, r3, #6
 81064fe:	2b04      	cmp	r3, #4
 8106500:	bf02      	ittt	eq
 8106502:	68e5      	ldreq	r5, [r4, #12]
 8106504:	6833      	ldreq	r3, [r6, #0]
 8106506:	1aed      	subeq	r5, r5, r3
 8106508:	68a3      	ldr	r3, [r4, #8]
 810650a:	bf0c      	ite	eq
 810650c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106510:	2500      	movne	r5, #0
 8106512:	4293      	cmp	r3, r2
 8106514:	bfc4      	itt	gt
 8106516:	1a9b      	subgt	r3, r3, r2
 8106518:	18ed      	addgt	r5, r5, r3
 810651a:	2600      	movs	r6, #0
 810651c:	341a      	adds	r4, #26
 810651e:	42b5      	cmp	r5, r6
 8106520:	d11a      	bne.n	8106558 <_printf_common+0xc8>
 8106522:	2000      	movs	r0, #0
 8106524:	e008      	b.n	8106538 <_printf_common+0xa8>
 8106526:	2301      	movs	r3, #1
 8106528:	4652      	mov	r2, sl
 810652a:	4649      	mov	r1, r9
 810652c:	4638      	mov	r0, r7
 810652e:	47c0      	blx	r8
 8106530:	3001      	adds	r0, #1
 8106532:	d103      	bne.n	810653c <_printf_common+0xac>
 8106534:	f04f 30ff 	mov.w	r0, #4294967295
 8106538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810653c:	3501      	adds	r5, #1
 810653e:	e7c6      	b.n	81064ce <_printf_common+0x3e>
 8106540:	18e1      	adds	r1, r4, r3
 8106542:	1c5a      	adds	r2, r3, #1
 8106544:	2030      	movs	r0, #48	; 0x30
 8106546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810654a:	4422      	add	r2, r4
 810654c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106554:	3302      	adds	r3, #2
 8106556:	e7c7      	b.n	81064e8 <_printf_common+0x58>
 8106558:	2301      	movs	r3, #1
 810655a:	4622      	mov	r2, r4
 810655c:	4649      	mov	r1, r9
 810655e:	4638      	mov	r0, r7
 8106560:	47c0      	blx	r8
 8106562:	3001      	adds	r0, #1
 8106564:	d0e6      	beq.n	8106534 <_printf_common+0xa4>
 8106566:	3601      	adds	r6, #1
 8106568:	e7d9      	b.n	810651e <_printf_common+0x8e>
	...

0810656c <_printf_i>:
 810656c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106570:	7e0f      	ldrb	r7, [r1, #24]
 8106572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106574:	2f78      	cmp	r7, #120	; 0x78
 8106576:	4691      	mov	r9, r2
 8106578:	4680      	mov	r8, r0
 810657a:	460c      	mov	r4, r1
 810657c:	469a      	mov	sl, r3
 810657e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8106582:	d807      	bhi.n	8106594 <_printf_i+0x28>
 8106584:	2f62      	cmp	r7, #98	; 0x62
 8106586:	d80a      	bhi.n	810659e <_printf_i+0x32>
 8106588:	2f00      	cmp	r7, #0
 810658a:	f000 80d4 	beq.w	8106736 <_printf_i+0x1ca>
 810658e:	2f58      	cmp	r7, #88	; 0x58
 8106590:	f000 80c0 	beq.w	8106714 <_printf_i+0x1a8>
 8106594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810659c:	e03a      	b.n	8106614 <_printf_i+0xa8>
 810659e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81065a2:	2b15      	cmp	r3, #21
 81065a4:	d8f6      	bhi.n	8106594 <_printf_i+0x28>
 81065a6:	a101      	add	r1, pc, #4	; (adr r1, 81065ac <_printf_i+0x40>)
 81065a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81065ac:	08106605 	.word	0x08106605
 81065b0:	08106619 	.word	0x08106619
 81065b4:	08106595 	.word	0x08106595
 81065b8:	08106595 	.word	0x08106595
 81065bc:	08106595 	.word	0x08106595
 81065c0:	08106595 	.word	0x08106595
 81065c4:	08106619 	.word	0x08106619
 81065c8:	08106595 	.word	0x08106595
 81065cc:	08106595 	.word	0x08106595
 81065d0:	08106595 	.word	0x08106595
 81065d4:	08106595 	.word	0x08106595
 81065d8:	0810671d 	.word	0x0810671d
 81065dc:	08106645 	.word	0x08106645
 81065e0:	081066d7 	.word	0x081066d7
 81065e4:	08106595 	.word	0x08106595
 81065e8:	08106595 	.word	0x08106595
 81065ec:	0810673f 	.word	0x0810673f
 81065f0:	08106595 	.word	0x08106595
 81065f4:	08106645 	.word	0x08106645
 81065f8:	08106595 	.word	0x08106595
 81065fc:	08106595 	.word	0x08106595
 8106600:	081066df 	.word	0x081066df
 8106604:	682b      	ldr	r3, [r5, #0]
 8106606:	1d1a      	adds	r2, r3, #4
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	602a      	str	r2, [r5, #0]
 810660c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106614:	2301      	movs	r3, #1
 8106616:	e09f      	b.n	8106758 <_printf_i+0x1ec>
 8106618:	6820      	ldr	r0, [r4, #0]
 810661a:	682b      	ldr	r3, [r5, #0]
 810661c:	0607      	lsls	r7, r0, #24
 810661e:	f103 0104 	add.w	r1, r3, #4
 8106622:	6029      	str	r1, [r5, #0]
 8106624:	d501      	bpl.n	810662a <_printf_i+0xbe>
 8106626:	681e      	ldr	r6, [r3, #0]
 8106628:	e003      	b.n	8106632 <_printf_i+0xc6>
 810662a:	0646      	lsls	r6, r0, #25
 810662c:	d5fb      	bpl.n	8106626 <_printf_i+0xba>
 810662e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8106632:	2e00      	cmp	r6, #0
 8106634:	da03      	bge.n	810663e <_printf_i+0xd2>
 8106636:	232d      	movs	r3, #45	; 0x2d
 8106638:	4276      	negs	r6, r6
 810663a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810663e:	485a      	ldr	r0, [pc, #360]	; (81067a8 <_printf_i+0x23c>)
 8106640:	230a      	movs	r3, #10
 8106642:	e012      	b.n	810666a <_printf_i+0xfe>
 8106644:	682b      	ldr	r3, [r5, #0]
 8106646:	6820      	ldr	r0, [r4, #0]
 8106648:	1d19      	adds	r1, r3, #4
 810664a:	6029      	str	r1, [r5, #0]
 810664c:	0605      	lsls	r5, r0, #24
 810664e:	d501      	bpl.n	8106654 <_printf_i+0xe8>
 8106650:	681e      	ldr	r6, [r3, #0]
 8106652:	e002      	b.n	810665a <_printf_i+0xee>
 8106654:	0641      	lsls	r1, r0, #25
 8106656:	d5fb      	bpl.n	8106650 <_printf_i+0xe4>
 8106658:	881e      	ldrh	r6, [r3, #0]
 810665a:	4853      	ldr	r0, [pc, #332]	; (81067a8 <_printf_i+0x23c>)
 810665c:	2f6f      	cmp	r7, #111	; 0x6f
 810665e:	bf0c      	ite	eq
 8106660:	2308      	moveq	r3, #8
 8106662:	230a      	movne	r3, #10
 8106664:	2100      	movs	r1, #0
 8106666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810666a:	6865      	ldr	r5, [r4, #4]
 810666c:	60a5      	str	r5, [r4, #8]
 810666e:	2d00      	cmp	r5, #0
 8106670:	bfa2      	ittt	ge
 8106672:	6821      	ldrge	r1, [r4, #0]
 8106674:	f021 0104 	bicge.w	r1, r1, #4
 8106678:	6021      	strge	r1, [r4, #0]
 810667a:	b90e      	cbnz	r6, 8106680 <_printf_i+0x114>
 810667c:	2d00      	cmp	r5, #0
 810667e:	d04b      	beq.n	8106718 <_printf_i+0x1ac>
 8106680:	4615      	mov	r5, r2
 8106682:	fbb6 f1f3 	udiv	r1, r6, r3
 8106686:	fb03 6711 	mls	r7, r3, r1, r6
 810668a:	5dc7      	ldrb	r7, [r0, r7]
 810668c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106690:	4637      	mov	r7, r6
 8106692:	42bb      	cmp	r3, r7
 8106694:	460e      	mov	r6, r1
 8106696:	d9f4      	bls.n	8106682 <_printf_i+0x116>
 8106698:	2b08      	cmp	r3, #8
 810669a:	d10b      	bne.n	81066b4 <_printf_i+0x148>
 810669c:	6823      	ldr	r3, [r4, #0]
 810669e:	07de      	lsls	r6, r3, #31
 81066a0:	d508      	bpl.n	81066b4 <_printf_i+0x148>
 81066a2:	6923      	ldr	r3, [r4, #16]
 81066a4:	6861      	ldr	r1, [r4, #4]
 81066a6:	4299      	cmp	r1, r3
 81066a8:	bfde      	ittt	le
 81066aa:	2330      	movle	r3, #48	; 0x30
 81066ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 81066b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 81066b4:	1b52      	subs	r2, r2, r5
 81066b6:	6122      	str	r2, [r4, #16]
 81066b8:	f8cd a000 	str.w	sl, [sp]
 81066bc:	464b      	mov	r3, r9
 81066be:	aa03      	add	r2, sp, #12
 81066c0:	4621      	mov	r1, r4
 81066c2:	4640      	mov	r0, r8
 81066c4:	f7ff fee4 	bl	8106490 <_printf_common>
 81066c8:	3001      	adds	r0, #1
 81066ca:	d14a      	bne.n	8106762 <_printf_i+0x1f6>
 81066cc:	f04f 30ff 	mov.w	r0, #4294967295
 81066d0:	b004      	add	sp, #16
 81066d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81066d6:	6823      	ldr	r3, [r4, #0]
 81066d8:	f043 0320 	orr.w	r3, r3, #32
 81066dc:	6023      	str	r3, [r4, #0]
 81066de:	4833      	ldr	r0, [pc, #204]	; (81067ac <_printf_i+0x240>)
 81066e0:	2778      	movs	r7, #120	; 0x78
 81066e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81066e6:	6823      	ldr	r3, [r4, #0]
 81066e8:	6829      	ldr	r1, [r5, #0]
 81066ea:	061f      	lsls	r7, r3, #24
 81066ec:	f851 6b04 	ldr.w	r6, [r1], #4
 81066f0:	d402      	bmi.n	81066f8 <_printf_i+0x18c>
 81066f2:	065f      	lsls	r7, r3, #25
 81066f4:	bf48      	it	mi
 81066f6:	b2b6      	uxthmi	r6, r6
 81066f8:	07df      	lsls	r7, r3, #31
 81066fa:	bf48      	it	mi
 81066fc:	f043 0320 	orrmi.w	r3, r3, #32
 8106700:	6029      	str	r1, [r5, #0]
 8106702:	bf48      	it	mi
 8106704:	6023      	strmi	r3, [r4, #0]
 8106706:	b91e      	cbnz	r6, 8106710 <_printf_i+0x1a4>
 8106708:	6823      	ldr	r3, [r4, #0]
 810670a:	f023 0320 	bic.w	r3, r3, #32
 810670e:	6023      	str	r3, [r4, #0]
 8106710:	2310      	movs	r3, #16
 8106712:	e7a7      	b.n	8106664 <_printf_i+0xf8>
 8106714:	4824      	ldr	r0, [pc, #144]	; (81067a8 <_printf_i+0x23c>)
 8106716:	e7e4      	b.n	81066e2 <_printf_i+0x176>
 8106718:	4615      	mov	r5, r2
 810671a:	e7bd      	b.n	8106698 <_printf_i+0x12c>
 810671c:	682b      	ldr	r3, [r5, #0]
 810671e:	6826      	ldr	r6, [r4, #0]
 8106720:	6961      	ldr	r1, [r4, #20]
 8106722:	1d18      	adds	r0, r3, #4
 8106724:	6028      	str	r0, [r5, #0]
 8106726:	0635      	lsls	r5, r6, #24
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	d501      	bpl.n	8106730 <_printf_i+0x1c4>
 810672c:	6019      	str	r1, [r3, #0]
 810672e:	e002      	b.n	8106736 <_printf_i+0x1ca>
 8106730:	0670      	lsls	r0, r6, #25
 8106732:	d5fb      	bpl.n	810672c <_printf_i+0x1c0>
 8106734:	8019      	strh	r1, [r3, #0]
 8106736:	2300      	movs	r3, #0
 8106738:	6123      	str	r3, [r4, #16]
 810673a:	4615      	mov	r5, r2
 810673c:	e7bc      	b.n	81066b8 <_printf_i+0x14c>
 810673e:	682b      	ldr	r3, [r5, #0]
 8106740:	1d1a      	adds	r2, r3, #4
 8106742:	602a      	str	r2, [r5, #0]
 8106744:	681d      	ldr	r5, [r3, #0]
 8106746:	6862      	ldr	r2, [r4, #4]
 8106748:	2100      	movs	r1, #0
 810674a:	4628      	mov	r0, r5
 810674c:	f7f9 fdd0 	bl	81002f0 <memchr>
 8106750:	b108      	cbz	r0, 8106756 <_printf_i+0x1ea>
 8106752:	1b40      	subs	r0, r0, r5
 8106754:	6060      	str	r0, [r4, #4]
 8106756:	6863      	ldr	r3, [r4, #4]
 8106758:	6123      	str	r3, [r4, #16]
 810675a:	2300      	movs	r3, #0
 810675c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106760:	e7aa      	b.n	81066b8 <_printf_i+0x14c>
 8106762:	6923      	ldr	r3, [r4, #16]
 8106764:	462a      	mov	r2, r5
 8106766:	4649      	mov	r1, r9
 8106768:	4640      	mov	r0, r8
 810676a:	47d0      	blx	sl
 810676c:	3001      	adds	r0, #1
 810676e:	d0ad      	beq.n	81066cc <_printf_i+0x160>
 8106770:	6823      	ldr	r3, [r4, #0]
 8106772:	079b      	lsls	r3, r3, #30
 8106774:	d413      	bmi.n	810679e <_printf_i+0x232>
 8106776:	68e0      	ldr	r0, [r4, #12]
 8106778:	9b03      	ldr	r3, [sp, #12]
 810677a:	4298      	cmp	r0, r3
 810677c:	bfb8      	it	lt
 810677e:	4618      	movlt	r0, r3
 8106780:	e7a6      	b.n	81066d0 <_printf_i+0x164>
 8106782:	2301      	movs	r3, #1
 8106784:	4632      	mov	r2, r6
 8106786:	4649      	mov	r1, r9
 8106788:	4640      	mov	r0, r8
 810678a:	47d0      	blx	sl
 810678c:	3001      	adds	r0, #1
 810678e:	d09d      	beq.n	81066cc <_printf_i+0x160>
 8106790:	3501      	adds	r5, #1
 8106792:	68e3      	ldr	r3, [r4, #12]
 8106794:	9903      	ldr	r1, [sp, #12]
 8106796:	1a5b      	subs	r3, r3, r1
 8106798:	42ab      	cmp	r3, r5
 810679a:	dcf2      	bgt.n	8106782 <_printf_i+0x216>
 810679c:	e7eb      	b.n	8106776 <_printf_i+0x20a>
 810679e:	2500      	movs	r5, #0
 81067a0:	f104 0619 	add.w	r6, r4, #25
 81067a4:	e7f5      	b.n	8106792 <_printf_i+0x226>
 81067a6:	bf00      	nop
 81067a8:	08106911 	.word	0x08106911
 81067ac:	08106922 	.word	0x08106922

081067b0 <memmove>:
 81067b0:	4288      	cmp	r0, r1
 81067b2:	b510      	push	{r4, lr}
 81067b4:	eb01 0402 	add.w	r4, r1, r2
 81067b8:	d902      	bls.n	81067c0 <memmove+0x10>
 81067ba:	4284      	cmp	r4, r0
 81067bc:	4623      	mov	r3, r4
 81067be:	d807      	bhi.n	81067d0 <memmove+0x20>
 81067c0:	1e43      	subs	r3, r0, #1
 81067c2:	42a1      	cmp	r1, r4
 81067c4:	d008      	beq.n	81067d8 <memmove+0x28>
 81067c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 81067ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 81067ce:	e7f8      	b.n	81067c2 <memmove+0x12>
 81067d0:	4402      	add	r2, r0
 81067d2:	4601      	mov	r1, r0
 81067d4:	428a      	cmp	r2, r1
 81067d6:	d100      	bne.n	81067da <memmove+0x2a>
 81067d8:	bd10      	pop	{r4, pc}
 81067da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81067de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81067e2:	e7f7      	b.n	81067d4 <memmove+0x24>

081067e4 <_sbrk_r>:
 81067e4:	b538      	push	{r3, r4, r5, lr}
 81067e6:	4d06      	ldr	r5, [pc, #24]	; (8106800 <_sbrk_r+0x1c>)
 81067e8:	2300      	movs	r3, #0
 81067ea:	4604      	mov	r4, r0
 81067ec:	4608      	mov	r0, r1
 81067ee:	602b      	str	r3, [r5, #0]
 81067f0:	f7fa f8de 	bl	81009b0 <_sbrk>
 81067f4:	1c43      	adds	r3, r0, #1
 81067f6:	d102      	bne.n	81067fe <_sbrk_r+0x1a>
 81067f8:	682b      	ldr	r3, [r5, #0]
 81067fa:	b103      	cbz	r3, 81067fe <_sbrk_r+0x1a>
 81067fc:	6023      	str	r3, [r4, #0]
 81067fe:	bd38      	pop	{r3, r4, r5, pc}
 8106800:	1000045c 	.word	0x1000045c

08106804 <memcpy>:
 8106804:	440a      	add	r2, r1
 8106806:	4291      	cmp	r1, r2
 8106808:	f100 33ff 	add.w	r3, r0, #4294967295
 810680c:	d100      	bne.n	8106810 <memcpy+0xc>
 810680e:	4770      	bx	lr
 8106810:	b510      	push	{r4, lr}
 8106812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106816:	f803 4f01 	strb.w	r4, [r3, #1]!
 810681a:	4291      	cmp	r1, r2
 810681c:	d1f9      	bne.n	8106812 <memcpy+0xe>
 810681e:	bd10      	pop	{r4, pc}

08106820 <_realloc_r>:
 8106820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106824:	4680      	mov	r8, r0
 8106826:	4614      	mov	r4, r2
 8106828:	460e      	mov	r6, r1
 810682a:	b921      	cbnz	r1, 8106836 <_realloc_r+0x16>
 810682c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106830:	4611      	mov	r1, r2
 8106832:	f7ff bc49 	b.w	81060c8 <_malloc_r>
 8106836:	b92a      	cbnz	r2, 8106844 <_realloc_r+0x24>
 8106838:	f7ff fbda 	bl	8105ff0 <_free_r>
 810683c:	4625      	mov	r5, r4
 810683e:	4628      	mov	r0, r5
 8106840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106844:	f000 f81b 	bl	810687e <_malloc_usable_size_r>
 8106848:	4284      	cmp	r4, r0
 810684a:	4607      	mov	r7, r0
 810684c:	d802      	bhi.n	8106854 <_realloc_r+0x34>
 810684e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8106852:	d812      	bhi.n	810687a <_realloc_r+0x5a>
 8106854:	4621      	mov	r1, r4
 8106856:	4640      	mov	r0, r8
 8106858:	f7ff fc36 	bl	81060c8 <_malloc_r>
 810685c:	4605      	mov	r5, r0
 810685e:	2800      	cmp	r0, #0
 8106860:	d0ed      	beq.n	810683e <_realloc_r+0x1e>
 8106862:	42bc      	cmp	r4, r7
 8106864:	4622      	mov	r2, r4
 8106866:	4631      	mov	r1, r6
 8106868:	bf28      	it	cs
 810686a:	463a      	movcs	r2, r7
 810686c:	f7ff ffca 	bl	8106804 <memcpy>
 8106870:	4631      	mov	r1, r6
 8106872:	4640      	mov	r0, r8
 8106874:	f7ff fbbc 	bl	8105ff0 <_free_r>
 8106878:	e7e1      	b.n	810683e <_realloc_r+0x1e>
 810687a:	4635      	mov	r5, r6
 810687c:	e7df      	b.n	810683e <_realloc_r+0x1e>

0810687e <_malloc_usable_size_r>:
 810687e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106882:	1f18      	subs	r0, r3, #4
 8106884:	2b00      	cmp	r3, #0
 8106886:	bfbc      	itt	lt
 8106888:	580b      	ldrlt	r3, [r1, r0]
 810688a:	18c0      	addlt	r0, r0, r3
 810688c:	4770      	bx	lr
	...

08106890 <_init>:
 8106890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106892:	bf00      	nop
 8106894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106896:	bc08      	pop	{r3}
 8106898:	469e      	mov	lr, r3
 810689a:	4770      	bx	lr

0810689c <_fini>:
 810689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810689e:	bf00      	nop
 81068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81068a2:	bc08      	pop	{r3}
 81068a4:	469e      	mov	lr, r3
 81068a6:	4770      	bx	lr
