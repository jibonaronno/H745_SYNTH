
H745_SYNTH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006930  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c0c  08006c0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c14  08006c14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  24000010  08006c2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400068c  08006c2c  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c336  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003144  00000000  00000000  0003c3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001168  00000000  00000000  00040b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003da88  00000000  00000000  00041ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cdac  00000000  00000000  0007f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a0ed2  00000000  00000000  0009c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006054  00000000  00000000  0023d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00243404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006bb0 	.word	0x08006bb0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006bb0 	.word	0x08006bb0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <main+0xbc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 faa1 	bl	8000c70 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fca3 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f849 	bl	80007c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <main+0xbc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <main+0xbc>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <main+0xbc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 ffe5 	bl	8001724 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fffb 	bl	8001758 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <main+0xbc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa73 	bl	8000c70 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa1b 	bl	8000bc4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078e:	f000 f9e7 	bl	8000b60 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f999 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000796:	f000 f8fb 	bl	8000990 <MX_TIM3_Init>
  MX_TIM4_Init();
 800079a:	f000 f947 	bl	8000a2c <MX_TIM4_Init>
  MX_RTC_Init();
 800079e:	f000 f891 	bl	80008c4 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a6:	f000 fcf9 	bl	800119c <HAL_Delay>
	  HAL_UART_Transmit(&huart3, "ADC0 : \n", 7, 10000);
 80007aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80007ae:	2207      	movs	r2, #7
 80007b0:	4903      	ldr	r1, [pc, #12]	; (80007c0 <main+0xc0>)
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <main+0xc4>)
 80007b4:	f004 fdb2 	bl	800531c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80007b8:	e7f3      	b.n	80007a2 <main+0xa2>
 80007ba:	bf00      	nop
 80007bc:	58024400 	.word	0x58024400
 80007c0:	08006bc8 	.word	0x08006bc8
 80007c4:	240000e8 	.word	0x240000e8

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09c      	sub	sp, #112	; 0x70
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	224c      	movs	r2, #76	; 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 f9be 	bl	8006b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f006 f9b8 	bl	8006b58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e8:	2004      	movs	r0, #4
 80007ea:	f001 f911 	bl	8001a10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <SystemClock_Config+0xf4>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	4a31      	ldr	r2, [pc, #196]	; (80008bc <SystemClock_Config+0xf4>)
 80007f8:	f023 0301 	bic.w	r3, r3, #1
 80007fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <SystemClock_Config+0xf4>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <SystemClock_Config+0xf8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <SystemClock_Config+0xf8>)
 8000812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <SystemClock_Config+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000824:	bf00      	nop
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <SystemClock_Config+0xf8>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000832:	d1f8      	bne.n	8000826 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000834:	2309      	movs	r3, #9
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000838:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800083e:	2301      	movs	r3, #1
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	2302      	movs	r3, #2
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800084e:	233c      	movs	r3, #60	; 0x3c
 8000850:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085e:	230c      	movs	r3, #12
 8000860:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000862:	2300      	movs	r3, #0
 8000864:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f938 	bl	8001ae4 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800087a:	f000 f9f9 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	; 0x3f
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000892:	2350      	movs	r3, #80	; 0x50
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fd77 	bl	8002398 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80008b0:	f000 f9de 	bl	8000c70 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	; 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024800 	.word	0x58024800

080008c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_RTC_Init+0xc4>)
 80008de:	4a2b      	ldr	r2, [pc, #172]	; (800098c <MX_RTC_Init+0xc8>)
 80008e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_RTC_Init+0xc4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_RTC_Init+0xc4>)
 80008ea:	227f      	movs	r2, #127	; 0x7f
 80008ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_RTC_Init+0xc4>)
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <MX_RTC_Init+0xc4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_RTC_Init+0xc4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_RTC_Init+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_RTC_Init+0xc4>)
 8000908:	2202      	movs	r2, #2
 800090a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800090c:	481e      	ldr	r0, [pc, #120]	; (8000988 <MX_RTC_Init+0xc4>)
 800090e:	f003 fefb 	bl	8004708 <HAL_RTC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f9aa 	bl	8000c70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800091c:	2300      	movs	r3, #0
 800091e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000920:	2300      	movs	r3, #0
 8000922:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000924:	2300      	movs	r3, #0
 8000926:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2201      	movs	r2, #1
 8000934:	4619      	mov	r1, r3
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MX_RTC_Init+0xc4>)
 8000938:	f003 ff68 	bl	800480c <HAL_RTC_SetTime>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000942:	f000 f995 	bl	8000c70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000946:	2301      	movs	r3, #1
 8000948:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800094a:	2301      	movs	r3, #1
 800094c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800094e:	2301      	movs	r3, #1
 8000950:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <MX_RTC_Init+0xc4>)
 800095e:	f003 fff3 	bl	8004948 <HAL_RTC_SetDate>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000968:	f000 f982 	bl	8000c70 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800096c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_RTC_Init+0xc4>)
 8000972:	f004 f927 	bl	8004bc4 <HAL_RTCEx_SetCalibrationOutPut>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800097c:	f000 f978 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2400002c 	.word	0x2400002c
 800098c:	58004000 	.word	0x58004000

08000990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <MX_TIM3_Init+0x98>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d2:	4814      	ldr	r0, [pc, #80]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009d4:	f004 f93d 	bl	8004c52 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f947 	bl	8000c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_TIM3_Init+0x94>)
 80009f0:	f004 f986 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 f939 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009fe:	2320      	movs	r3, #32
 8000a00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_TIM3_Init+0x94>)
 8000a0c:	f004 fba8 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a16:	f000 f92b 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000050 	.word	0x24000050
 8000a28:	40000400 	.word	0x40000400

08000a2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <MX_TIM4_Init+0x98>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a52:	2206      	movs	r2, #6
 8000a54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a5e:	2210      	movs	r2, #16
 8000a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a70:	f004 f8ef 	bl	8004c52 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 f8f9 	bl	8000c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000a8c:	f004 f938 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 f8eb 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_TIM4_Init+0x94>)
 8000aa8:	f004 fb5a 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ab2:	f000 f8dd 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2400009c 	.word	0x2400009c
 8000ac4:	40000800 	.word	0x40000800

08000ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <MX_USART3_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b12:	f004 fbb3 	bl	800527c <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f8a8 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b24:	f005 fc43 	bl	80063ae <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 f89f 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b36:	f005 fc78 	bl	800642a <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 f896 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USART3_UART_Init+0x90>)
 8000b46:	f005 fbf9 	bl	800633c <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f88e 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	240000e8 	.word	0x240000e8
 8000b5c:	40004800 	.word	0x40004800

08000b60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6c:	2209      	movs	r2, #9
 8000b6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba8:	f000 fdea 	bl	8001780 <HAL_PCD_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bb2:	f000 f85d 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2400017c 	.word	0x2400017c
 8000bc0:	40080000 	.word	0x40080000

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_GPIO_Init+0xa8>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	58024400 	.word	0x58024400

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_MspInit+0x30>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x30>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x30>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	58024400 	.word	0x58024400

08000cb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0ba      	sub	sp, #232	; 0xe8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	22c0      	movs	r2, #192	; 0xc0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 ff41 	bl	8006b58 <memset>
  if(hrtc->Instance==RTC)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <HAL_RTC_MspInit+0xb4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d13d      	bne.n	8000d5c <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ce0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fed9 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8000d04:	f7ff ffb4 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_RTC_MspInit+0xb8>)
 8000d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <HAL_RTC_MspInit+0xb8>)
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_RTC_MspInit+0xb8>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <HAL_RTC_MspInit+0xb8>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_RTC_MspInit+0xb8>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d32:	2304      	movs	r3, #4
 8000d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_RTC_MspInit+0xbc>)
 8000d58:	f000 fb34 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	37e8      	adds	r7, #232	; 0xe8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58004000 	.word	0x58004000
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020400 	.word	0x58020400

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10f      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000da0:	e013      	b.n	8000dca <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM4)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_TIM_Base_MspInit+0x70>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d10e      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40000400 	.word	0x40000400
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	40000800 	.word	0x40000800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0ba      	sub	sp, #232	; 0xe8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	22c0      	movs	r2, #192	; 0xc0
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fea7 	bl	8006b58 <memset>
  if(huart->Instance==USART3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_UART_MspInit+0xc8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d146      	bne.n	8000ea2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e14:	f04f 0202 	mov.w	r2, #2
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fe40 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e36:	f7ff ff1b 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_UART_MspInit+0xcc>)
 8000e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_UART_MspInit+0xcc>)
 8000e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0xcc>)
 8000e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0xcc>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0xcc>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0xcc>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_MspInit+0xd0>)
 8000e9e:	f000 fa91 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	37e8      	adds	r7, #232	; 0xe8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58020c00 	.word	0x58020c00

08000eb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ba      	sub	sp, #232	; 0xe8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	22c0      	movs	r2, #192	; 0xc0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f005 fe3d 	bl	8006b58 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_PCD_MspInit+0x10c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d169      	bne.n	8000fbc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ee8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000f00:	2303      	movs	r3, #3
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000f0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fdc5 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f2c:	f7ff fea0 	bl	8000c70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f30:	f000 fdc8 	bl	8001ac4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f52:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4814      	ldr	r0, [pc, #80]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f7a:	f000 fa23 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f9a:	f000 fa13 	bl	80013c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000faa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37e8      	adds	r7, #232	; 0xe8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40080000 	.word	0x40080000
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020000 	.word	0x58020000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f89e 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001028:	f7ff fad4 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f005 fd89 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fb53 	bl	8000700 <main>
  bx  lr
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001060:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001064:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001068:	08006c1c 	.word	0x08006c1c
  ldr r2, =_sbss
 800106c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001070:	2400068c 	.word	0x2400068c

08001074 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC3_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f96e 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001084:	f001 fb3e 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8001088:	4602      	mov	r2, r0
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	4913      	ldr	r1, [pc, #76]	; (80010e4 <HAL_Init+0x6c>)
 8001096:	5ccb      	ldrb	r3, [r1, r3]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_Init+0x68>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_Init+0x6c>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <HAL_Init+0x70>)
 80010ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_Init+0x74>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f814 	bl	80010f0 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e002      	b.n	80010d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010d2:	f7ff fdd3 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400
 80010e4:	08006bd4 	.word	0x08006bd4
 80010e8:	24000004 	.word	0x24000004
 80010ec:	24000000 	.word	0x24000000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_InitTick+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e021      	b.n	8001148 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_InitTick+0x64>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f945 	bl	80013aa <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f91d 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x68>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2400000c 	.word	0x2400000c
 8001154:	24000000 	.word	0x24000000
 8001158:	24000008 	.word	0x24000008

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2400000c 	.word	0x2400000c
 8001180:	24000688 	.word	0x24000688

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	24000688 	.word	0x24000688

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2400000c 	.word	0x2400000c

080011e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetREVID+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1b      	lsrs	r3, r3, #16
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	5c001000 	.word	0x5c001000

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	4313      	orrs	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	05fa0000 	.word	0x05fa0000

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff47 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff5e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffb2 	bl	800131c <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013d2:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <HAL_GPIO_Init+0x234>)
 80013d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013d6:	e194      	b.n	8001702 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8186 	beq.w	80016fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <HAL_GPIO_Init+0x44>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d017      	beq.n	80014a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80e0 	beq.w	80016fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x238>)
 800153e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001542:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <HAL_GPIO_Init+0x238>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_GPIO_Init+0x238>)
 800154e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_GPIO_Init+0x23c>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <HAL_GPIO_Init+0x240>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d052      	beq.n	800162c <HAL_GPIO_Init+0x268>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_GPIO_Init+0x244>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d031      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_GPIO_Init+0x248>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d02b      	beq.n	80015ee <HAL_GPIO_Init+0x22a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_GPIO_Init+0x24c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d025      	beq.n	80015ea <HAL_GPIO_Init+0x226>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_GPIO_Init+0x250>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01f      	beq.n	80015e6 <HAL_GPIO_Init+0x222>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_GPIO_Init+0x254>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d019      	beq.n	80015e2 <HAL_GPIO_Init+0x21e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_GPIO_Init+0x258>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x21a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_GPIO_Init+0x25c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x216>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_GPIO_Init+0x260>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x212>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_GPIO_Init+0x264>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x20e>
 80015ce:	2309      	movs	r3, #9
 80015d0:	e02d      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015d2:	230a      	movs	r3, #10
 80015d4:	e02b      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e029      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015da:	2307      	movs	r3, #7
 80015dc:	e027      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015de:	2306      	movs	r3, #6
 80015e0:	e025      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e023      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e021      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e01f      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e01d      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e01b      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015f6:	bf00      	nop
 80015f8:	58000080 	.word	0x58000080
 80015fc:	58024400 	.word	0x58024400
 8001600:	58000400 	.word	0x58000400
 8001604:	58020000 	.word	0x58020000
 8001608:	58020400 	.word	0x58020400
 800160c:	58020800 	.word	0x58020800
 8001610:	58020c00 	.word	0x58020c00
 8001614:	58021000 	.word	0x58021000
 8001618:	58021400 	.word	0x58021400
 800161c:	58021800 	.word	0x58021800
 8001620:	58021c00 	.word	0x58021c00
 8001624:	58022000 	.word	0x58022000
 8001628:	58022400 	.word	0x58022400
 800162c:	2300      	movs	r3, #0
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4938      	ldr	r1, [pc, #224]	; (8001720 <HAL_GPIO_Init+0x35c>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f ae63 	bne.w	80013d8 <HAL_GPIO_Init+0x14>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800172c:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_HSEM_FastTake+0x2c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3320      	adds	r3, #32
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_HSEM_FastTake+0x30>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	58026400 	.word	0x58026400
 8001754:	80000300 	.word	0x80000300

08001758 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001762:	4906      	ldr	r1, [pc, #24]	; (800177c <HAL_HSEM_Release+0x24>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	58026400 	.word	0x58026400

08001780 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b08f      	sub	sp, #60	; 0x3c
 8001784:	af0a      	add	r7, sp, #40	; 0x28
 8001786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e116      	b.n	80019c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fb83 	bl	8000eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2203      	movs	r2, #3
 80017b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 ff25 	bl	8006620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	687e      	ldr	r6, [r7, #4]
 80017de:	466d      	mov	r5, sp
 80017e0:	f106 0410 	add.w	r4, r6, #16
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f4:	1d33      	adds	r3, r6, #4
 80017f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f004 fea3 	bl	8006544 <USB_CoreInit>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0d7      	b.n	80019c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f004 ff13 	bl	8006642 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e04a      	b.n	80018b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	333d      	adds	r3, #61	; 0x3d
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	333c      	adds	r3, #60	; 0x3c
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	b298      	uxth	r0, r3
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3356      	adds	r3, #86	; 0x56
 800185e:	4602      	mov	r2, r0
 8001860:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3340      	adds	r3, #64	; 0x40
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3344      	adds	r3, #68	; 0x44
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3348      	adds	r3, #72	; 0x48
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	334c      	adds	r3, #76	; 0x4c
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	3301      	adds	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d3af      	bcc.n	8001822 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e044      	b.n	8001952 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3b5      	bcc.n	80018c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	687e      	ldr	r6, [r7, #4]
 8001964:	466d      	mov	r5, sp
 8001966:	f106 0410 	add.w	r4, r6, #16
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001976:	e885 0003 	stmia.w	r5, {r0, r1}
 800197a:	1d33      	adds	r3, r6, #4
 800197c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f004 feac 	bl	80066dc <USB_DevInit>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e014      	b.n	80019c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f80a 	bl	80019c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 f86a 	bl	8006a92 <USB_DevDisconnect>

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_PCDEx_ActivateLPM+0x44>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	10000003 	.word	0x10000003

08001a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d00a      	beq.n	8001a3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e040      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e03e      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a42:	491f      	ldr	r1, [pc, #124]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a4a:	f7ff fb9b 	bl	8001184 <HAL_GetTick>
 8001a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a50:	e009      	b.n	8001a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a52:	f7ff fb97 	bl	8001184 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a60:	d901      	bls.n	8001a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e028      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a72:	d1ee      	bne.n	8001a52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b1e      	cmp	r3, #30
 8001a78:	d008      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a7e:	d005      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b1d      	cmp	r3, #29
 8001a84:	d002      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b2d      	cmp	r3, #45	; 0x2d
 8001a8a:	d114      	bne.n	8001ab6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a8c:	f7ff fb7a 	bl	8001184 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a92:	e009      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a94:	f7ff fb76 	bl	8001184 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	d901      	bls.n	8001aa8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58024800 	.word	0x58024800

08001ac4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	58024800 	.word	0x58024800

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f000 bc48 	b.w	8002388 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8088 	beq.w	8001c16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b06:	4b99      	ldr	r3, [pc, #612]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b10:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d007      	beq.n	8001b2c <HAL_RCC_OscConfig+0x48>
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	2b18      	cmp	r3, #24
 8001b20:	d111      	bne.n	8001b46 <HAL_RCC_OscConfig+0x62>
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d06d      	beq.n	8001c14 <HAL_RCC_OscConfig+0x130>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d169      	bne.n	8001c14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f000 bc21 	b.w	8002388 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x7a>
 8001b50:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x9c>
 8001b66:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a80      	ldr	r2, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7d      	ldr	r2, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd8>
 8001ba4:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a70      	ldr	r2, [pc, #448]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6d      	ldr	r2, [pc, #436]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fade 	bl	8001184 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fada 	bl	8001184 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e3d4      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff faca 	bl	8001184 <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fac6 	bl	8001184 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e3c0      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c06:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x110>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80ca 	beq.w	8001db8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c24:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c2e:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_RCC_OscConfig+0x166>
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d156      	bne.n	8001cee <HAL_RCC_OscConfig+0x20a>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d151      	bne.n	8001cee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4a:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e392      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0219 	bic.w	r2, r3, #25
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	493f      	ldr	r1, [pc, #252]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fa86 	bl	8001184 <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fa82 	bl	8001184 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e37c      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	f7ff faa3 	bl	80011e4 <HAL_GetREVID>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d817      	bhi.n	8001cd8 <HAL_RCC_OscConfig+0x1f4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b40      	cmp	r3, #64	; 0x40
 8001cae:	d108      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc0:	e07a      	b.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	031b      	lsls	r3, r3, #12
 8001cd0:	4926      	ldr	r1, [pc, #152]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd6:	e06f      	b.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	4921      	ldr	r1, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	e064      	b.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d047      	beq.n	8001d86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0219 	bic.w	r2, r3, #25
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	491a      	ldr	r1, [pc, #104]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fa3c 	bl	8001184 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fa38 	bl	8001184 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e332      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	f7ff fa59 	bl	80011e4 <HAL_GetREVID>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d819      	bhi.n	8001d70 <HAL_RCC_OscConfig+0x28c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d108      	bne.n	8001d56 <HAL_RCC_OscConfig+0x272>
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	6053      	str	r3, [r2, #4]
 8001d54:	e030      	b.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	4901      	ldr	r1, [pc, #4]	; (8001d6c <HAL_RCC_OscConfig+0x288>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e025      	b.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	4b9a      	ldr	r3, [pc, #616]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	4997      	ldr	r1, [pc, #604]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	e018      	b.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b95      	ldr	r3, [pc, #596]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff f9f7 	bl	8001184 <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f9f3 	bl	8001184 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e2ed      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dac:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a9 	beq.w	8001f18 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d007      	beq.n	8001dec <HAL_RCC_OscConfig+0x308>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b18      	cmp	r3, #24
 8001de0:	d13a      	bne.n	8001e58 <HAL_RCC_OscConfig+0x374>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d135      	bne.n	8001e58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x320>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e2c1      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e04:	f7ff f9ee 	bl	80011e4 <HAL_GetREVID>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d817      	bhi.n	8001e42 <HAL_RCC_OscConfig+0x35e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x348>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e22:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e2a:	e075      	b.n	8001f18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e2c:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	069b      	lsls	r3, r3, #26
 8001e3a:	4968      	ldr	r1, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e40:	e06a      	b.n	8001f18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e42:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	061b      	lsls	r3, r3, #24
 8001e50:	4962      	ldr	r1, [pc, #392]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e56:	e05f      	b.n	8001f18 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d042      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e60:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f98a 	bl	8001184 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e74:	f7ff f986 	bl	8001184 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e280      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e86:	4b55      	ldr	r3, [pc, #340]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e92:	f7ff f9a7 	bl	80011e4 <HAL_GetREVID>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d817      	bhi.n	8001ed0 <HAL_RCC_OscConfig+0x3ec>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d108      	bne.n	8001eba <HAL_RCC_OscConfig+0x3d6>
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eb6:	6053      	str	r3, [r2, #4]
 8001eb8:	e02e      	b.n	8001f18 <HAL_RCC_OscConfig+0x434>
 8001eba:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	4944      	ldr	r1, [pc, #272]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
 8001ece:	e023      	b.n	8001f18 <HAL_RCC_OscConfig+0x434>
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	061b      	lsls	r3, r3, #24
 8001ede:	493f      	ldr	r1, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
 8001ee4:	e018      	b.n	8001f18 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff f947 	bl	8001184 <HAL_GetTick>
 8001ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001efa:	f7ff f943 	bl	8001184 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e23d      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d036      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d019      	beq.n	8001f60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	4a2a      	ldr	r2, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f924 	bl	8001184 <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff f920 	bl	8001184 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e21a      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x45c>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f64:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f90a 	bl	8001184 <HAL_GetTick>
 8001f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff f906 	bl	8001184 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e200      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d039      	beq.n	8002012 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f8e7 	bl	8001184 <HAL_GetTick>
 8001fb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fba:	f7ff f8e3 	bl	8001184 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1dd      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_OscConfig+0x4f8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x4d6>
 8001fd8:	e01b      	b.n	8002012 <HAL_RCC_OscConfig+0x52e>
 8001fda:	bf00      	nop
 8001fdc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fe0:	4b9b      	ldr	r3, [pc, #620]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a9a      	ldr	r2, [pc, #616]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fec:	f7ff f8ca 	bl	8001184 <HAL_GetTick>
 8001ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff4:	f7ff f8c6 	bl	8001184 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1c0      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002006:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8081 	beq.w	8002122 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002020:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0x770>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a8b      	ldr	r2, [pc, #556]	; (8002254 <HAL_RCC_OscConfig+0x770>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800202c:	f7ff f8aa 	bl	8001184 <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7ff f8a6 	bl	8001184 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1a0      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002046:	4b83      	ldr	r3, [pc, #524]	; (8002254 <HAL_RCC_OscConfig+0x770>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d106      	bne.n	8002068 <HAL_RCC_OscConfig+0x584>
 800205a:	4b7d      	ldr	r3, [pc, #500]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a7c      	ldr	r2, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
 8002066:	e02d      	b.n	80020c4 <HAL_RCC_OscConfig+0x5e0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10c      	bne.n	800208a <HAL_RCC_OscConfig+0x5a6>
 8002070:	4b77      	ldr	r3, [pc, #476]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a76      	ldr	r2, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	4b74      	ldr	r3, [pc, #464]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a73      	ldr	r2, [pc, #460]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	e01c      	b.n	80020c4 <HAL_RCC_OscConfig+0x5e0>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c8>
 8002092:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0x5e0>
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a67      	ldr	r2, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a64      	ldr	r2, [pc, #400]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f85a 	bl	8001184 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff f856 	bl	8001184 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e14e      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ee      	beq.n	80020d4 <HAL_RCC_OscConfig+0x5f0>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f844 	bl	8001184 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f840 	bl	8001184 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e138      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002116:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ee      	bne.n	8002100 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 812d 	beq.w	8002386 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800212c:	4b48      	ldr	r3, [pc, #288]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002134:	2b18      	cmp	r3, #24
 8002136:	f000 80bd 	beq.w	80022b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b02      	cmp	r3, #2
 8002140:	f040 809e 	bne.w	8002280 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f818 	bl	8001184 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f814 	bl	8001184 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e10e      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x774>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	430a      	orrs	r2, r1
 800218a:	4931      	ldr	r1, [pc, #196]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800218c:	4313      	orrs	r3, r2
 800218e:	628b      	str	r3, [r1, #40]	; 0x28
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	3b01      	subs	r3, #1
 8002196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	3b01      	subs	r3, #1
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	3b01      	subs	r3, #1
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80021c0:	4923      	ldr	r1, [pc, #140]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_RCC_OscConfig+0x778>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021de:	00d2      	lsls	r2, r2, #3
 80021e0:	491b      	ldr	r1, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f023 020c 	bic.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4917      	ldr	r1, [pc, #92]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f023 0202 	bic.w	r2, r3, #2
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	4912      	ldr	r1, [pc, #72]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCC_OscConfig+0x76c>)
 8002240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe ff9d 	bl	8001184 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800224c:	e011      	b.n	8002272 <HAL_RCC_OscConfig+0x78e>
 800224e:	bf00      	nop
 8002250:	58024400 	.word	0x58024400
 8002254:	58024800 	.word	0x58024800
 8002258:	fffffc0c 	.word	0xfffffc0c
 800225c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe ff90 	bl	8001184 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e08a      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x77c>
 800227e:	e082      	b.n	8002386 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe ff7a 	bl	8001184 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe ff76 	bl	8001184 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e070      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a6:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x7b0>
 80022b2:	e068      	b.n	8002386 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d031      	beq.n	800232c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0203 	and.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d12a      	bne.n	800232c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d122      	bne.n	800232c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0a5b      	lsrs	r3, r3, #9
 80022fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d111      	bne.n	800232c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d108      	bne.n	800232c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0e1b      	lsrs	r3, r3, #24
 800231e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e02b      	b.n	8002388 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800233a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d01f      	beq.n	8002386 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002352:	f7fe ff17 	bl	8001184 <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002358:	bf00      	nop
 800235a:	f7fe ff13 	bl	8001184 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	4293      	cmp	r3, r2
 8002364:	d0f9      	beq.n	800235a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_OscConfig+0x8b0>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002372:	00d2      	lsls	r2, r2, #3
 8002374:	4906      	ldr	r1, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002376:	4313      	orrs	r3, r2
 8002378:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_RCC_OscConfig+0x8ac>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	58024400 	.word	0x58024400
 8002394:	ffff0007 	.word	0xffff0007

08002398 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e19c      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b87      	ldr	r3, [pc, #540]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	4985      	ldr	r1, [pc, #532]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b83      	ldr	r3, [pc, #524]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e184      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	4b7b      	ldr	r3, [pc, #492]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d908      	bls.n	800240a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023f8:	4b78      	ldr	r3, [pc, #480]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	4975      	ldr	r1, [pc, #468]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002406:	4313      	orrs	r3, r2
 8002408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002422:	429a      	cmp	r2, r3
 8002424:	d908      	bls.n	8002438 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002426:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	496a      	ldr	r1, [pc, #424]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002434:	4313      	orrs	r3, r2
 8002436:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002450:	429a      	cmp	r2, r3
 8002452:	d908      	bls.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002454:	4b61      	ldr	r3, [pc, #388]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	495e      	ldr	r1, [pc, #376]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002462:	4313      	orrs	r3, r2
 8002464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69da      	ldr	r2, [r3, #28]
 8002476:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800247e:	429a      	cmp	r2, r3
 8002480:	d908      	bls.n	8002494 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4953      	ldr	r1, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002490:	4313      	orrs	r3, r2
 8002492:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d908      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f023 020f 	bic.w	r2, r3, #15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4947      	ldr	r1, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d055      	beq.n	800257a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4940      	ldr	r1, [pc, #256]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e8:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d121      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0f6      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d115      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0ea      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0de      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002528:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d6      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f023 0207 	bic.w	r2, r3, #7
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4925      	ldr	r1, [pc, #148]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002546:	4313      	orrs	r3, r2
 8002548:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254a:	f7fe fe1b 	bl	8001184 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	e00a      	b.n	8002568 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002552:	f7fe fe17 	bl	8001184 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0be      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	429a      	cmp	r2, r3
 8002578:	d1eb      	bne.n	8002552 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	429a      	cmp	r2, r3
 8002594:	d208      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f023 020f 	bic.w	r2, r3, #15
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d214      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	4906      	ldr	r1, [pc, #24]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e086      	b.n	80026e6 <HAL_RCC_ClockConfig+0x34e>
 80025d8:	52002000 	.word	0x52002000
 80025dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d208      	bcs.n	800260e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025fc:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4939      	ldr	r1, [pc, #228]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 800260a:	4313      	orrs	r3, r2
 800260c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002626:	429a      	cmp	r2, r3
 8002628:	d208      	bcs.n	800263c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	492e      	ldr	r1, [pc, #184]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 8002638:	4313      	orrs	r3, r2
 800263a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d010      	beq.n	800266a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002654:	429a      	cmp	r2, r3
 8002656:	d208      	bcs.n	800266a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4922      	ldr	r1, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 8002666:	4313      	orrs	r3, r2
 8002668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002682:	429a      	cmp	r2, r3
 8002684:	d208      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4917      	ldr	r1, [pc, #92]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 8002694:	4313      	orrs	r3, r2
 8002696:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002698:	f000 f834 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	4912      	ldr	r1, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x35c>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x358>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_RCC_ClockConfig+0x35c>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x360>)
 80026ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x364>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x368>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fd08 	bl	80010f0 <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
 80026e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	58024400 	.word	0x58024400
 80026f4:	08006bd4 	.word	0x08006bd4
 80026f8:	24000004 	.word	0x24000004
 80026fc:	24000000 	.word	0x24000000
 8002700:	24000008 	.word	0x24000008

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270a:	4bb3      	ldr	r3, [pc, #716]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002712:	2b18      	cmp	r3, #24
 8002714:	f200 8155 	bhi.w	80029c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <HAL_RCC_GetSysClockFreq+0x1c>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002785 	.word	0x08002785
 8002724:	080029c3 	.word	0x080029c3
 8002728:	080029c3 	.word	0x080029c3
 800272c:	080029c3 	.word	0x080029c3
 8002730:	080029c3 	.word	0x080029c3
 8002734:	080029c3 	.word	0x080029c3
 8002738:	080029c3 	.word	0x080029c3
 800273c:	080029c3 	.word	0x080029c3
 8002740:	080027ab 	.word	0x080027ab
 8002744:	080029c3 	.word	0x080029c3
 8002748:	080029c3 	.word	0x080029c3
 800274c:	080029c3 	.word	0x080029c3
 8002750:	080029c3 	.word	0x080029c3
 8002754:	080029c3 	.word	0x080029c3
 8002758:	080029c3 	.word	0x080029c3
 800275c:	080029c3 	.word	0x080029c3
 8002760:	080027b1 	.word	0x080027b1
 8002764:	080029c3 	.word	0x080029c3
 8002768:	080029c3 	.word	0x080029c3
 800276c:	080029c3 	.word	0x080029c3
 8002770:	080029c3 	.word	0x080029c3
 8002774:	080029c3 	.word	0x080029c3
 8002778:	080029c3 	.word	0x080029c3
 800277c:	080029c3 	.word	0x080029c3
 8002780:	080027b7 	.word	0x080027b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002784:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d009      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002790:	4b91      	ldr	r3, [pc, #580]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	08db      	lsrs	r3, r3, #3
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	4a90      	ldr	r2, [pc, #576]	; (80029dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027a2:	e111      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027a4:	4b8d      	ldr	r3, [pc, #564]	; (80029dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027a6:	61bb      	str	r3, [r7, #24]
      break;
 80027a8:	e10e      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027aa:	4b8d      	ldr	r3, [pc, #564]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027ac:	61bb      	str	r3, [r7, #24]
      break;
 80027ae:	e10b      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80027b0:	4b8c      	ldr	r3, [pc, #560]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027b2:	61bb      	str	r3, [r7, #24]
      break;
 80027b4:	e108      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027b6:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027c0:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027cc:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027d6:	4b80      	ldr	r3, [pc, #512]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	08db      	lsrs	r3, r3, #3
 80027dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80e1 	beq.w	80029bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	f000 8083 	beq.w	8002908 <HAL_RCC_GetSysClockFreq+0x204>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b02      	cmp	r3, #2
 8002806:	f200 80a1 	bhi.w	800294c <HAL_RCC_GetSysClockFreq+0x248>
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x114>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d056      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002816:	e099      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002818:	4b6f      	ldr	r3, [pc, #444]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02d      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002824:	4b6c      	ldr	r3, [pc, #432]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	4a6b      	ldr	r2, [pc, #428]	; (80029dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800284e:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800285e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002862:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800286a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800286e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800287e:	e087      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800288e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028c2:	e065      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002906:	e043      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800292a:	ed97 6a02 	vldr	s12, [r7, #8]
 800292e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800293a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800293e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800294a:	e021      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002956:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800295a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800296e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002972:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800297a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800297e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800298e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	0a5b      	lsrs	r3, r3, #9
 8002996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800299a:	3301      	adds	r3, #1
 800299c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80029ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b4:	ee17 3a90 	vmov	r3, s15
 80029b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80029ba:	e005      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
      break;
 80029c0:	e002      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029c4:	61bb      	str	r3, [r7, #24]
      break;
 80029c6:	bf00      	nop
  }

  return sysclockfreq;
 80029c8:	69bb      	ldr	r3, [r7, #24]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	03d09000 	.word	0x03d09000
 80029e0:	003d0900 	.word	0x003d0900
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	46000000 	.word	0x46000000
 80029ec:	4c742400 	.word	0x4c742400
 80029f0:	4a742400 	.word	0x4a742400
 80029f4:	4af42400 	.word	0x4af42400

080029f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029fe:	f7ff fe81 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490f      	ldr	r1, [pc, #60]	; (8002a4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	08006bd4 	.word	0x08006bd4
 8002a50:	24000004 	.word	0x24000004
 8002a54:	24000000 	.word	0x24000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a5c:	f7ff ffcc 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4904      	ldr	r1, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	08006bd4 	.word	0x08006bd4

08002a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a88:	f7ff ffb6 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	08006bd4 	.word	0x08006bd4

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b0ca      	sub	sp, #296	; 0x128
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	ea54 0305 	orrs.w	r3, r4, r5
 8002ada:	d049      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ae6:	d02f      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002aec:	d828      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af2:	d01a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af8:	d822      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b02:	d007      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b04:	e01c      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b06:	4bb8      	ldr	r3, [pc, #736]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4ab7      	ldr	r2, [pc, #732]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b12:	e01a      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	3308      	adds	r3, #8
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fc8f 	bl	8004440 <RCCEx_PLL2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b28:	e00f      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2e:	3328      	adds	r3, #40	; 0x28
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 fd36 	bl	80045a4 <RCCEx_PLL3_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b3e:	e004      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b46:	e000      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b52:	4ba5      	ldr	r3, [pc, #660]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b60:	4aa1      	ldr	r2, [pc, #644]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6513      	str	r3, [r2, #80]	; 0x50
 8002b66:	e003      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002b7c:	f04f 0900 	mov.w	r9, #0
 8002b80:	ea58 0309 	orrs.w	r3, r8, r9
 8002b84:	d047      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d82a      	bhi.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bad 	.word	0x08002bad
 8002b9c:	08002bbb 	.word	0x08002bbb
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002bef 	.word	0x08002bef
 8002ba8:	08002bef 	.word	0x08002bef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bac:	4b8e      	ldr	r3, [pc, #568]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4a8d      	ldr	r2, [pc, #564]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb8:	e01a      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fc3c 	bl	8004440 <RCCEx_PLL2_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bce:	e00f      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd4:	3328      	adds	r3, #40	; 0x28
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 fce3 	bl	80045a4 <RCCEx_PLL3_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be4:	e004      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bec:	e000      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bf8:	4b7b      	ldr	r3, [pc, #492]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfc:	f023 0107 	bic.w	r1, r3, #7
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	4a78      	ldr	r2, [pc, #480]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c0c:	e003      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002c22:	f04f 0b00 	mov.w	fp, #0
 8002c26:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c2a:	d04c      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c36:	d030      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3c:	d829      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c40:	d02d      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c42:	2bc0      	cmp	r3, #192	; 0xc0
 8002c44:	d825      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d018      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d821      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d007      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c56:	e01c      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	4a62      	ldr	r2, [pc, #392]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fbe6 	bl	8004440 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c7a:	e011      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c80:	3328      	adds	r3, #40	; 0x28
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fc8d 	bl	80045a4 <RCCEx_PLL3_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c90:	e006      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6513      	str	r3, [r2, #80]	; 0x50
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002cd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002cdc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	d053      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf2:	d035      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002cf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf8:	d82e      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002cfa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002cfe:	d031      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d04:	d828      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d0a:	d01a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d10:	d822      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1a:	d007      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d30:	3308      	adds	r3, #8
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 fb83 	bl	8004440 <RCCEx_PLL2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d40:	e011      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d46:	3328      	adds	r3, #40	; 0x28
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fc2a 	bl	80045a4 <RCCEx_PLL3_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d56:	e006      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6593      	str	r3, [r2, #88]	; 0x58
 8002d84:	e003      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002d9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002da4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002da8:	460b      	mov	r3, r1
 8002daa:	4313      	orrs	r3, r2
 8002dac:	d056      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dba:	d038      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc0:	d831      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dc6:	d034      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002dc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dcc:	d82b      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd2:	d01d      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd8:	d825      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002dde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002de4:	e01f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dec:	4ba2      	ldr	r3, [pc, #648]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4aa1      	ldr	r2, [pc, #644]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002df8:	e01c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfe:	3308      	adds	r3, #8
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fb1c 	bl	8004440 <RCCEx_PLL2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e14:	3328      	adds	r3, #40	; 0x28
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 fbc3 	bl	80045a4 <RCCEx_PLL3_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e24:	e006      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e2c:	e002      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e3c:	4b8e      	ldr	r3, [pc, #568]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e4c:	4a8a      	ldr	r2, [pc, #552]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
 8002e52:	e003      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002e72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002e76:	460b      	mov	r3, r1
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	d03a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	2b30      	cmp	r3, #48	; 0x30
 8002e84:	d01f      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002e86:	2b30      	cmp	r3, #48	; 0x30
 8002e88:	d819      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d815      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d019      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d111      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	4a76      	ldr	r2, [pc, #472]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eac:	3308      	adds	r3, #8
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fac5 	bl	8004440 <RCCEx_PLL2_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ebc:	e006      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	4a65      	ldr	r2, [pc, #404]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002efe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	d051      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f1c:	d035      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f22:	d82e      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f28:	d031      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f2e:	d828      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f34:	d01a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	d822      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d007      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f46:	e01c      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4a4a      	ldr	r2, [pc, #296]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f54:	e01c      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 fa6e 	bl	8004440 <RCCEx_PLL2_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f6a:	e011      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f70:	3328      	adds	r3, #40	; 0x28
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fb15 	bl	80045a4 <RCCEx_PLL3_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f80:	e006      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f98:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6513      	str	r3, [r2, #80]	; 0x50
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002fcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	d056      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d033      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002fe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe6:	d82c      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fec:	d02f      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff2:	d826      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff8:	d02b      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002ffa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ffe:	d820      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003004:	d012      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800300a:	d81a      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d022      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d115      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301a:	3308      	adds	r3, #8
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f001 fa0e 	bl	8004440 <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800302a:	e015      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003030:	3328      	adds	r3, #40	; 0x28
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f001 fab5 	bl	80045a4 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003040:	e00a      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800304a:	bf00      	nop
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003064:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800306c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306e:	4a02      	ldr	r2, [pc, #8]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003070:	430b      	orrs	r3, r1
 8003072:	6513      	str	r3, [r2, #80]	; 0x50
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003076:	bf00      	nop
 8003078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800309a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800309e:	460b      	mov	r3, r1
 80030a0:	4313      	orrs	r3, r2
 80030a2:	d055      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b0:	d033      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b6:	d82c      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d02f      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d826      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030c8:	d02b      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030ce:	d820      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d4:	d012      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80030d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030da:	d81a      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d022      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80030e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e4:	d115      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ea:	3308      	adds	r3, #8
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 f9a6 	bl	8004440 <RCCEx_PLL2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80030fa:	e015      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003100:	3328      	adds	r3, #40	; 0x28
 8003102:	2101      	movs	r1, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fa4d 	bl	80045a4 <RCCEx_PLL3_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003110:	e00a      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003130:	4ba3      	ldr	r3, [pc, #652]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003140:	4a9f      	ldr	r2, [pc, #636]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003142:	430b      	orrs	r3, r1
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
 8003146:	e003      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800314c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800315c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800316a:	460b      	mov	r3, r1
 800316c:	4313      	orrs	r3, r2
 800316e:	d037      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317a:	d00e      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003180:	d816      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800318a:	d111      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318c:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a8b      	ldr	r2, [pc, #556]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003198:	e00f      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319e:	3308      	adds	r3, #8
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f94c 	bl	8004440 <RCCEx_PLL2_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031ae:	e004      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031c2:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80031ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a7b      	ldr	r2, [pc, #492]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d2:	430b      	orrs	r3, r1
 80031d4:	6513      	str	r3, [r2, #80]	; 0x50
 80031d6:	e003      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80031ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4313      	orrs	r3, r2
 80031fe:	d039      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	2b03      	cmp	r3, #3
 8003208:	d81c      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	0800324d 	.word	0x0800324d
 8003214:	08003221 	.word	0x08003221
 8003218:	0800322f 	.word	0x0800322f
 800321c:	0800324d 	.word	0x0800324d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003220:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a66      	ldr	r2, [pc, #408]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800322c:	e00f      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003232:	3308      	adds	r3, #8
 8003234:	2102      	movs	r1, #2
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f902 	bl	8004440 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003256:	4b5a      	ldr	r3, [pc, #360]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	f023 0103 	bic.w	r1, r3, #3
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	4a56      	ldr	r2, [pc, #344]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003266:	430b      	orrs	r3, r1
 8003268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326a:	e003      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800328a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800328e:	460b      	mov	r3, r1
 8003290:	4313      	orrs	r3, r2
 8003292:	f000 809f 	beq.w	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003296:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a2:	f7fd ff6f 	bl	8001184 <HAL_GetTick>
 80032a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032aa:	e00b      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fd ff6a 	bl	8001184 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d903      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c4:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ed      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80032d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d179      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032d8:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032e4:	4053      	eors	r3, r2
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a2d      	ldr	r2, [pc, #180]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800330c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003312:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d118      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fd ff2c 	bl	8001184 <HAL_GetTick>
 800332c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003330:	e00d      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fd ff27 	bl	8001184 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800333c:	1ad2      	subs	r2, r2, r3
 800333e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003342:	429a      	cmp	r2, r3
 8003344:	d903      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800334c:	e005      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800334e:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0eb      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800335a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800335e:	2b00      	cmp	r3, #0
 8003360:	d129      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003372:	d10e      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003384:	091a      	lsrs	r2, r3, #4
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003388:	4013      	ands	r3, r2
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800338c:	430b      	orrs	r3, r1
 800338e:	6113      	str	r3, [r2, #16]
 8003390:	e005      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800339c:	6113      	str	r3, [r2, #16]
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ae:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	e00e      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80033be:	e009      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033c0:	58024400 	.word	0x58024400
 80033c4:	58024800 	.word	0x58024800
 80033c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f002 0301 	and.w	r3, r2, #1
 80033e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f000 8089 	beq.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fc:	2b28      	cmp	r3, #40	; 0x28
 80033fe:	d86b      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	080034e1 	.word	0x080034e1
 800340c:	080034d9 	.word	0x080034d9
 8003410:	080034d9 	.word	0x080034d9
 8003414:	080034d9 	.word	0x080034d9
 8003418:	080034d9 	.word	0x080034d9
 800341c:	080034d9 	.word	0x080034d9
 8003420:	080034d9 	.word	0x080034d9
 8003424:	080034d9 	.word	0x080034d9
 8003428:	080034ad 	.word	0x080034ad
 800342c:	080034d9 	.word	0x080034d9
 8003430:	080034d9 	.word	0x080034d9
 8003434:	080034d9 	.word	0x080034d9
 8003438:	080034d9 	.word	0x080034d9
 800343c:	080034d9 	.word	0x080034d9
 8003440:	080034d9 	.word	0x080034d9
 8003444:	080034d9 	.word	0x080034d9
 8003448:	080034c3 	.word	0x080034c3
 800344c:	080034d9 	.word	0x080034d9
 8003450:	080034d9 	.word	0x080034d9
 8003454:	080034d9 	.word	0x080034d9
 8003458:	080034d9 	.word	0x080034d9
 800345c:	080034d9 	.word	0x080034d9
 8003460:	080034d9 	.word	0x080034d9
 8003464:	080034d9 	.word	0x080034d9
 8003468:	080034e1 	.word	0x080034e1
 800346c:	080034d9 	.word	0x080034d9
 8003470:	080034d9 	.word	0x080034d9
 8003474:	080034d9 	.word	0x080034d9
 8003478:	080034d9 	.word	0x080034d9
 800347c:	080034d9 	.word	0x080034d9
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034d9 	.word	0x080034d9
 8003488:	080034e1 	.word	0x080034e1
 800348c:	080034d9 	.word	0x080034d9
 8003490:	080034d9 	.word	0x080034d9
 8003494:	080034d9 	.word	0x080034d9
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034d9 	.word	0x080034d9
 80034a0:	080034d9 	.word	0x080034d9
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034e1 	.word	0x080034e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b0:	3308      	adds	r3, #8
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 ffc3 	bl	8004440 <RCCEx_PLL2_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c6:	3328      	adds	r3, #40	; 0x28
 80034c8:	2101      	movs	r1, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f86a 	bl	80045a4 <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80034ea:	4bbf      	ldr	r3, [pc, #764]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f8:	4abb      	ldr	r2, [pc, #748]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6553      	str	r3, [r2, #84]	; 0x54
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003504:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 0302 	and.w	r3, r2, #2
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800351e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	d041      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	2b05      	cmp	r3, #5
 8003530:	d824      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003585 	.word	0x08003585
 800353c:	08003551 	.word	0x08003551
 8003540:	08003567 	.word	0x08003567
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003554:	3308      	adds	r3, #8
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f000 ff71 	bl	8004440 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003564:	e00f      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f818 	bl	80045a4 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800358e:	4b96      	ldr	r3, [pc, #600]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f023 0107 	bic.w	r1, r3, #7
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359c:	4a92      	ldr	r2, [pc, #584]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800359e:	430b      	orrs	r3, r1
 80035a0:	6553      	str	r3, [r2, #84]	; 0x54
 80035a2:	e003      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f002 0304 	and.w	r3, r2, #4
 80035b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	d044      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d825      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	0800362d 	.word	0x0800362d
 80035e4:	080035f9 	.word	0x080035f9
 80035e8:	0800360f 	.word	0x0800360f
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	0800362d 	.word	0x0800362d
 80035f4:	0800362d 	.word	0x0800362d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fc:	3308      	adds	r3, #8
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f000 ff1d 	bl	8004440 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800360c:	e00f      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003612:	3328      	adds	r3, #40	; 0x28
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f000 ffc4 	bl	80045a4 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003622:	e004      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800362c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f023 0107 	bic.w	r1, r3, #7
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003648:	430b      	orrs	r3, r1
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f002 0320 	and.w	r3, r2, #32
 8003662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800366c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d055      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003682:	d033      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003688:	d82c      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d02f      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d826      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003696:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800369a:	d02b      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800369c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036a0:	d820      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a6:	d012      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ac:	d81a      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d022      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b6:	d115      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036bc:	3308      	adds	r3, #8
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 febd 	bl	8004440 <RCCEx_PLL2_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036cc:	e015      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d2:	3328      	adds	r3, #40	; 0x28
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 ff64 	bl	80045a4 <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036e2:	e00a      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ea:	e006      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036ec:	bf00      	nop
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6553      	str	r3, [r2, #84]	; 0x54
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003738:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800373c:	460b      	mov	r3, r1
 800373e:	4313      	orrs	r3, r2
 8003740:	d058      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800374a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800374e:	d033      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003750:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003754:	d82c      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d02f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d826      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003766:	d02b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376c:	d820      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003772:	d012      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	d81a      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d022      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d115      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	3308      	adds	r3, #8
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fe57 	bl	8004440 <RCCEx_PLL2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003798:	e015      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379e:	3328      	adds	r3, #40	; 0x28
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fefe 	bl	80045a4 <RCCEx_PLL3_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037ae:	e00a      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b6:	e006      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037b8:	bf00      	nop
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037bc:	bf00      	nop
 80037be:	e002      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037de:	4a02      	ldr	r2, [pc, #8]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
 80037e4:	e006      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80037e6:	bf00      	nop
 80037e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800380a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d055      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800381c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003820:	d033      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003822:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003826:	d82c      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382c:	d02f      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003832:	d826      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003834:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003838:	d02b      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800383a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800383e:	d820      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003844:	d012      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384a:	d81a      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d022      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d115      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	3308      	adds	r3, #8
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fdee 	bl	8004440 <RCCEx_PLL2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800386a:	e015      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003870:	3328      	adds	r3, #40	; 0x28
 8003872:	2102      	movs	r1, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fe95 	bl	80045a4 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003880:	e00a      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038a0:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038b0:	4a9d      	ldr	r2, [pc, #628]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 0308 	and.w	r3, r2, #8
 80038cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d01e      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f2:	3328      	adds	r3, #40	; 0x28
 80038f4:	2102      	movs	r1, #2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fe54 	bl	80045a4 <RCCEx_PLL3_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003908:	4b87      	ldr	r3, [pc, #540]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003918:	4a83      	ldr	r2, [pc, #524]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800391a:	430b      	orrs	r3, r1
 800391c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f002 0310 	and.w	r3, r2, #16
 800392a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003934:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d01e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d10c      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003950:	3328      	adds	r3, #40	; 0x28
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fe25 	bl	80045a4 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003966:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003976:	4a6c      	ldr	r2, [pc, #432]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003992:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d03e      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a8:	d022      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ae:	d81b      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039ba:	e015      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	3308      	adds	r3, #8
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fd3b 	bl	8004440 <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039d0:	e00f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	3328      	adds	r3, #40	; 0x28
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fde2 	bl	80045a4 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a0a:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003a26:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a28:	2300      	movs	r3, #0
 8003a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d03b      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a42:	d01f      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a48:	d818      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a54:	d007      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a56:	e011      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a32      	ldr	r2, [pc, #200]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fd98 	bl	80045a4 <RCCEx_PLL3_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6553      	str	r3, [r2, #84]	; 0x54
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003aba:	673b      	str	r3, [r7, #112]	; 0x70
 8003abc:	2300      	movs	r3, #0
 8003abe:	677b      	str	r3, [r7, #116]	; 0x74
 8003ac0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	d034      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d007      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003ada:	e011      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ae8:	e00e      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2102      	movs	r1, #2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fca4 	bl	8004440 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003afe:	e003      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	4a02      	ldr	r2, [pc, #8]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b24:	e006      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b42:	2300      	movs	r3, #0
 8003b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	d00c      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b54:	3328      	adds	r3, #40	; 0x28
 8003b56:	2102      	movs	r1, #2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fd23 	bl	80045a4 <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003b76:	663b      	str	r3, [r7, #96]	; 0x60
 8003b78:	2300      	movs	r3, #0
 8003b7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003b80:	460b      	mov	r3, r1
 8003b82:	4313      	orrs	r3, r2
 8003b84:	d038      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b92:	d018      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b98:	d811      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b9e:	d014      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba4:	d80b      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bae:	d106      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4bc3      	ldr	r3, [pc, #780]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4ac2      	ldr	r2, [pc, #776]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd8:	4bb9      	ldr	r3, [pc, #740]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be8:	4ab5      	ldr	r2, [pc, #724]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6553      	str	r3, [r2, #84]	; 0x54
 8003bee:	e003      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c06:	2300      	movs	r3, #0
 8003c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4313      	orrs	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c14:	4baa      	ldr	r3, [pc, #680]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	4aa7      	ldr	r2, [pc, #668]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003c34:	653b      	str	r3, [r7, #80]	; 0x50
 8003c36:	2300      	movs	r3, #0
 8003c38:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c44:	4b9e      	ldr	r3, [pc, #632]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c54:	4a9a      	ldr	r2, [pc, #616]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c76:	4b92      	ldr	r3, [pc, #584]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c84:	4a8e      	ldr	r2, [pc, #568]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	2300      	movs	r3, #0
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ca6:	4b86      	ldr	r3, [pc, #536]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	4a85      	ldr	r2, [pc, #532]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cb0:	6113      	str	r3, [r2, #16]
 8003cb2:	4b83      	ldr	r3, [pc, #524]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cb4:	6919      	ldr	r1, [r3, #16]
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cbe:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ce0:	4b77      	ldr	r3, [pc, #476]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	4a74      	ldr	r2, [pc, #464]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30
 8003d02:	2300      	movs	r3, #0
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
 8003d06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d10:	4b6b      	ldr	r3, [pc, #428]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d20:	4a67      	ldr	r2, [pc, #412]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	2100      	movs	r1, #0
 8003d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d011      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d46:	3308      	adds	r3, #8
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fb78 	bl	8004440 <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6239      	str	r1, [r7, #32]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	d011      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	3308      	adds	r3, #8
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb58 	bl	8004440 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	2100      	movs	r1, #0
 8003db0:	61b9      	str	r1, [r7, #24]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	d011      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fb38 	bl	8004440 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	2100      	movs	r1, #0
 8003df0:	6139      	str	r1, [r7, #16]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	d011      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e06:	3328      	adds	r3, #40	; 0x28
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fbca 	bl	80045a4 <RCCEx_PLL3_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	2100      	movs	r1, #0
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	d011      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	3328      	adds	r3, #40	; 0x28
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fbaa 	bl	80045a4 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d011      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e86:	3328      	adds	r3, #40	; 0x28
 8003e88:	2102      	movs	r1, #2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fb8a 	bl	80045a4 <RCCEx_PLL3_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003ea6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec0:	58024400 	.word	0x58024400

08003ec4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ec8:	f7fe fd96 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4904      	ldr	r1, [pc, #16]	; (8003eec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	08006bd4 	.word	0x08006bd4

08003ef0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	; 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ef8:	4ba1      	ldr	r3, [pc, #644]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f02:	4b9f      	ldr	r3, [pc, #636]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	0b1b      	lsrs	r3, r3, #12
 8003f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f0e:	4b9c      	ldr	r3, [pc, #624]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f1a:	4b99      	ldr	r3, [pc, #612]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	08db      	lsrs	r3, r3, #3
 8003f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8111 	beq.w	8004160 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f000 8083 	beq.w	800404c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	f200 80a1 	bhi.w	8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d056      	beq.n	8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f5a:	e099      	b.n	8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f5c:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02d      	beq.n	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f68:	4b85      	ldr	r3, [pc, #532]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	4a84      	ldr	r2, [pc, #528]	; (8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fc2:	e087      	b.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800418c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004006:	e065      	b.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b59      	ldr	r3, [pc, #356]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a03 	vldr	s12, [r7, #12]
 800402e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800404a:	e043      	b.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004072:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800408e:	e021      	b.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b37      	ldr	r3, [pc, #220]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	0a5b      	lsrs	r3, r3, #9
 80040da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fa:	ee17 2a90 	vmov	r2, s15
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004102:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800411c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004128:	ee17 2a90 	vmov	r2, s15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004130:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	0e1b      	lsrs	r3, r3, #24
 8004136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800414a:	edd7 6a07 	vldr	s13, [r7, #28]
 800414e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004156:	ee17 2a90 	vmov	r2, s15
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
}
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	58024400 	.word	0x58024400
 8004184:	03d09000 	.word	0x03d09000
 8004188:	46000000 	.word	0x46000000
 800418c:	4c742400 	.word	0x4c742400
 8004190:	4a742400 	.word	0x4a742400
 8004194:	4af42400 	.word	0x4af42400

08004198 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041a0:	4ba1      	ldr	r3, [pc, #644]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041aa:	4b9f      	ldr	r3, [pc, #636]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	0d1b      	lsrs	r3, r3, #20
 80041b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041b6:	4b9c      	ldr	r3, [pc, #624]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041c2:	4b99      	ldr	r3, [pc, #612]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	08db      	lsrs	r3, r3, #3
 80041c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8111 	beq.w	8004408 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	f000 8083 	beq.w	80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	f200 80a1 	bhi.w	8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d056      	beq.n	80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004202:	e099      	b.n	8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004204:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02d      	beq.n	800426c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004210:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	4a84      	ldr	r2, [pc, #528]	; (800442c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800423a:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424a:	ed97 6a03 	vldr	s12, [r7, #12]
 800424e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800425e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800426a:	e087      	b.n	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004434 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800427a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004292:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ae:	e065      	b.n	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042f2:	e043      	b.n	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800443c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a03 	vldr	s12, [r7, #12]
 800431a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004336:	e021      	b.n	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a03 	vldr	s12, [r7, #12]
 800435e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800437a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800437c:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	0a5b      	lsrs	r3, r3, #9
 8004382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004396:	edd7 6a07 	vldr	s13, [r7, #28]
 800439a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800439e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a2:	ee17 2a90 	vmov	r2, s15
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043aa:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	0c1b      	lsrs	r3, r3, #16
 80043b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d0:	ee17 2a90 	vmov	r2, s15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fe:	ee17 2a90 	vmov	r2, s15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004406:	e008      	b.n	800441a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
}
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400
 800442c:	03d09000 	.word	0x03d09000
 8004430:	46000000 	.word	0x46000000
 8004434:	4c742400 	.word	0x4c742400
 8004438:	4a742400 	.word	0x4a742400
 800443c:	4af42400 	.word	0x4af42400

08004440 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800444e:	4b53      	ldr	r3, [pc, #332]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b03      	cmp	r3, #3
 8004458:	d101      	bne.n	800445e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e099      	b.n	8004592 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800445e:	4b4f      	ldr	r3, [pc, #316]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4e      	ldr	r2, [pc, #312]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004464:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fc fe8b 	bl	8001184 <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004470:	e008      	b.n	8004484 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004472:	f7fc fe87 	bl	8001184 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e086      	b.n	8004592 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004490:	4b42      	ldr	r3, [pc, #264]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	031b      	lsls	r3, r3, #12
 800449e:	493f      	ldr	r1, [pc, #252]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	628b      	str	r3, [r1, #40]	; 0x28
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	025b      	lsls	r3, r3, #9
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044d4:	4931      	ldr	r1, [pc, #196]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	492d      	ldr	r1, [pc, #180]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f023 0220 	bic.w	r2, r3, #32
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4928      	ldr	r1, [pc, #160]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044fe:	4b27      	ldr	r3, [pc, #156]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a26      	ldr	r2, [pc, #152]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004504:	f023 0310 	bic.w	r3, r3, #16
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 800450c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <RCCEx_PLL2_Config+0x160>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	69d2      	ldr	r2, [r2, #28]
 8004516:	00d2      	lsls	r2, r2, #3
 8004518:	4920      	ldr	r1, [pc, #128]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a1e      	ldr	r2, [pc, #120]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004524:	f043 0310 	orr.w	r3, r3, #16
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800453c:	e00f      	b.n	800455e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004544:	4b15      	ldr	r3, [pc, #84]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004550:	e005      	b.n	800455e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	4a11      	ldr	r2, [pc, #68]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800455c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456a:	f7fc fe0b 	bl	8001184 <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004570:	e008      	b.n	8004584 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004572:	f7fc fe07 	bl	8001184 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e006      	b.n	8004592 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <RCCEx_PLL2_Config+0x15c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	58024400 	.word	0x58024400
 80045a0:	ffff0007 	.word	0xffff0007

080045a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045b2:	4b53      	ldr	r3, [pc, #332]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d101      	bne.n	80045c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e099      	b.n	80046f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045c2:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4e      	ldr	r2, [pc, #312]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ce:	f7fc fdd9 	bl	8001184 <HAL_GetTick>
 80045d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045d6:	f7fc fdd5 	bl	8001184 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e086      	b.n	80046f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	051b      	lsls	r3, r3, #20
 8004602:	493f      	ldr	r1, [pc, #252]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	628b      	str	r3, [r1, #40]	; 0x28
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	3b01      	subs	r3, #1
 800460e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	025b      	lsls	r3, r3, #9
 800461a:	b29b      	uxth	r3, r3
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	3b01      	subs	r3, #1
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	3b01      	subs	r3, #1
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004638:	4931      	ldr	r1, [pc, #196]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800463e:	4b30      	ldr	r3, [pc, #192]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	492d      	ldr	r1, [pc, #180]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004650:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	4928      	ldr	r1, [pc, #160]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004662:	4b27      	ldr	r3, [pc, #156]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	4a26      	ldr	r2, [pc, #152]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <RCCEx_PLL3_Config+0x160>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	69d2      	ldr	r2, [r2, #28]
 800467a:	00d2      	lsls	r2, r2, #3
 800467c:	4920      	ldr	r1, [pc, #128]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004682:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004694:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 800469a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800469e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046a0:	e00f      	b.n	80046c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	4a14      	ldr	r2, [pc, #80]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046b4:	e005      	b.n	80046c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	4a11      	ldr	r2, [pc, #68]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ce:	f7fc fd59 	bl	8001184 <HAL_GetTick>
 80046d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046d4:	e008      	b.n	80046e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046d6:	f7fc fd55 	bl	8001184 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e006      	b.n	80046f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <RCCEx_PLL3_Config+0x15c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	58024400 	.word	0x58024400
 8004704:	ffff0007 	.word	0xffff0007

08004708 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d071      	beq.n	80047fe <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fabe 	bl	8000cb0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b10      	cmp	r3, #16
 8004748:	d050      	beq.n	80047ec <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	22ca      	movs	r2, #202	; 0xca
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2253      	movs	r2, #83	; 0x53
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9a0 	bl	8004aa0 <RTC_EnterInitMode>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d124      	bne.n	80047b4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6899      	ldr	r1, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_RTC_Init+0x100>)
 8004776:	400b      	ands	r3, r1
 8004778:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	0419      	lsls	r1, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9ac 	bl	8004b08 <RTC_ExitInitMode>
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0203 	bic.w	r2, r2, #3
 80047c8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	22ff      	movs	r2, #255	; 0xff
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24
 80047ea:	e001      	b.n	80047f0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	ff8fffbf 	.word	0xff8fffbf

0800480c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_RTC_SetTime+0x1a>
 8004822:	2302      	movs	r3, #2
 8004824:	e089      	b.n	800493a <HAL_RTC_SetTime+0x12e>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	22ca      	movs	r2, #202	; 0xca
 800483c:	625a      	str	r2, [r3, #36]	; 0x24
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2253      	movs	r2, #83	; 0x53
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f92a 	bl	8004aa0 <RTC_EnterInitMode>
 800484c:	4603      	mov	r3, r0
 800484e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d161      	bne.n	800491a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d126      	bne.n	80048aa <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2200      	movs	r2, #0
 800486e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f985 	bl	8004b84 <RTC_ByteToBcd2>
 800487a:	4603      	mov	r3, r0
 800487c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f97e 	bl	8004b84 <RTC_ByteToBcd2>
 8004888:	4603      	mov	r3, r0
 800488a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800488c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	789b      	ldrb	r3, [r3, #2]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f976 	bl	8004b84 <RTC_ByteToBcd2>
 8004898:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800489a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e018      	b.n	80048dc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048ca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048d0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	78db      	ldrb	r3, [r3, #3]
 80048d6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6979      	ldr	r1, [r7, #20]
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_RTC_SetTime+0x138>)
 80048e4:	400b      	ands	r3, r1
 80048e6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	431a      	orrs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f8f9 	bl	8004b08 <RTC_ExitInitMode>
 8004916:	4603      	mov	r3, r0
 8004918:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	22ff      	movs	r2, #255	; 0xff
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004922:	7cfb      	ldrb	r3, [r7, #19]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd90      	pop	{r4, r7, pc}
 8004942:	bf00      	nop
 8004944:	007f7f7f 	.word	0x007f7f7f

08004948 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_RTC_SetDate+0x1a>
 800495e:	2302      	movs	r3, #2
 8004960:	e073      	b.n	8004a4a <HAL_RTC_SetDate+0x102>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10e      	bne.n	8004996 <HAL_RTC_SetDate+0x4e>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	785b      	ldrb	r3, [r3, #1]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	f023 0310 	bic.w	r3, r3, #16
 800498c:	b2db      	uxtb	r3, r3
 800498e:	330a      	adds	r3, #10
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11c      	bne.n	80049d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	78db      	ldrb	r3, [r3, #3]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f8ef 	bl	8004b84 <RTC_ByteToBcd2>
 80049a6:	4603      	mov	r3, r0
 80049a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f8e8 	bl	8004b84 <RTC_ByteToBcd2>
 80049b4:	4603      	mov	r3, r0
 80049b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	789b      	ldrb	r3, [r3, #2]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f8e0 	bl	8004b84 <RTC_ByteToBcd2>
 80049c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e00e      	b.n	80049f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	78db      	ldrb	r3, [r3, #3]
 80049da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	22ca      	movs	r2, #202	; 0xca
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2253      	movs	r2, #83	; 0x53
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f84b 	bl	8004aa0 <RTC_EnterInitMode>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HAL_RTC_SetDate+0x10c>)
 8004a1c:	400b      	ands	r3, r1
 8004a1e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f871 	bl	8004b08 <RTC_ExitInitMode>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	22ff      	movs	r2, #255	; 0xff
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004a48:	7cfb      	ldrb	r3, [r7, #19]


}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	00ffff3f 	.word	0x00ffff3f

08004a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <HAL_RTC_WaitForSynchro+0x44>)
 8004a66:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8004a68:	f7fc fb8c 	bl	8001184 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a70:	f7fc fb88 	bl	8001184 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7e:	d901      	bls.n	8004a84 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e007      	b.n	8004a94 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ee      	beq.n	8004a70 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	0003ff5f 	.word	0x0003ff5f

08004aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d120      	bne.n	8004afc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ac4:	f7fc fb5e 	bl	8001184 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004aca:	e00d      	b.n	8004ae8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004acc:	f7fc fb5a 	bl	8001184 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d905      	bls.n	8004ae8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <RTC_EnterInitMode+0x5c>
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d1e7      	bne.n	8004acc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff93 	bl	8004a58 <HAL_RTC_WaitForSynchro>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01e      	beq.n	8004b76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	e017      	b.n	8004b76 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a0d      	ldr	r2, [pc, #52]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b4c:	f023 0320 	bic.w	r3, r3, #32
 8004b50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff80 	bl	8004a58 <HAL_RTC_WaitForSynchro>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2203      	movs	r2, #3
 8004b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	58004000 	.word	0x58004000

08004b84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8004b96:	e005      	b.n	8004ba4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	3b0a      	subs	r3, #10
 8004ba2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	2b09      	cmp	r3, #9
 8004ba8:	d8f6      	bhi.n	8004b98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b2db      	uxtb	r3, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e034      	b.n	8004c46 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	22ca      	movs	r2, #202	; 0xca
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2253      	movs	r2, #83	; 0x53
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004c0a:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004c2a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	22ff      	movs	r2, #255	; 0xff
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e049      	b.n	8004cf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fc f879 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 f92d 	bl	8004ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0dc      	b.n	8004ed6 <HAL_TIM_ConfigClockSource+0x1d6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	4b6a      	ldr	r3, [pc, #424]	; (8004ee0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a64      	ldr	r2, [pc, #400]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f000 80a9 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004d58:	4a62      	ldr	r2, [pc, #392]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f200 80ae 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d60:	4a61      	ldr	r2, [pc, #388]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f000 80a1 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004d68:	4a5f      	ldr	r2, [pc, #380]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f200 80a6 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d70:	4a5e      	ldr	r2, [pc, #376]	; (8004eec <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f000 8099 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004d78:	4a5c      	ldr	r2, [pc, #368]	; (8004eec <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	f200 809e 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d84:	f000 8091 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004d88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d8c:	f200 8096 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d94:	f000 8089 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	f200 808e 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d03e      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0x124>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	f200 8087 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	f000 8086 	beq.w	8004ec2 <HAL_TIM_ConfigClockSource+0x1c2>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	d87f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dbc:	2b70      	cmp	r3, #112	; 0x70
 8004dbe:	d01a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xf6>
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d87b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dc4:	2b60      	cmp	r3, #96	; 0x60
 8004dc6:	d050      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x16a>
 8004dc8:	2b60      	cmp	r3, #96	; 0x60
 8004dca:	d877      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dcc:	2b50      	cmp	r3, #80	; 0x50
 8004dce:	d03c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x14a>
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d873      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d058      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x18a>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d86f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d064      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004de0:	2b30      	cmp	r3, #48	; 0x30
 8004de2:	d86b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d060      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d867      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d05a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x1aa>
 8004df4:	e062      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	f000 f98b 	bl	8005120 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e04f      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	f000 f974 	bl	8005120 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e03c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 f8e4 	bl	8005024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f93e 	bl	80050e4 <TIM_ITRx_SetConfig>
      break;
 8004e68:	e02c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 f903 	bl	8005082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2160      	movs	r1, #96	; 0x60
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f92e 	bl	80050e4 <TIM_ITRx_SetConfig>
      break;
 8004e88:	e01c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 f8c4 	bl	8005024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f91e 	bl	80050e4 <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f000 f915 	bl	80050e4 <TIM_ITRx_SetConfig>
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	ffceff88 	.word	0xffceff88
 8004ee4:	00100040 	.word	0x00100040
 8004ee8:	00100030 	.word	0x00100030
 8004eec:	00100020 	.word	0x00100020

08004ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d00f      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <TIM_Base_SetConfig+0x118>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3c      	ldr	r2, [pc, #240]	; (800500c <TIM_Base_SetConfig+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <TIM_Base_SetConfig+0x120>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d108      	bne.n	8004f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01f      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d01b      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2c      	ldr	r2, [pc, #176]	; (8005008 <TIM_Base_SetConfig+0x118>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d017      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2b      	ldr	r2, [pc, #172]	; (800500c <TIM_Base_SetConfig+0x11c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <TIM_Base_SetConfig+0x120>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00f      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a28      	ldr	r2, [pc, #160]	; (8005018 <TIM_Base_SetConfig+0x128>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <TIM_Base_SetConfig+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <TIM_Base_SetConfig+0x130>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a10      	ldr	r2, [pc, #64]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a12      	ldr	r2, [pc, #72]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a11      	ldr	r2, [pc, #68]	; (8005018 <TIM_Base_SetConfig+0x128>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <TIM_Base_SetConfig+0x12c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <TIM_Base_SetConfig+0x130>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40010400 	.word	0x40010400
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <TIM_ITRx_SetConfig+0x38>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	f043 0307 	orr.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	609a      	str	r2, [r3, #8]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	ffcfff8f 	.word	0xffcfff8f

08005120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	431a      	orrs	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e06d      	b.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2f      	ldr	r2, [pc, #188]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a20      	ldr	r2, [pc, #128]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ea:	d01d      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a15      	ldr	r2, [pc, #84]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10c      	bne.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	4313      	orrs	r3, r2
 8005238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40010000 	.word	0x40010000
 8005264:	40010400 	.word	0x40010400
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40001800 	.word	0x40001800
 8005278:	40014000 	.word	0x40014000

0800527c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e042      	b.n	8005314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7fb fd9f 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2224      	movs	r2, #36	; 0x24
 80052aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8ba 	bl	8005438 <UART_SetConfig>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e022      	b.n	8005314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fe16 	bl	8005f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fe9d 	bl	800604c <UART_CheckIdleState>
 8005312:	4603      	mov	r3, r0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	2b20      	cmp	r3, #32
 8005334:	d17b      	bne.n	800542e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_UART_Transmit+0x26>
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e074      	b.n	8005430 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2221      	movs	r2, #33	; 0x21
 8005352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005356:	f7fb ff15 	bl	8001184 <HAL_GetTick>
 800535a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005374:	d108      	bne.n	8005388 <HAL_UART_Transmit+0x6c>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e003      	b.n	8005390 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005390:	e030      	b.n	80053f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 feff 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e03d      	b.n	8005430 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3302      	adds	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e007      	b.n	80053e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1c8      	bne.n	8005392 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fec8 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e006      	b.n	8005430 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800543c:	b092      	sub	sp, #72	; 0x48
 800543e:	af00      	add	r7, sp, #0
 8005440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	431a      	orrs	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	431a      	orrs	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	4313      	orrs	r3, r2
 800545e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4bbe      	ldr	r3, [pc, #760]	; (8005760 <UART_SetConfig+0x328>)
 8005468:	4013      	ands	r3, r2
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005470:	430b      	orrs	r3, r1
 8005472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4ab3      	ldr	r2, [pc, #716]	; (8005764 <UART_SetConfig+0x32c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a0:	4313      	orrs	r3, r2
 80054a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	4baf      	ldr	r3, [pc, #700]	; (8005768 <UART_SetConfig+0x330>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f023 010f 	bic.w	r1, r3, #15
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4aa6      	ldr	r2, [pc, #664]	; (800576c <UART_SetConfig+0x334>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d177      	bne.n	80055c8 <UART_SetConfig+0x190>
 80054d8:	4ba5      	ldr	r3, [pc, #660]	; (8005770 <UART_SetConfig+0x338>)
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e0:	2b28      	cmp	r3, #40	; 0x28
 80054e2:	d86d      	bhi.n	80055c0 <UART_SetConfig+0x188>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0xb4>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005591 	.word	0x08005591
 80054f0:	080055c1 	.word	0x080055c1
 80054f4:	080055c1 	.word	0x080055c1
 80054f8:	080055c1 	.word	0x080055c1
 80054fc:	080055c1 	.word	0x080055c1
 8005500:	080055c1 	.word	0x080055c1
 8005504:	080055c1 	.word	0x080055c1
 8005508:	080055c1 	.word	0x080055c1
 800550c:	08005599 	.word	0x08005599
 8005510:	080055c1 	.word	0x080055c1
 8005514:	080055c1 	.word	0x080055c1
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055c1 	.word	0x080055c1
 8005520:	080055c1 	.word	0x080055c1
 8005524:	080055c1 	.word	0x080055c1
 8005528:	080055c1 	.word	0x080055c1
 800552c:	080055a1 	.word	0x080055a1
 8005530:	080055c1 	.word	0x080055c1
 8005534:	080055c1 	.word	0x080055c1
 8005538:	080055c1 	.word	0x080055c1
 800553c:	080055c1 	.word	0x080055c1
 8005540:	080055c1 	.word	0x080055c1
 8005544:	080055c1 	.word	0x080055c1
 8005548:	080055c1 	.word	0x080055c1
 800554c:	080055a9 	.word	0x080055a9
 8005550:	080055c1 	.word	0x080055c1
 8005554:	080055c1 	.word	0x080055c1
 8005558:	080055c1 	.word	0x080055c1
 800555c:	080055c1 	.word	0x080055c1
 8005560:	080055c1 	.word	0x080055c1
 8005564:	080055c1 	.word	0x080055c1
 8005568:	080055c1 	.word	0x080055c1
 800556c:	080055b1 	.word	0x080055b1
 8005570:	080055c1 	.word	0x080055c1
 8005574:	080055c1 	.word	0x080055c1
 8005578:	080055c1 	.word	0x080055c1
 800557c:	080055c1 	.word	0x080055c1
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055c1 	.word	0x080055c1
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e222      	b.n	80059de <UART_SetConfig+0x5a6>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e21e      	b.n	80059de <UART_SetConfig+0x5a6>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e21a      	b.n	80059de <UART_SetConfig+0x5a6>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e216      	b.n	80059de <UART_SetConfig+0x5a6>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e212      	b.n	80059de <UART_SetConfig+0x5a6>
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e20e      	b.n	80059de <UART_SetConfig+0x5a6>
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e20a      	b.n	80059de <UART_SetConfig+0x5a6>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a69      	ldr	r2, [pc, #420]	; (8005774 <UART_SetConfig+0x33c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d130      	bne.n	8005634 <UART_SetConfig+0x1fc>
 80055d2:	4b67      	ldr	r3, [pc, #412]	; (8005770 <UART_SetConfig+0x338>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d826      	bhi.n	800562c <UART_SetConfig+0x1f4>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x1ac>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e1ec      	b.n	80059de <UART_SetConfig+0x5a6>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e1e8      	b.n	80059de <UART_SetConfig+0x5a6>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e1e4      	b.n	80059de <UART_SetConfig+0x5a6>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e1e0      	b.n	80059de <UART_SetConfig+0x5a6>
 800561c:	2320      	movs	r3, #32
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e1dc      	b.n	80059de <UART_SetConfig+0x5a6>
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e1d8      	b.n	80059de <UART_SetConfig+0x5a6>
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e1d4      	b.n	80059de <UART_SetConfig+0x5a6>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a4f      	ldr	r2, [pc, #316]	; (8005778 <UART_SetConfig+0x340>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d130      	bne.n	80056a0 <UART_SetConfig+0x268>
 800563e:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <UART_SetConfig+0x338>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	2b05      	cmp	r3, #5
 8005648:	d826      	bhi.n	8005698 <UART_SetConfig+0x260>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x218>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005669 	.word	0x08005669
 8005654:	08005671 	.word	0x08005671
 8005658:	08005679 	.word	0x08005679
 800565c:	08005681 	.word	0x08005681
 8005660:	08005689 	.word	0x08005689
 8005664:	08005691 	.word	0x08005691
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e1b6      	b.n	80059de <UART_SetConfig+0x5a6>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e1b2      	b.n	80059de <UART_SetConfig+0x5a6>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e1ae      	b.n	80059de <UART_SetConfig+0x5a6>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e1aa      	b.n	80059de <UART_SetConfig+0x5a6>
 8005688:	2320      	movs	r3, #32
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e1a6      	b.n	80059de <UART_SetConfig+0x5a6>
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e1a2      	b.n	80059de <UART_SetConfig+0x5a6>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e19e      	b.n	80059de <UART_SetConfig+0x5a6>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a35      	ldr	r2, [pc, #212]	; (800577c <UART_SetConfig+0x344>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d130      	bne.n	800570c <UART_SetConfig+0x2d4>
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <UART_SetConfig+0x338>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d826      	bhi.n	8005704 <UART_SetConfig+0x2cc>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0x284>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056d5 	.word	0x080056d5
 80056c0:	080056dd 	.word	0x080056dd
 80056c4:	080056e5 	.word	0x080056e5
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e180      	b.n	80059de <UART_SetConfig+0x5a6>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e17c      	b.n	80059de <UART_SetConfig+0x5a6>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e178      	b.n	80059de <UART_SetConfig+0x5a6>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e174      	b.n	80059de <UART_SetConfig+0x5a6>
 80056f4:	2320      	movs	r3, #32
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e170      	b.n	80059de <UART_SetConfig+0x5a6>
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e16c      	b.n	80059de <UART_SetConfig+0x5a6>
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e168      	b.n	80059de <UART_SetConfig+0x5a6>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <UART_SetConfig+0x348>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d142      	bne.n	800579c <UART_SetConfig+0x364>
 8005716:	4b16      	ldr	r3, [pc, #88]	; (8005770 <UART_SetConfig+0x338>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	2b05      	cmp	r3, #5
 8005720:	d838      	bhi.n	8005794 <UART_SetConfig+0x35c>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0x2f0>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005741 	.word	0x08005741
 800572c:	08005749 	.word	0x08005749
 8005730:	08005751 	.word	0x08005751
 8005734:	08005759 	.word	0x08005759
 8005738:	08005785 	.word	0x08005785
 800573c:	0800578d 	.word	0x0800578d
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e14a      	b.n	80059de <UART_SetConfig+0x5a6>
 8005748:	2304      	movs	r3, #4
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e146      	b.n	80059de <UART_SetConfig+0x5a6>
 8005750:	2308      	movs	r3, #8
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e142      	b.n	80059de <UART_SetConfig+0x5a6>
 8005758:	2310      	movs	r3, #16
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e13e      	b.n	80059de <UART_SetConfig+0x5a6>
 8005760:	cfff69f3 	.word	0xcfff69f3
 8005764:	58000c00 	.word	0x58000c00
 8005768:	11fff4ff 	.word	0x11fff4ff
 800576c:	40011000 	.word	0x40011000
 8005770:	58024400 	.word	0x58024400
 8005774:	40004400 	.word	0x40004400
 8005778:	40004800 	.word	0x40004800
 800577c:	40004c00 	.word	0x40004c00
 8005780:	40005000 	.word	0x40005000
 8005784:	2320      	movs	r3, #32
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e128      	b.n	80059de <UART_SetConfig+0x5a6>
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e124      	b.n	80059de <UART_SetConfig+0x5a6>
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e120      	b.n	80059de <UART_SetConfig+0x5a6>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4acb      	ldr	r2, [pc, #812]	; (8005ad0 <UART_SetConfig+0x698>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d176      	bne.n	8005894 <UART_SetConfig+0x45c>
 80057a6:	4bcb      	ldr	r3, [pc, #812]	; (8005ad4 <UART_SetConfig+0x69c>)
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ae:	2b28      	cmp	r3, #40	; 0x28
 80057b0:	d86c      	bhi.n	800588c <UART_SetConfig+0x454>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x380>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	0800585d 	.word	0x0800585d
 80057bc:	0800588d 	.word	0x0800588d
 80057c0:	0800588d 	.word	0x0800588d
 80057c4:	0800588d 	.word	0x0800588d
 80057c8:	0800588d 	.word	0x0800588d
 80057cc:	0800588d 	.word	0x0800588d
 80057d0:	0800588d 	.word	0x0800588d
 80057d4:	0800588d 	.word	0x0800588d
 80057d8:	08005865 	.word	0x08005865
 80057dc:	0800588d 	.word	0x0800588d
 80057e0:	0800588d 	.word	0x0800588d
 80057e4:	0800588d 	.word	0x0800588d
 80057e8:	0800588d 	.word	0x0800588d
 80057ec:	0800588d 	.word	0x0800588d
 80057f0:	0800588d 	.word	0x0800588d
 80057f4:	0800588d 	.word	0x0800588d
 80057f8:	0800586d 	.word	0x0800586d
 80057fc:	0800588d 	.word	0x0800588d
 8005800:	0800588d 	.word	0x0800588d
 8005804:	0800588d 	.word	0x0800588d
 8005808:	0800588d 	.word	0x0800588d
 800580c:	0800588d 	.word	0x0800588d
 8005810:	0800588d 	.word	0x0800588d
 8005814:	0800588d 	.word	0x0800588d
 8005818:	08005875 	.word	0x08005875
 800581c:	0800588d 	.word	0x0800588d
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800588d 	.word	0x0800588d
 8005828:	0800588d 	.word	0x0800588d
 800582c:	0800588d 	.word	0x0800588d
 8005830:	0800588d 	.word	0x0800588d
 8005834:	0800588d 	.word	0x0800588d
 8005838:	0800587d 	.word	0x0800587d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	0800588d 	.word	0x0800588d
 8005848:	0800588d 	.word	0x0800588d
 800584c:	0800588d 	.word	0x0800588d
 8005850:	0800588d 	.word	0x0800588d
 8005854:	0800588d 	.word	0x0800588d
 8005858:	08005885 	.word	0x08005885
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e0bc      	b.n	80059de <UART_SetConfig+0x5a6>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e0b8      	b.n	80059de <UART_SetConfig+0x5a6>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e0b4      	b.n	80059de <UART_SetConfig+0x5a6>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e0b0      	b.n	80059de <UART_SetConfig+0x5a6>
 800587c:	2320      	movs	r3, #32
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e0ac      	b.n	80059de <UART_SetConfig+0x5a6>
 8005884:	2340      	movs	r3, #64	; 0x40
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e0a8      	b.n	80059de <UART_SetConfig+0x5a6>
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e0a4      	b.n	80059de <UART_SetConfig+0x5a6>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a8f      	ldr	r2, [pc, #572]	; (8005ad8 <UART_SetConfig+0x6a0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d130      	bne.n	8005900 <UART_SetConfig+0x4c8>
 800589e:	4b8d      	ldr	r3, [pc, #564]	; (8005ad4 <UART_SetConfig+0x69c>)
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d826      	bhi.n	80058f8 <UART_SetConfig+0x4c0>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0x478>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058c9 	.word	0x080058c9
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	080058d9 	.word	0x080058d9
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e086      	b.n	80059de <UART_SetConfig+0x5a6>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e082      	b.n	80059de <UART_SetConfig+0x5a6>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e07e      	b.n	80059de <UART_SetConfig+0x5a6>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e07a      	b.n	80059de <UART_SetConfig+0x5a6>
 80058e8:	2320      	movs	r3, #32
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e076      	b.n	80059de <UART_SetConfig+0x5a6>
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e072      	b.n	80059de <UART_SetConfig+0x5a6>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e06e      	b.n	80059de <UART_SetConfig+0x5a6>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a75      	ldr	r2, [pc, #468]	; (8005adc <UART_SetConfig+0x6a4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d130      	bne.n	800596c <UART_SetConfig+0x534>
 800590a:	4b72      	ldr	r3, [pc, #456]	; (8005ad4 <UART_SetConfig+0x69c>)
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b05      	cmp	r3, #5
 8005914:	d826      	bhi.n	8005964 <UART_SetConfig+0x52c>
 8005916:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0x4e4>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005935 	.word	0x08005935
 8005920:	0800593d 	.word	0x0800593d
 8005924:	08005945 	.word	0x08005945
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005955 	.word	0x08005955
 8005930:	0800595d 	.word	0x0800595d
 8005934:	2300      	movs	r3, #0
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e050      	b.n	80059de <UART_SetConfig+0x5a6>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e04c      	b.n	80059de <UART_SetConfig+0x5a6>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e048      	b.n	80059de <UART_SetConfig+0x5a6>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e044      	b.n	80059de <UART_SetConfig+0x5a6>
 8005954:	2320      	movs	r3, #32
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e040      	b.n	80059de <UART_SetConfig+0x5a6>
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e03c      	b.n	80059de <UART_SetConfig+0x5a6>
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e038      	b.n	80059de <UART_SetConfig+0x5a6>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5b      	ldr	r2, [pc, #364]	; (8005ae0 <UART_SetConfig+0x6a8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d130      	bne.n	80059d8 <UART_SetConfig+0x5a0>
 8005976:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <UART_SetConfig+0x69c>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b05      	cmp	r3, #5
 8005980:	d826      	bhi.n	80059d0 <UART_SetConfig+0x598>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x550>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059a1 	.word	0x080059a1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	2302      	movs	r3, #2
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e01a      	b.n	80059de <UART_SetConfig+0x5a6>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e016      	b.n	80059de <UART_SetConfig+0x5a6>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e012      	b.n	80059de <UART_SetConfig+0x5a6>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e00e      	b.n	80059de <UART_SetConfig+0x5a6>
 80059c0:	2320      	movs	r3, #32
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e00a      	b.n	80059de <UART_SetConfig+0x5a6>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e006      	b.n	80059de <UART_SetConfig+0x5a6>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e002      	b.n	80059de <UART_SetConfig+0x5a6>
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3f      	ldr	r2, [pc, #252]	; (8005ae0 <UART_SetConfig+0x6a8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	f040 80f8 	bne.w	8005bda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	dc46      	bgt.n	8005a80 <UART_SetConfig+0x648>
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	f2c0 8082 	blt.w	8005afc <UART_SetConfig+0x6c4>
 80059f8:	3b02      	subs	r3, #2
 80059fa:	2b1e      	cmp	r3, #30
 80059fc:	d87e      	bhi.n	8005afc <UART_SetConfig+0x6c4>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x5cc>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a87 	.word	0x08005a87
 8005a08:	08005afd 	.word	0x08005afd
 8005a0c:	08005a8f 	.word	0x08005a8f
 8005a10:	08005afd 	.word	0x08005afd
 8005a14:	08005afd 	.word	0x08005afd
 8005a18:	08005afd 	.word	0x08005afd
 8005a1c:	08005a9f 	.word	0x08005a9f
 8005a20:	08005afd 	.word	0x08005afd
 8005a24:	08005afd 	.word	0x08005afd
 8005a28:	08005afd 	.word	0x08005afd
 8005a2c:	08005afd 	.word	0x08005afd
 8005a30:	08005afd 	.word	0x08005afd
 8005a34:	08005afd 	.word	0x08005afd
 8005a38:	08005afd 	.word	0x08005afd
 8005a3c:	08005aaf 	.word	0x08005aaf
 8005a40:	08005afd 	.word	0x08005afd
 8005a44:	08005afd 	.word	0x08005afd
 8005a48:	08005afd 	.word	0x08005afd
 8005a4c:	08005afd 	.word	0x08005afd
 8005a50:	08005afd 	.word	0x08005afd
 8005a54:	08005afd 	.word	0x08005afd
 8005a58:	08005afd 	.word	0x08005afd
 8005a5c:	08005afd 	.word	0x08005afd
 8005a60:	08005afd 	.word	0x08005afd
 8005a64:	08005afd 	.word	0x08005afd
 8005a68:	08005afd 	.word	0x08005afd
 8005a6c:	08005afd 	.word	0x08005afd
 8005a70:	08005afd 	.word	0x08005afd
 8005a74:	08005afd 	.word	0x08005afd
 8005a78:	08005afd 	.word	0x08005afd
 8005a7c:	08005aef 	.word	0x08005aef
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d037      	beq.n	8005af4 <UART_SetConfig+0x6bc>
 8005a84:	e03a      	b.n	8005afc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a86:	f7fe fa1d 	bl	8003ec4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a8c:	e03c      	b.n	8005b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fa2c 	bl	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a9c:	e034      	b.n	8005b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a9e:	f107 0318 	add.w	r3, r7, #24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fb78 	bl	8004198 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aac:	e02c      	b.n	8005b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <UART_SetConfig+0x69c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <UART_SetConfig+0x69c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	08db      	lsrs	r3, r3, #3
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	4a07      	ldr	r2, [pc, #28]	; (8005ae4 <UART_SetConfig+0x6ac>)
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005acc:	e01c      	b.n	8005b08 <UART_SetConfig+0x6d0>
 8005ace:	bf00      	nop
 8005ad0:	40011400 	.word	0x40011400
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	40007800 	.word	0x40007800
 8005adc:	40007c00 	.word	0x40007c00
 8005ae0:	58000c00 	.word	0x58000c00
 8005ae4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b9d      	ldr	r3, [pc, #628]	; (8005d60 <UART_SetConfig+0x928>)
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aec:	e00c      	b.n	8005b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aee:	4b9d      	ldr	r3, [pc, #628]	; (8005d64 <UART_SetConfig+0x92c>)
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af2:	e009      	b.n	8005b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afa:	e005      	b.n	8005b08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 81de 	beq.w	8005ecc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	4a94      	ldr	r2, [pc, #592]	; (8005d68 <UART_SetConfig+0x930>)
 8005b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d305      	bcc.n	8005b40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d903      	bls.n	8005b48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b46:	e1c1      	b.n	8005ecc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	60fa      	str	r2, [r7, #12]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	4a84      	ldr	r2, [pc, #528]	; (8005d68 <UART_SetConfig+0x930>)
 8005b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b6a:	f7fa fbb5 	bl	80002d8 <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	020b      	lsls	r3, r1, #8
 8005b80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b84:	0202      	lsls	r2, r0, #8
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	6849      	ldr	r1, [r1, #4]
 8005b8a:	0849      	lsrs	r1, r1, #1
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	4605      	mov	r5, r0
 8005b92:	eb12 0804 	adds.w	r8, r2, r4
 8005b96:	eb43 0905 	adc.w	r9, r3, r5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	4693      	mov	fp, r2
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	4640      	mov	r0, r8
 8005baa:	4649      	mov	r1, r9
 8005bac:	f7fa fb94 	bl	80002d8 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bbe:	d308      	bcc.n	8005bd2 <UART_SetConfig+0x79a>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc6:	d204      	bcs.n	8005bd2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	e17c      	b.n	8005ecc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bd8:	e178      	b.n	8005ecc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be2:	f040 80c5 	bne.w	8005d70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005be6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	dc48      	bgt.n	8005c80 <UART_SetConfig+0x848>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db7b      	blt.n	8005cea <UART_SetConfig+0x8b2>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d879      	bhi.n	8005cea <UART_SetConfig+0x8b2>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <UART_SetConfig+0x7c4>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c87 	.word	0x08005c87
 8005c00:	08005c8f 	.word	0x08005c8f
 8005c04:	08005ceb 	.word	0x08005ceb
 8005c08:	08005ceb 	.word	0x08005ceb
 8005c0c:	08005c97 	.word	0x08005c97
 8005c10:	08005ceb 	.word	0x08005ceb
 8005c14:	08005ceb 	.word	0x08005ceb
 8005c18:	08005ceb 	.word	0x08005ceb
 8005c1c:	08005ca7 	.word	0x08005ca7
 8005c20:	08005ceb 	.word	0x08005ceb
 8005c24:	08005ceb 	.word	0x08005ceb
 8005c28:	08005ceb 	.word	0x08005ceb
 8005c2c:	08005ceb 	.word	0x08005ceb
 8005c30:	08005ceb 	.word	0x08005ceb
 8005c34:	08005ceb 	.word	0x08005ceb
 8005c38:	08005ceb 	.word	0x08005ceb
 8005c3c:	08005cb7 	.word	0x08005cb7
 8005c40:	08005ceb 	.word	0x08005ceb
 8005c44:	08005ceb 	.word	0x08005ceb
 8005c48:	08005ceb 	.word	0x08005ceb
 8005c4c:	08005ceb 	.word	0x08005ceb
 8005c50:	08005ceb 	.word	0x08005ceb
 8005c54:	08005ceb 	.word	0x08005ceb
 8005c58:	08005ceb 	.word	0x08005ceb
 8005c5c:	08005ceb 	.word	0x08005ceb
 8005c60:	08005ceb 	.word	0x08005ceb
 8005c64:	08005ceb 	.word	0x08005ceb
 8005c68:	08005ceb 	.word	0x08005ceb
 8005c6c:	08005ceb 	.word	0x08005ceb
 8005c70:	08005ceb 	.word	0x08005ceb
 8005c74:	08005ceb 	.word	0x08005ceb
 8005c78:	08005ceb 	.word	0x08005ceb
 8005c7c:	08005cdd 	.word	0x08005cdd
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d02e      	beq.n	8005ce2 <UART_SetConfig+0x8aa>
 8005c84:	e031      	b.n	8005cea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c86:	f7fc fee7 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8005c8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c8c:	e033      	b.n	8005cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c8e:	f7fc fef9 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8005c92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c94:	e02f      	b.n	8005cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe f928 	bl	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca4:	e027      	b.n	8005cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca6:	f107 0318 	add.w	r3, r7, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fa74 	bl	8004198 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb4:	e01f      	b.n	8005cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <UART_SetConfig+0x934>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cc2:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <UART_SetConfig+0x934>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <UART_SetConfig+0x928>)
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cd4:	e00f      	b.n	8005cf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <UART_SetConfig+0x928>)
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cda:	e00c      	b.n	8005cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <UART_SetConfig+0x92c>)
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80e7 	beq.w	8005ecc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <UART_SetConfig+0x930>)
 8005d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	441a      	add	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d916      	bls.n	8005d58 <UART_SetConfig+0x920>
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d212      	bcs.n	8005d58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f023 030f 	bic.w	r3, r3, #15
 8005d3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	e0b9      	b.n	8005ecc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d5e:	e0b5      	b.n	8005ecc <UART_SetConfig+0xa94>
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	08006be4 	.word	0x08006be4
 8005d6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	dc49      	bgt.n	8005e0c <UART_SetConfig+0x9d4>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	db7c      	blt.n	8005e76 <UART_SetConfig+0xa3e>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d87a      	bhi.n	8005e76 <UART_SetConfig+0xa3e>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x950>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005e13 	.word	0x08005e13
 8005d8c:	08005e1b 	.word	0x08005e1b
 8005d90:	08005e77 	.word	0x08005e77
 8005d94:	08005e77 	.word	0x08005e77
 8005d98:	08005e23 	.word	0x08005e23
 8005d9c:	08005e77 	.word	0x08005e77
 8005da0:	08005e77 	.word	0x08005e77
 8005da4:	08005e77 	.word	0x08005e77
 8005da8:	08005e33 	.word	0x08005e33
 8005dac:	08005e77 	.word	0x08005e77
 8005db0:	08005e77 	.word	0x08005e77
 8005db4:	08005e77 	.word	0x08005e77
 8005db8:	08005e77 	.word	0x08005e77
 8005dbc:	08005e77 	.word	0x08005e77
 8005dc0:	08005e77 	.word	0x08005e77
 8005dc4:	08005e77 	.word	0x08005e77
 8005dc8:	08005e43 	.word	0x08005e43
 8005dcc:	08005e77 	.word	0x08005e77
 8005dd0:	08005e77 	.word	0x08005e77
 8005dd4:	08005e77 	.word	0x08005e77
 8005dd8:	08005e77 	.word	0x08005e77
 8005ddc:	08005e77 	.word	0x08005e77
 8005de0:	08005e77 	.word	0x08005e77
 8005de4:	08005e77 	.word	0x08005e77
 8005de8:	08005e77 	.word	0x08005e77
 8005dec:	08005e77 	.word	0x08005e77
 8005df0:	08005e77 	.word	0x08005e77
 8005df4:	08005e77 	.word	0x08005e77
 8005df8:	08005e77 	.word	0x08005e77
 8005dfc:	08005e77 	.word	0x08005e77
 8005e00:	08005e77 	.word	0x08005e77
 8005e04:	08005e77 	.word	0x08005e77
 8005e08:	08005e69 	.word	0x08005e69
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	d02e      	beq.n	8005e6e <UART_SetConfig+0xa36>
 8005e10:	e031      	b.n	8005e76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7fc fe21 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8005e16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e18:	e033      	b.n	8005e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e1a:	f7fc fe33 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8005e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e20:	e02f      	b.n	8005e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe f862 	bl	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e30:	e027      	b.n	8005e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e32:	f107 0318 	add.w	r3, r7, #24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe f9ae 	bl	8004198 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e40:	e01f      	b.n	8005e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e42:	4b2d      	ldr	r3, [pc, #180]	; (8005ef8 <UART_SetConfig+0xac0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ef8 <UART_SetConfig+0xac0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	08db      	lsrs	r3, r3, #3
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	4a28      	ldr	r2, [pc, #160]	; (8005efc <UART_SetConfig+0xac4>)
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e60:	e00f      	b.n	8005e82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005e62:	4b26      	ldr	r3, [pc, #152]	; (8005efc <UART_SetConfig+0xac4>)
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e66:	e00c      	b.n	8005e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <UART_SetConfig+0xac8>)
 8005e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e6c:	e009      	b.n	8005e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e74:	e005      	b.n	8005e82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e80:	bf00      	nop
    }

    if (pclk != 0U)
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d021      	beq.n	8005ecc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <UART_SetConfig+0xacc>)
 8005e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	441a      	add	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	d909      	bls.n	8005ec6 <UART_SetConfig+0xa8e>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	d205      	bcs.n	8005ec6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
 8005ec4:	e002      	b.n	8005ecc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ee8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3748      	adds	r7, #72	; 0x48
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef6:	bf00      	nop
 8005ef8:	58024400 	.word	0x58024400
 8005efc:	03d09000 	.word	0x03d09000
 8005f00:	003d0900 	.word	0x003d0900
 8005f04:	08006be4 	.word	0x08006be4

08005f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01a      	beq.n	800601e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006006:	d10a      	bne.n	800601e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b098      	sub	sp, #96	; 0x60
 8006050:	af02      	add	r7, sp, #8
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800605c:	f7fb f892 	bl	8001184 <HAL_GetTick>
 8006060:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b08      	cmp	r3, #8
 800606e:	d12f      	bne.n	80060d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006078:	2200      	movs	r2, #0
 800607a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f88e 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d022      	beq.n	80060d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609e:	653b      	str	r3, [r7, #80]	; 0x50
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
 80060aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e6      	bne.n	800608a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e063      	b.n	8006198 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d149      	bne.n	8006172 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e6:	2200      	movs	r2, #0
 80060e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f857 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d03c      	beq.n	8006172 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	623b      	str	r3, [r7, #32]
   return(result);
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800610c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
 8006118:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800611c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e6      	bne.n	80060f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	60fb      	str	r3, [r7, #12]
   return(result);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	64bb      	str	r3, [r7, #72]	; 0x48
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614a:	61fa      	str	r2, [r7, #28]
 800614c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	69b9      	ldr	r1, [r7, #24]
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	617b      	str	r3, [r7, #20]
   return(result);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e012      	b.n	8006198 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3758      	adds	r7, #88	; 0x58
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	4613      	mov	r3, r2
 80061ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b0:	e049      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d045      	beq.n	8006246 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fa ffe3 	bl	8001184 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e048      	b.n	8006266 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d031      	beq.n	8006246 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d110      	bne.n	8006212 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2208      	movs	r2, #8
 80061f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f839 	bl	8006270 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2208      	movs	r2, #8
 8006202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e029      	b.n	8006266 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006220:	d111      	bne.n	8006246 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800622a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f81f 	bl	8006270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e00f      	b.n	8006266 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69da      	ldr	r2, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	429a      	cmp	r2, r3
 8006262:	d0a6      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b095      	sub	sp, #84	; 0x54
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
 8006298:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800629c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e6      	bne.n	8006278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	4b1e      	ldr	r3, [pc, #120]	; (8006338 <UART_EndRxTransfer+0xc8>)
 80062be:	4013      	ands	r3, r2
 80062c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e5      	bne.n	80062aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d118      	bne.n	8006318 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0310 	bic.w	r3, r3, #16
 80062fa:	647b      	str	r3, [r7, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6979      	ldr	r1, [r7, #20]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	613b      	str	r3, [r7, #16]
   return(result);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e6      	bne.n	80062e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800632c:	bf00      	nop
 800632e:	3754      	adds	r7, #84	; 0x54
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	effffffe 	.word	0xeffffffe

0800633c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_UARTEx_DisableFifoMode+0x16>
 800634e:	2302      	movs	r3, #2
 8006350:	e027      	b.n	80063a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2224      	movs	r2, #36	; 0x24
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006380:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e02d      	b.n	8006422 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	; 0x24
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f850 	bl	80064a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800643e:	2302      	movs	r3, #2
 8006440:	e02d      	b.n	800649e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2224      	movs	r2, #36	; 0x24
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f812 	bl	80064a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d108      	bne.n	80064ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064c8:	e031      	b.n	800652e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064ca:	2310      	movs	r3, #16
 80064cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ce:	2310      	movs	r3, #16
 80064d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	0e5b      	lsrs	r3, r3, #25
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	0f5b      	lsrs	r3, r3, #29
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	7b3a      	ldrb	r2, [r7, #12]
 80064f6:	4911      	ldr	r1, [pc, #68]	; (800653c <UARTEx_SetNbDataToProcess+0x94>)
 80064f8:	5c8a      	ldrb	r2, [r1, r2]
 80064fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064fe:	7b3a      	ldrb	r2, [r7, #12]
 8006500:	490f      	ldr	r1, [pc, #60]	; (8006540 <UARTEx_SetNbDataToProcess+0x98>)
 8006502:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006504:	fb93 f3f2 	sdiv	r3, r3, r2
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	7b7a      	ldrb	r2, [r7, #13]
 8006514:	4909      	ldr	r1, [pc, #36]	; (800653c <UARTEx_SetNbDataToProcess+0x94>)
 8006516:	5c8a      	ldrb	r2, [r1, r2]
 8006518:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800651c:	7b7a      	ldrb	r2, [r7, #13]
 800651e:	4908      	ldr	r1, [pc, #32]	; (8006540 <UARTEx_SetNbDataToProcess+0x98>)
 8006520:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006522:	fb93 f3f2 	sdiv	r3, r3, r2
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	08006bfc 	.word	0x08006bfc
 8006540:	08006c04 	.word	0x08006c04

08006544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006544:	b084      	sub	sp, #16
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	f107 001c 	add.w	r0, r7, #28
 8006552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b01      	cmp	r3, #1
 800655a:	d120      	bne.n	800659e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <USB_CoreInit+0xd4>)
 800656e:	4013      	ands	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d105      	bne.n	8006592 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 faac 	bl	8006af0 <USB_CoreReset>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
 800659c:	e01a      	b.n	80065d4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faa0 	bl	8006af0 <USB_CoreReset>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
 80065c6:	e005      	b.n	80065d4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d116      	bne.n	8006608 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	b29a      	uxth	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <USB_CoreInit+0xd8>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f043 0206 	orr.w	r2, r3, #6
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006614:	b004      	add	sp, #16
 8006616:	4770      	bx	lr
 8006618:	ffbdffbf 	.word	0xffbdffbf
 800661c:	03ee0000 	.word	0x03ee0000

08006620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f023 0201 	bic.w	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d115      	bne.n	8006690 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006670:	2001      	movs	r0, #1
 8006672:	f7fa fd93 	bl	800119c <HAL_Delay>
      ms++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa29 	bl	8006ad4 <USB_GetMode>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d01e      	beq.n	80066c6 <USB_SetCurrentMode+0x84>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b31      	cmp	r3, #49	; 0x31
 800668c:	d9f0      	bls.n	8006670 <USB_SetCurrentMode+0x2e>
 800668e:	e01a      	b.n	80066c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d115      	bne.n	80066c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066a2:	2001      	movs	r0, #1
 80066a4:	f7fa fd7a 	bl	800119c <HAL_Delay>
      ms++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa10 	bl	8006ad4 <USB_GetMode>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <USB_SetCurrentMode+0x84>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b31      	cmp	r3, #49	; 0x31
 80066be:	d9f0      	bls.n	80066a2 <USB_SetCurrentMode+0x60>
 80066c0:	e001      	b.n	80066c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e005      	b.n	80066d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b32      	cmp	r3, #50	; 0x32
 80066ca:	d101      	bne.n	80066d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066dc:	b084      	sub	sp, #16
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	e009      	b.n	8006710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3340      	adds	r3, #64	; 0x40
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	2200      	movs	r2, #0
 8006708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	3301      	adds	r3, #1
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b0e      	cmp	r3, #14
 8006714:	d9f2      	bls.n	80066fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d11c      	bne.n	8006756 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f043 0302 	orr.w	r3, r3, #2
 800672e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e005      	b.n	8006762 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	4619      	mov	r1, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	461a      	mov	r2, r3
 800677e:	680b      	ldr	r3, [r1, #0]
 8006780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10c      	bne.n	80067a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800678e:	2100      	movs	r1, #0
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f965 	bl	8006a60 <USB_SetDevSpeed>
 8006796:	e008      	b.n	80067aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006798:	2101      	movs	r1, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f960 	bl	8006a60 <USB_SetDevSpeed>
 80067a0:	e003      	b.n	80067aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067a2:	2103      	movs	r1, #3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f95b 	bl	8006a60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067aa:	2110      	movs	r1, #16
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8f3 	bl	8006998 <USB_FlushTxFifo>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f91f 	bl	8006a00 <USB_FlushRxFifo>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	461a      	mov	r2, r3
 80067d4:	2300      	movs	r3, #0
 80067d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	461a      	mov	r2, r3
 80067e0:	2300      	movs	r3, #0
 80067e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	461a      	mov	r2, r3
 80067ec:	2300      	movs	r3, #0
 80067ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	e043      	b.n	800687e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800680c:	d118      	bne.n	8006840 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e013      	b.n	8006852 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	461a      	mov	r2, r3
 8006838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e008      	b.n	8006852 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3301      	adds	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	d3b7      	bcc.n	80067f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	e043      	b.n	8006914 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a2:	d118      	bne.n	80068d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	461a      	mov	r2, r3
 80068b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e013      	b.n	80068e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	461a      	mov	r2, r3
 80068ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e008      	b.n	80068e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	461a      	mov	r2, r3
 80068e4:	2300      	movs	r3, #0
 80068e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	461a      	mov	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	461a      	mov	r2, r3
 8006908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800690c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	3301      	adds	r3, #1
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	429a      	cmp	r2, r3
 800691a:	d3b7      	bcc.n	800688c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800692a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800692e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800693c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f043 0210 	orr.w	r2, r3, #16
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <USB_DevInit+0x2b4>)
 8006956:	4313      	orrs	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f043 0208 	orr.w	r2, r3, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800696e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d105      	bne.n	8006980 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	4b06      	ldr	r3, [pc, #24]	; (8006994 <USB_DevInit+0x2b8>)
 800697a:	4313      	orrs	r3, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800698c:	b004      	add	sp, #16
 800698e:	4770      	bx	lr
 8006990:	803c3800 	.word	0x803c3800
 8006994:	40000004 	.word	0x40000004

08006998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a13      	ldr	r2, [pc, #76]	; (80069fc <USB_FlushTxFifo+0x64>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d901      	bls.n	80069b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e01b      	b.n	80069f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	daf2      	bge.n	80069a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	019b      	lsls	r3, r3, #6
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <USB_FlushTxFifo+0x64>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e006      	b.n	80069f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d0f0      	beq.n	80069d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	00030d40 	.word	0x00030d40

08006a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a11      	ldr	r2, [pc, #68]	; (8006a5c <USB_FlushRxFifo+0x5c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e018      	b.n	8006a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	daf2      	bge.n	8006a0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2210      	movs	r2, #16
 8006a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <USB_FlushRxFifo+0x5c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d901      	bls.n	8006a42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e006      	b.n	8006a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d0f0      	beq.n	8006a30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	00030d40 	.word	0x00030d40

08006a60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006aac:	f023 0303 	bic.w	r3, r3, #3
 8006ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac0:	f043 0302 	orr.w	r3, r3, #2
 8006ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <USB_CoreReset+0x64>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e01b      	b.n	8006b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	daf2      	bge.n	8006afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <USB_CoreReset+0x64>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e006      	b.n	8006b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d0f0      	beq.n	8006b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	00030d40 	.word	0x00030d40

08006b58 <memset>:
 8006b58:	4402      	add	r2, r0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4d0d      	ldr	r5, [pc, #52]	; (8006ba0 <__libc_init_array+0x38>)
 8006b6c:	4c0d      	ldr	r4, [pc, #52]	; (8006ba4 <__libc_init_array+0x3c>)
 8006b6e:	1b64      	subs	r4, r4, r5
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	2600      	movs	r6, #0
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	4d0b      	ldr	r5, [pc, #44]	; (8006ba8 <__libc_init_array+0x40>)
 8006b7a:	4c0c      	ldr	r4, [pc, #48]	; (8006bac <__libc_init_array+0x44>)
 8006b7c:	f000 f818 	bl	8006bb0 <_init>
 8006b80:	1b64      	subs	r4, r4, r5
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	2600      	movs	r6, #0
 8006b86:	42a6      	cmp	r6, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b90:	4798      	blx	r3
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9a:	4798      	blx	r3
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	08006c14 	.word	0x08006c14
 8006ba4:	08006c14 	.word	0x08006c14
 8006ba8:	08006c14 	.word	0x08006c14
 8006bac:	08006c18 	.word	0x08006c18

08006bb0 <_init>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr

08006bbc <_fini>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	bf00      	nop
 8006bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc2:	bc08      	pop	{r3}
 8006bc4:	469e      	mov	lr, r3
 8006bc6:	4770      	bx	lr
