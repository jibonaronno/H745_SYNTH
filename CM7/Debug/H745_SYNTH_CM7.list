
H745_SYNTH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db8  08006db8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc0  08006dc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  24000010  08006dd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000720  08006dd8  00020720  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3bf  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003144  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001168  00000000  00000000  00040bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003da88  00000000  00000000  00041d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cde0  00000000  00000000  0007f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a0e9c  00000000  00000000  0009c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006050  00000000  00000000  0023d434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00243484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006d50 	.word	0x08006d50

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006d50 	.word	0x08006d50

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <main+0xcc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fafb 	bl	8000d24 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fd73 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f855 	bl	80007e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <main+0xcc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a23      	ldr	r2, [pc, #140]	; (80007cc <main+0xcc>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <main+0xcc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 f8b5 	bl	80018c4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 f8cb 	bl	80018f8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <main+0xcc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 facd 	bl	8000d24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa75 	bl	8000c78 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078e:	f000 fa41 	bl	8000c14 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8f1 	bl	8000978 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000796:	f000 f9a1 	bl	8000adc <MX_TIM3_Init>
  MX_TIM4_Init();
 800079a:	f000 f9ed 	bl	8000b78 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800079e:	f000 f89f 	bl	80008e0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80007a2:	f000 f935 	bl	8000a10 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007aa:	f000 fdc7 	bl	800133c <HAL_Delay>
	  HAL_UART_Transmit(&huart3, "ADC1 : \n", 8, -1);
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	2208      	movs	r2, #8
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <main+0xd0>)
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <main+0xd4>)
 80007b8:	f004 fe80 	bl	80054bc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, "ADC0 : \n", 8, -1);
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2208      	movs	r2, #8
 80007c2:	4905      	ldr	r1, [pc, #20]	; (80007d8 <main+0xd8>)
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <main+0xdc>)
 80007c6:	f004 fe79 	bl	80054bc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80007ca:	e7ec      	b.n	80007a6 <main+0xa6>
 80007cc:	58024400 	.word	0x58024400
 80007d0:	08006d68 	.word	0x08006d68
 80007d4:	240000c0 	.word	0x240000c0
 80007d8:	08006d74 	.word	0x08006d74
 80007dc:	2400002c 	.word	0x2400002c

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 fa82 	bl	8006cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 fa7c 	bl	8006cf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f001 f9d5 	bl	8001bb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <SystemClock_Config+0xf8>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	4a32      	ldr	r2, [pc, #200]	; (80008d8 <SystemClock_Config+0xf8>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <SystemClock_Config+0xf8>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <SystemClock_Config+0xfc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <SystemClock_Config+0xfc>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <SystemClock_Config+0xfc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800084c:	2309      	movs	r3, #9
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000866:	2312      	movs	r3, #18
 8000868:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000876:	230c      	movs	r3, #12
 8000878:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800087a:	2302      	movs	r3, #2
 800087c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800087e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000882:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f9fb 	bl	8001c84 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000894:	f000 fa46 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	233f      	movs	r3, #63	; 0x3f
 800089a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2303      	movs	r3, #3
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fe3a 	bl	8002538 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xee>
  {
    Error_Handler();
 80008ca:	f000 fa2b 	bl	8000d24 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3770      	adds	r7, #112	; 0x70
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58000400 	.word	0x58000400
 80008dc:	58024800 	.word	0x58024800

080008e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_LPUART1_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 800092a:	f004 fd77 	bl	800541c <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f9f6 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 800093c:	f005 fe07 	bl	800654e <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f9ed 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 800094e:	f005 fe3c 	bl	80065ca <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f9e4 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_LPUART1_UART_Init+0x90>)
 800095e:	f005 fdbd 	bl	80064dc <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f9dc 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2400002c 	.word	0x2400002c
 8000974:	58000c00 	.word	0x58000c00

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_USART3_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009c2:	f004 fd2b 	bl	800541c <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9aa 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009d4:	f005 fdbb 	bl	800654e <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f9a1 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009e6:	f005 fdf0 	bl	80065ca <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f998 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009f6:	f005 fd71 	bl	80064dc <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f990 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	240000c0 	.word	0x240000c0
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ad8 <MX_RTC_Init+0xc8>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a36:	227f      	movs	r2, #127	; 0x7f
 8000a38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a58:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a5a:	f003 ff25 	bl	80048a8 <HAL_RTC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f95e 	bl	8000d24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000a84:	f003 ff92 	bl	80049ac <HAL_RTC_SetTime>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a8e:	f000 f949 	bl	8000d24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a92:	2301      	movs	r3, #1
 8000a94:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a96:	2301      	movs	r3, #1
 8000a98:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000aaa:	f004 f81d 	bl	8004ae8 <HAL_RTC_SetDate>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ab4:	f000 f936 	bl	8000d24 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000ab8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_RTC_Init+0xc4>)
 8000abe:	f004 f951 	bl	8004d64 <HAL_RTCEx_SetCalibrationOutPut>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000ac8:	f000 f92c 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000154 	.word	0x24000154
 8000ad8:	58004000 	.word	0x58004000

08000adc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <MX_TIM3_Init+0x98>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b1e:	4814      	ldr	r0, [pc, #80]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b20:	f004 f967 	bl	8004df2 <HAL_TIM_Base_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f8fb 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b3c:	f004 f9b0 	bl	8004ea0 <HAL_TIM_ConfigClockSource>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f000 f8ed 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_TIM3_Init+0x94>)
 8000b58:	f004 fbd2 	bl	8005300 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b62:	f000 f8df 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	24000178 	.word	0x24000178
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <MX_TIM4_Init+0x98>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000b9e:	2206      	movs	r2, #6
 8000ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000baa:	2210      	movs	r2, #16
 8000bac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bbc:	f004 f919 	bl	8004df2 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f8ad 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bd8:	f004 f962 	bl	8004ea0 <HAL_TIM_ConfigClockSource>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f89f 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bf4:	f004 fb84 	bl	8005300 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000bfe:	f000 f891 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	240001c4 	.word	0x240001c4
 8000c10:	40000800 	.word	0x40000800

08000c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c20:	2209      	movs	r2, #9
 8000c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5c:	f000 fe60 	bl	8001920 <HAL_PCD_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c66:	f000 f85d 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000210 	.word	0x24000210
 8000c74:	40080000 	.word	0x40080000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_GPIO_Init+0xa8>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	58024400 	.word	0x58024400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x30>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0be      	sub	sp, #248	; 0xf8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	22c0      	movs	r2, #192	; 0xc0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 ffb7 	bl	8006cf8 <memset>
  if(huart->Instance==LPUART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a5f      	ldr	r2, [pc, #380]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d16b      	bne.n	8000e6c <HAL_UART_MspInit+0x108>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d94:	f04f 0204 	mov.w	r2, #4
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 ff50 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000db6:	f7ff ffb5 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dba:	4b55      	ldr	r3, [pc, #340]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc0:	4a53      	ldr	r2, [pc, #332]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dca:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a4c      	ldr	r2, [pc, #304]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA10     ------> LPUART1_RX
    PB6     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4836      	ldr	r0, [pc, #216]	; (8000f14 <HAL_UART_MspInit+0x1b0>)
 8000e3c:	f000 fb92 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e40:	2340      	movs	r3, #64	; 0x40
 8000e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e62:	4619      	mov	r1, r3
 8000e64:	482c      	ldr	r0, [pc, #176]	; (8000f18 <HAL_UART_MspInit+0x1b4>)
 8000e66:	f000 fb7d 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6a:	e04b      	b.n	8000f04 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <HAL_UART_MspInit+0x1b8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d146      	bne.n	8000f04 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e76:	f04f 0202 	mov.w	r2, #2
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fedf 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000e98:	f7ff ff44 	bl	8000d24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ed8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000edc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4808      	ldr	r0, [pc, #32]	; (8000f20 <HAL_UART_MspInit+0x1bc>)
 8000f00:	f000 fb30 	bl	8001564 <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	37f8      	adds	r7, #248	; 0xf8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	58000c00 	.word	0x58000c00
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020000 	.word	0x58020000
 8000f18:	58020400 	.word	0x58020400
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	58020c00 	.word	0x58020c00

08000f24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0ba      	sub	sp, #232	; 0xe8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	22c0      	movs	r2, #192	; 0xc0
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 fed7 	bl	8006cf8 <memset>
  if(hrtc->Instance==RTC)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <HAL_RTC_MspInit+0xb4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d13d      	bne.n	8000fd0 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fe6f 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8000f78:	f7ff fed4 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_RTC_MspInit+0xb8>)
 8000f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f80:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_RTC_MspInit+0xb8>)
 8000f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f86:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_RTC_MspInit+0xb8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <HAL_RTC_MspInit+0xb8>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_RTC_MspInit+0xb8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_RTC_MspInit+0xbc>)
 8000fcc:	f000 faca 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	37e8      	adds	r7, #232	; 0xe8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58004000 	.word	0x58004000
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	58020400 	.word	0x58020400

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_TIM_Base_MspInit+0x68>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10f      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_TIM_Base_MspInit+0x6c>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_TIM_Base_MspInit+0x6c>)
 8001008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001014:	e013      	b.n	800103e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM4)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_TIM_Base_MspInit+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d10e      	bne.n	800103e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_TIM_Base_MspInit+0x6c>)
 8001022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_TIM_Base_MspInit+0x6c>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_TIM_Base_MspInit+0x6c>)
 8001032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40000400 	.word	0x40000400
 8001050:	58024400 	.word	0x58024400
 8001054:	40000800 	.word	0x40000800

08001058 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ba      	sub	sp, #232	; 0xe8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	22c0      	movs	r2, #192	; 0xc0
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f005 fe3d 	bl	8006cf8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <HAL_PCD_MspInit+0x10c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d169      	bne.n	800115c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001088:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001098:	2312      	movs	r3, #18
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80010a0:	2303      	movs	r3, #3
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 80010ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010b2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fdc5 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80010cc:	f7ff fe2a 	bl	8000d24 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010d0:	f000 fdc8 	bl	8001c64 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_PCD_MspInit+0x110>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <HAL_PCD_MspInit+0x110>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PCD_MspInit+0x110>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010f2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800110c:	230a      	movs	r3, #10
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001116:	4619      	mov	r1, r3
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <HAL_PCD_MspInit+0x114>)
 800111a:	f000 fa23 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800111e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <HAL_PCD_MspInit+0x114>)
 800113a:	f000 fa13 	bl	8001564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_PCD_MspInit+0x110>)
 8001140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_PCD_MspInit+0x110>)
 8001146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800114a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_PCD_MspInit+0x110>)
 8001150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	37e8      	adds	r7, #232	; 0xe8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40080000 	.word	0x40080000
 8001168:	58024400 	.word	0x58024400
 800116c:	58020000 	.word	0x58020000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f89e 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c8:	f7ff fa04 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f005 fd89 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fa83 	bl	8000700 <main>
  bx  lr
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001200:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001204:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001208:	08006dc8 	.word	0x08006dc8
  ldr r2, =_sbss
 800120c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001210:	24000720 	.word	0x24000720

08001214 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC3_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f96e 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001224:	f001 fb3e 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_Init+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <HAL_Init+0x6c>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_Init+0x6c>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x70>)
 800125a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x74>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f814 	bl	8001290 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e002      	b.n	8001278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001272:	f7ff fd5d 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	08006d80 	.word	0x08006d80
 8001288:	24000004 	.word	0x24000004
 800128c:	24000000 	.word	0x24000000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_InitTick+0x60>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e021      	b.n	80012e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_InitTick+0x64>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_InitTick+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f945 	bl	800154a <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f91d 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x68>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2400000c 	.word	0x2400000c
 80012f4:	24000000 	.word	0x24000000
 80012f8:	24000008 	.word	0x24000008

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2400000c 	.word	0x2400000c
 8001320:	2400071c 	.word	0x2400071c

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2400071c 	.word	0x2400071c

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400000c 	.word	0x2400000c

08001384 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetREVID+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1b      	lsrs	r3, r3, #16
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	5c001000 	.word	0x5c001000

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff47 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff5e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffb2 	bl	80014bc <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001572:	4b89      	ldr	r3, [pc, #548]	; (8001798 <HAL_GPIO_Init+0x234>)
 8001574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001576:	e194      	b.n	80018a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2101      	movs	r1, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8186 	beq.w	800189c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d005      	beq.n	80015a8 <HAL_GPIO_Init+0x44>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d130      	bne.n	800160a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015de:	2201      	movs	r2, #1
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b03      	cmp	r3, #3
 8001614:	d017      	beq.n	8001646 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d123      	bne.n	800169a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3208      	adds	r2, #8
 800165a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	69b9      	ldr	r1, [r7, #24]
 8001696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0203 	and.w	r2, r3, #3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80e0 	beq.w	800189c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_GPIO_Init+0x238>)
 80016de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e2:	4a2e      	ldr	r2, [pc, #184]	; (800179c <HAL_GPIO_Init+0x238>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_GPIO_Init+0x238>)
 80016ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <HAL_GPIO_Init+0x23c>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_GPIO_Init+0x240>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d052      	beq.n	80017cc <HAL_GPIO_Init+0x268>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_GPIO_Init+0x244>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d031      	beq.n	8001792 <HAL_GPIO_Init+0x22e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_GPIO_Init+0x248>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0x22a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_GPIO_Init+0x24c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d025      	beq.n	800178a <HAL_GPIO_Init+0x226>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_GPIO_Init+0x250>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01f      	beq.n	8001786 <HAL_GPIO_Init+0x222>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <HAL_GPIO_Init+0x254>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x21e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <HAL_GPIO_Init+0x258>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x21a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_GPIO_Init+0x25c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x216>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_GPIO_Init+0x260>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x212>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_GPIO_Init+0x264>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x20e>
 800176e:	2309      	movs	r3, #9
 8001770:	e02d      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 8001772:	230a      	movs	r3, #10
 8001774:	e02b      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 8001776:	2308      	movs	r3, #8
 8001778:	e029      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 800177a:	2307      	movs	r3, #7
 800177c:	e027      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 800177e:	2306      	movs	r3, #6
 8001780:	e025      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 8001782:	2305      	movs	r3, #5
 8001784:	e023      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 8001786:	2304      	movs	r3, #4
 8001788:	e021      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 800178a:	2303      	movs	r3, #3
 800178c:	e01f      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 800178e:	2302      	movs	r3, #2
 8001790:	e01d      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 8001792:	2301      	movs	r3, #1
 8001794:	e01b      	b.n	80017ce <HAL_GPIO_Init+0x26a>
 8001796:	bf00      	nop
 8001798:	58000080 	.word	0x58000080
 800179c:	58024400 	.word	0x58024400
 80017a0:	58000400 	.word	0x58000400
 80017a4:	58020000 	.word	0x58020000
 80017a8:	58020400 	.word	0x58020400
 80017ac:	58020800 	.word	0x58020800
 80017b0:	58020c00 	.word	0x58020c00
 80017b4:	58021000 	.word	0x58021000
 80017b8:	58021400 	.word	0x58021400
 80017bc:	58021800 	.word	0x58021800
 80017c0:	58021c00 	.word	0x58021c00
 80017c4:	58022000 	.word	0x58022000
 80017c8:	58022400 	.word	0x58022400
 80017cc:	2300      	movs	r3, #0
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017de:	4938      	ldr	r1, [pc, #224]	; (80018c0 <HAL_GPIO_Init+0x35c>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f47f ae63 	bne.w	8001578 <HAL_GPIO_Init+0x14>
  }
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3724      	adds	r7, #36	; 0x24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	58000400 	.word	0x58000400

080018c4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_HSEM_FastTake+0x2c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3320      	adds	r3, #32
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_HSEM_FastTake+0x30>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	58026400 	.word	0x58026400
 80018f4:	80000300 	.word	0x80000300

080018f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001902:	4906      	ldr	r1, [pc, #24]	; (800191c <HAL_HSEM_Release+0x24>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	58026400 	.word	0x58026400

08001920 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001922:	b08f      	sub	sp, #60	; 0x3c
 8001924:	af0a      	add	r7, sp, #40	; 0x28
 8001926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e116      	b.n	8001b60 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fb83 	bl	8001058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f004 ff25 	bl	80067c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	687e      	ldr	r6, [r7, #4]
 800197e:	466d      	mov	r5, sp
 8001980:	f106 0410 	add.w	r4, r6, #16
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001990:	e885 0003 	stmia.w	r5, {r0, r1}
 8001994:	1d33      	adds	r3, r6, #4
 8001996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f004 fea3 	bl	80066e4 <USB_CoreInit>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d7      	b.n	8001b60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 ff13 	bl	80067e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e04a      	b.n	8001a58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	333d      	adds	r3, #61	; 0x3d
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	333c      	adds	r3, #60	; 0x3c
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	b298      	uxth	r0, r3
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3356      	adds	r3, #86	; 0x56
 80019fe:	4602      	mov	r2, r0
 8001a00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3340      	adds	r3, #64	; 0x40
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3344      	adds	r3, #68	; 0x44
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3348      	adds	r3, #72	; 0x48
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	334c      	adds	r3, #76	; 0x4c
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3af      	bcc.n	80019c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e044      	b.n	8001af2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3301      	adds	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3b5      	bcc.n	8001a68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	687e      	ldr	r6, [r7, #4]
 8001b04:	466d      	mov	r5, sp
 8001b06:	f106 0410 	add.w	r4, r6, #16
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b1a:	1d33      	adds	r3, r6, #4
 8001b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	f004 feac 	bl	800687c <USB_DevInit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e014      	b.n	8001b60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f80a 	bl	8001b68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f005 f86a 	bl	8006c32 <USB_DevDisconnect>

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_PCDEx_ActivateLPM+0x44>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	10000003 	.word	0x10000003

08001bb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d00a      	beq.n	8001bda <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e040      	b.n	8001c58 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e03e      	b.n	8001c58 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001be2:	491f      	ldr	r1, [pc, #124]	; (8001c60 <HAL_PWREx_ConfigSupply+0xb0>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bea:	f7ff fb9b 	bl	8001324 <HAL_GetTick>
 8001bee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bf0:	e009      	b.n	8001c06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bf2:	f7ff fb97 	bl	8001324 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c00:	d901      	bls.n	8001c06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e028      	b.n	8001c58 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c12:	d1ee      	bne.n	8001bf2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b1e      	cmp	r3, #30
 8001c18:	d008      	beq.n	8001c2c <HAL_PWREx_ConfigSupply+0x7c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8001c1e:	d005      	beq.n	8001c2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b1d      	cmp	r3, #29
 8001c24:	d002      	beq.n	8001c2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b2d      	cmp	r3, #45	; 0x2d
 8001c2a:	d114      	bne.n	8001c56 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c2c:	f7ff fb7a 	bl	8001324 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c32:	e009      	b.n	8001c48 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c34:	f7ff fb76 	bl	8001324 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c42:	d901      	bls.n	8001c48 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e007      	b.n	8001c58 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d1ee      	bne.n	8001c34 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024800 	.word	0x58024800

08001c64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	58024800 	.word	0x58024800

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f000 bc48 	b.w	8002528 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8088 	beq.w	8001db6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca6:	4b99      	ldr	r3, [pc, #612]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cb0:	4b96      	ldr	r3, [pc, #600]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	d007      	beq.n	8001ccc <HAL_RCC_OscConfig+0x48>
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	d111      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62>
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b8f      	ldr	r3, [pc, #572]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06d      	beq.n	8001db4 <HAL_RCC_OscConfig+0x130>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d169      	bne.n	8001db4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f000 bc21 	b.w	8002528 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x7a>
 8001cf0:	4b86      	ldr	r3, [pc, #536]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a85      	ldr	r2, [pc, #532]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e02e      	b.n	8001d5c <HAL_RCC_OscConfig+0xd8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x9c>
 8001d06:	4b81      	ldr	r3, [pc, #516]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b7e      	ldr	r3, [pc, #504]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7d      	ldr	r2, [pc, #500]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xd8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d2a:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a77      	ldr	r2, [pc, #476]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a74      	ldr	r2, [pc, #464]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xd8>
 8001d44:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a70      	ldr	r2, [pc, #448]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b6e      	ldr	r3, [pc, #440]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6d      	ldr	r2, [pc, #436]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fade 	bl	8001324 <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fada 	bl	8001324 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e3d4      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff faca 	bl	8001324 <HAL_GetTick>
 8001d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fac6 	bl	8001324 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e3c0      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x110>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80ca 	beq.w	8001f58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc4:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dcc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <HAL_RCC_OscConfig+0x166>
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	2b18      	cmp	r3, #24
 8001dde:	d156      	bne.n	8001e8e <HAL_RCC_OscConfig+0x20a>
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d151      	bne.n	8001e8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dea:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e392      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0219 	bic.w	r2, r3, #25
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	493f      	ldr	r1, [pc, #252]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fa86 	bl	8001324 <HAL_GetTick>
 8001e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fa82 	bl	8001324 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e37c      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	f7ff faa3 	bl	8001384 <HAL_GetREVID>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d817      	bhi.n	8001e78 <HAL_RCC_OscConfig+0x1f4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d108      	bne.n	8001e62 <HAL_RCC_OscConfig+0x1de>
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e58:	4a2c      	ldr	r2, [pc, #176]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e60:	e07a      	b.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	031b      	lsls	r3, r3, #12
 8001e70:	4926      	ldr	r1, [pc, #152]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e76:	e06f      	b.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	4921      	ldr	r1, [pc, #132]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	e064      	b.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d047      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0219 	bic.w	r2, r3, #25
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	491a      	ldr	r1, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa3c 	bl	8001324 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fa38 	bl	8001324 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e332      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	f7ff fa59 	bl	8001384 <HAL_GetREVID>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d819      	bhi.n	8001f10 <HAL_RCC_OscConfig+0x28c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b40      	cmp	r3, #64	; 0x40
 8001ee2:	d108      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x272>
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef2:	6053      	str	r3, [r2, #4]
 8001ef4:	e030      	b.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	031b      	lsls	r3, r3, #12
 8001f04:	4901      	ldr	r1, [pc, #4]	; (8001f0c <HAL_RCC_OscConfig+0x288>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
 8001f0a:	e025      	b.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	4b9a      	ldr	r3, [pc, #616]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	4997      	ldr	r1, [pc, #604]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b95      	ldr	r3, [pc, #596]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a94      	ldr	r2, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff f9f7 	bl	8001324 <HAL_GetTick>
 8001f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff f9f3 	bl	8001324 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e2ed      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f4c:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a9 	beq.w	80020b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f70:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d007      	beq.n	8001f8c <HAL_RCC_OscConfig+0x308>
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b18      	cmp	r3, #24
 8001f80:	d13a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x374>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d135      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f8c:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x320>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e2c1      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fa4:	f7ff f9ee 	bl	8001384 <HAL_GetREVID>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d817      	bhi.n	8001fe2 <HAL_RCC_OscConfig+0x35e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d108      	bne.n	8001fcc <HAL_RCC_OscConfig+0x348>
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fc2:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fc8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fca:	e075      	b.n	80020b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	069b      	lsls	r3, r3, #26
 8001fda:	4968      	ldr	r1, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fe0:	e06a      	b.n	80020b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fe2:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	4962      	ldr	r1, [pc, #392]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ff6:	e05f      	b.n	80020b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d042      	beq.n	8002086 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f98a 	bl	8001324 <HAL_GetTick>
 8002010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002014:	f7ff f986 	bl	8001324 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e280      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002026:	4b55      	ldr	r3, [pc, #340]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002032:	f7ff f9a7 	bl	8001384 <HAL_GetREVID>
 8002036:	4603      	mov	r3, r0
 8002038:	f241 0203 	movw	r2, #4099	; 0x1003
 800203c:	4293      	cmp	r3, r2
 800203e:	d817      	bhi.n	8002070 <HAL_RCC_OscConfig+0x3ec>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	2b20      	cmp	r3, #32
 8002046:	d108      	bne.n	800205a <HAL_RCC_OscConfig+0x3d6>
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002050:	4a4a      	ldr	r2, [pc, #296]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002056:	6053      	str	r3, [r2, #4]
 8002058:	e02e      	b.n	80020b8 <HAL_RCC_OscConfig+0x434>
 800205a:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	4944      	ldr	r1, [pc, #272]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e023      	b.n	80020b8 <HAL_RCC_OscConfig+0x434>
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	493f      	ldr	r1, [pc, #252]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a3c      	ldr	r2, [pc, #240]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 800208c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff f947 	bl	8001324 <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800209a:	f7ff f943 	bl	8001324 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e23d      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ac:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d036      	beq.n	8002132 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d019      	beq.n	8002100 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	4a2a      	ldr	r2, [pc, #168]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7ff f924 	bl	8001324 <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff f920 	bl	8001324 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e21a      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x45c>
 80020fe:	e018      	b.n	8002132 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7ff f90a 	bl	8001324 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002114:	f7ff f906 	bl	8001324 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e200      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d039      	beq.n	80021b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01c      	beq.n	8002180 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 800214c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002150:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002152:	f7ff f8e7 	bl	8001324 <HAL_GetTick>
 8002156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215a:	f7ff f8e3 	bl	8001324 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1dd      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x4d6>
 8002178:	e01b      	b.n	80021b2 <HAL_RCC_OscConfig+0x52e>
 800217a:	bf00      	nop
 800217c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002180:	4b9b      	ldr	r3, [pc, #620]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a9a      	ldr	r2, [pc, #616]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800218a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800218c:	f7ff f8ca 	bl	8001324 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002194:	f7ff f8c6 	bl	8001324 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1c0      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021a6:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8081 	beq.w	80022c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <HAL_RCC_OscConfig+0x770>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a8b      	ldr	r2, [pc, #556]	; (80023f4 <HAL_RCC_OscConfig+0x770>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021cc:	f7ff f8aa 	bl	8001324 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7ff f8a6 	bl	8001324 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1a0      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e6:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x770>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x584>
 80021fa:	4b7d      	ldr	r3, [pc, #500]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a7c      	ldr	r2, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	e02d      	b.n	8002264 <HAL_RCC_OscConfig+0x5e0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x5a6>
 8002210:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a76      	ldr	r2, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a73      	ldr	r2, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	e01c      	b.n	8002264 <HAL_RCC_OscConfig+0x5e0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b05      	cmp	r3, #5
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x5c8>
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6713      	str	r3, [r2, #112]	; 0x70
 800223e:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a6b      	ldr	r2, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0x5e0>
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a64      	ldr	r2, [pc, #400]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800225e:	f023 0304 	bic.w	r3, r3, #4
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d015      	beq.n	8002298 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7ff f85a 	bl	8001324 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7ff f856 	bl	8001324 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e14e      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800228a:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ee      	beq.n	8002274 <HAL_RCC_OscConfig+0x5f0>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f844 	bl	8001324 <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7ff f840 	bl	8001324 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e138      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022b6:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ee      	bne.n	80022a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 812d 	beq.w	8002526 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022cc:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d4:	2b18      	cmp	r3, #24
 80022d6:	f000 80bd 	beq.w	8002454 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f040 809e 	bne.w	8002420 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a41      	ldr	r2, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80022ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff f818 	bl	8001324 <HAL_GetTick>
 80022f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff f814 	bl	8001324 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e10e      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCC_OscConfig+0x774>)
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	430a      	orrs	r2, r1
 800232a:	4931      	ldr	r1, [pc, #196]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	628b      	str	r3, [r1, #40]	; 0x28
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	3b01      	subs	r3, #1
 8002336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	3b01      	subs	r3, #1
 8002340:	025b      	lsls	r3, r3, #9
 8002342:	b29b      	uxth	r3, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	3b01      	subs	r3, #1
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002360:	4923      	ldr	r1, [pc, #140]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_RCC_OscConfig+0x778>)
 8002378:	4013      	ands	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800237e:	00d2      	lsls	r2, r2, #3
 8002380:	491b      	ldr	r1, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f023 020c 	bic.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4917      	ldr	r1, [pc, #92]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002394:	4313      	orrs	r3, r2
 8002396:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f023 0202 	bic.w	r2, r3, #2
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	4912      	ldr	r1, [pc, #72]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7fe ff9d 	bl	8001324 <HAL_GetTick>
 80023ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ec:	e011      	b.n	8002412 <HAL_RCC_OscConfig+0x78e>
 80023ee:	bf00      	nop
 80023f0:	58024400 	.word	0x58024400
 80023f4:	58024800 	.word	0x58024800
 80023f8:	fffffc0c 	.word	0xfffffc0c
 80023fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe ff90 	bl	8001324 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e08a      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x77c>
 800241e:	e082      	b.n	8002526 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b43      	ldr	r3, [pc, #268]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a42      	ldr	r2, [pc, #264]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe ff7a 	bl	8001324 <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe ff76 	bl	8001324 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e070      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x7b0>
 8002452:	e068      	b.n	8002526 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2b01      	cmp	r3, #1
 8002466:	d031      	beq.n	80024cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d12a      	bne.n	80024cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d122      	bne.n	80024cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0a5b      	lsrs	r3, r3, #9
 800249a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d111      	bne.n	80024cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0e1b      	lsrs	r3, r3, #24
 80024be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e02b      	b.n	8002528 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d01f      	beq.n	8002526 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024f2:	f7fe ff17 	bl	8001324 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80024f8:	bf00      	nop
 80024fa:	f7fe ff13 	bl	8001324 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	4293      	cmp	r3, r2
 8002504:	d0f9      	beq.n	80024fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_OscConfig+0x8b0>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002512:	00d2      	lsls	r2, r2, #3
 8002514:	4906      	ldr	r1, [pc, #24]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002516:	4313      	orrs	r3, r2
 8002518:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_RCC_OscConfig+0x8ac>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	58024400 	.word	0x58024400
 8002534:	ffff0007 	.word	0xffff0007

08002538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e19c      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d910      	bls.n	800257c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b87      	ldr	r3, [pc, #540]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020f 	bic.w	r2, r3, #15
 8002562:	4985      	ldr	r1, [pc, #532]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b83      	ldr	r3, [pc, #524]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e184      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002594:	429a      	cmp	r2, r3
 8002596:	d908      	bls.n	80025aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002598:	4b78      	ldr	r3, [pc, #480]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4975      	ldr	r1, [pc, #468]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d908      	bls.n	80025d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	496a      	ldr	r1, [pc, #424]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d010      	beq.n	8002606 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d908      	bls.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	495e      	ldr	r1, [pc, #376]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002602:	4313      	orrs	r3, r2
 8002604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800261e:	429a      	cmp	r2, r3
 8002620:	d908      	bls.n	8002634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4953      	ldr	r1, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002630:	4313      	orrs	r3, r2
 8002632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	429a      	cmp	r2, r3
 800264e:	d908      	bls.n	8002662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f023 020f 	bic.w	r2, r3, #15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4947      	ldr	r1, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800265e:	4313      	orrs	r3, r2
 8002660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d055      	beq.n	800271a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4940      	ldr	r1, [pc, #256]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800267c:	4313      	orrs	r3, r2
 800267e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d121      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0f6      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d115      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ea      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0de      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d6      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f023 0207 	bic.w	r2, r3, #7
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ea:	f7fe fe1b 	bl	8001324 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f2:	f7fe fe17 	bl	8001324 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0be      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	429a      	cmp	r2, r3
 8002718:	d1eb      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	429a      	cmp	r2, r3
 8002734:	d208      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f023 020f 	bic.w	r2, r3, #15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002744:	4313      	orrs	r3, r2
 8002746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d214      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	4906      	ldr	r1, [pc, #24]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e086      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
 8002778:	52002000 	.word	0x52002000
 800277c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002798:	429a      	cmp	r2, r3
 800279a:	d208      	bcs.n	80027ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800279c:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4939      	ldr	r1, [pc, #228]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d208      	bcs.n	80027dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	492e      	ldr	r1, [pc, #184]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d208      	bcs.n	800280a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4922      	ldr	r1, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002806:	4313      	orrs	r3, r2
 8002808:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002822:	429a      	cmp	r2, r3
 8002824:	d208      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4917      	ldr	r1, [pc, #92]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002838:	f000 f834 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	4912      	ldr	r1, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x35c>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_RCC_ClockConfig+0x35c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x360>)
 800286e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x364>)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x368>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fd08 	bl	8001290 <HAL_InitTick>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58024400 	.word	0x58024400
 8002894:	08006d80 	.word	0x08006d80
 8002898:	24000004 	.word	0x24000004
 800289c:	24000000 	.word	0x24000000
 80028a0:	24000008 	.word	0x24000008

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028aa:	4bb3      	ldr	r3, [pc, #716]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	f200 8155 	bhi.w	8002b62 <HAL_RCC_GetSysClockFreq+0x2be>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	08002925 	.word	0x08002925
 80028c4:	08002b63 	.word	0x08002b63
 80028c8:	08002b63 	.word	0x08002b63
 80028cc:	08002b63 	.word	0x08002b63
 80028d0:	08002b63 	.word	0x08002b63
 80028d4:	08002b63 	.word	0x08002b63
 80028d8:	08002b63 	.word	0x08002b63
 80028dc:	08002b63 	.word	0x08002b63
 80028e0:	0800294b 	.word	0x0800294b
 80028e4:	08002b63 	.word	0x08002b63
 80028e8:	08002b63 	.word	0x08002b63
 80028ec:	08002b63 	.word	0x08002b63
 80028f0:	08002b63 	.word	0x08002b63
 80028f4:	08002b63 	.word	0x08002b63
 80028f8:	08002b63 	.word	0x08002b63
 80028fc:	08002b63 	.word	0x08002b63
 8002900:	08002951 	.word	0x08002951
 8002904:	08002b63 	.word	0x08002b63
 8002908:	08002b63 	.word	0x08002b63
 800290c:	08002b63 	.word	0x08002b63
 8002910:	08002b63 	.word	0x08002b63
 8002914:	08002b63 	.word	0x08002b63
 8002918:	08002b63 	.word	0x08002b63
 800291c:	08002b63 	.word	0x08002b63
 8002920:	08002957 	.word	0x08002957
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002924:	4b94      	ldr	r3, [pc, #592]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002930:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	08db      	lsrs	r3, r3, #3
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	4a90      	ldr	r2, [pc, #576]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002942:	e111      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002944:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002946:	61bb      	str	r3, [r7, #24]
      break;
 8002948:	e10e      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800294a:	4b8d      	ldr	r3, [pc, #564]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800294c:	61bb      	str	r3, [r7, #24]
      break;
 800294e:	e10b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002950:	4b8c      	ldr	r3, [pc, #560]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002952:	61bb      	str	r3, [r7, #24]
      break;
 8002954:	e108      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002960:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800296a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002976:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80e1 	beq.w	8002b5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b02      	cmp	r3, #2
 800299e:	f000 8083 	beq.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x204>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f200 80a1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x248>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x114>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d056      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029b6:	e099      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029c4:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	4a6b      	ldr	r2, [pc, #428]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ee:	4b62      	ldr	r3, [pc, #392]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a1e:	e087      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a62:	e065      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aa6:	e043      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aea:	e021      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b54:	ee17 3a90 	vmov	r3, s15
 8002b58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b5a:	e005      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
      break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b64:	61bb      	str	r3, [r7, #24]
      break;
 8002b66:	bf00      	nop
  }

  return sysclockfreq;
 8002b68:	69bb      	ldr	r3, [r7, #24]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	03d09000 	.word	0x03d09000
 8002b80:	003d0900 	.word	0x003d0900
 8002b84:	007a1200 	.word	0x007a1200
 8002b88:	46000000 	.word	0x46000000
 8002b8c:	4c742400 	.word	0x4c742400
 8002b90:	4a742400 	.word	0x4a742400
 8002b94:	4af42400 	.word	0x4af42400

08002b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b9e:	f7ff fe81 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490f      	ldr	r1, [pc, #60]	; (8002bec <HAL_RCC_GetHCLKFreq+0x54>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_GetHCLKFreq+0x54>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	58024400 	.word	0x58024400
 8002bec:	08006d80 	.word	0x08006d80
 8002bf0:	24000004 	.word	0x24000004
 8002bf4:	24000000 	.word	0x24000000

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002bfc:	f7ff ffcc 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4904      	ldr	r1, [pc, #16]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	08006d80 	.word	0x08006d80

08002c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c28:	f7ff ffb6 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4904      	ldr	r1, [pc, #16]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	08006d80 	.word	0x08006d80

08002c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b0ca      	sub	sp, #296	; 0x128
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c74:	2500      	movs	r5, #0
 8002c76:	ea54 0305 	orrs.w	r3, r4, r5
 8002c7a:	d049      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c86:	d02f      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c8c:	d828      	bhi.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c92:	d01a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c98:	d822      	bhi.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca2:	d007      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca6:	4bb8      	ldr	r3, [pc, #736]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	4ab7      	ldr	r2, [pc, #732]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cb2:	e01a      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb8:	3308      	adds	r3, #8
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fc8f 	bl	80045e0 <RCCEx_PLL2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cc8:	e00f      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cce:	3328      	adds	r3, #40	; 0x28
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 fd36 	bl	8004744 <RCCEx_PLL3_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cde:	e004      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ce6:	e000      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cf2:	4ba5      	ldr	r3, [pc, #660]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d00:	4aa1      	ldr	r2, [pc, #644]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d02:	430b      	orrs	r3, r1
 8002d04:	6513      	str	r3, [r2, #80]	; 0x50
 8002d06:	e003      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002d1c:	f04f 0900 	mov.w	r9, #0
 8002d20:	ea58 0309 	orrs.w	r3, r8, r9
 8002d24:	d047      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d82a      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d4d 	.word	0x08002d4d
 8002d3c:	08002d5b 	.word	0x08002d5b
 8002d40:	08002d71 	.word	0x08002d71
 8002d44:	08002d8f 	.word	0x08002d8f
 8002d48:	08002d8f 	.word	0x08002d8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4c:	4b8e      	ldr	r3, [pc, #568]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	4a8d      	ldr	r2, [pc, #564]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d58:	e01a      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5e:	3308      	adds	r3, #8
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 fc3c 	bl	80045e0 <RCCEx_PLL2_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d6e:	e00f      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d74:	3328      	adds	r3, #40	; 0x28
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fce3 	bl	8004744 <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d84:	e004      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d98:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	f023 0107 	bic.w	r1, r3, #7
 8002da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	4a78      	ldr	r2, [pc, #480]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6513      	str	r3, [r2, #80]	; 0x50
 8002dac:	e003      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002dc2:	f04f 0b00 	mov.w	fp, #0
 8002dc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002dca:	d04c      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd6:	d030      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d829      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dde:	2bc0      	cmp	r3, #192	; 0xc0
 8002de0:	d02d      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002de2:	2bc0      	cmp	r3, #192	; 0xc0
 8002de4:	d825      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d018      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d821      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d007      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002df6:	e01c      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	4a62      	ldr	r2, [pc, #392]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e04:	e01c      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fbe6 	bl	80045e0 <RCCEx_PLL2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e1a:	e011      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e20:	3328      	adds	r3, #40	; 0x28
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 fc8d 	bl	8004744 <RCCEx_PLL3_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e30:	e006      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e48:	4b4f      	ldr	r3, [pc, #316]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e5c:	e003      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002e80:	460b      	mov	r3, r1
 8002e82:	4313      	orrs	r3, r2
 8002e84:	d053      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e92:	d035      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e98:	d82e      	bhi.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e9e:	d031      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ea0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ea4:	d828      	bhi.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eaa:	d01a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb0:	d822      	bhi.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eba:	d007      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ebe:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eca:	e01c      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 fb83 	bl	80045e0 <RCCEx_PLL2_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ee0:	e011      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee6:	3328      	adds	r3, #40	; 0x28
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fc2a 	bl	8004744 <RCCEx_PLL3_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ef6:	e006      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002efe:	e002      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f00:	bf00      	nop
 8002f02:	e000      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6593      	str	r3, [r2, #88]	; 0x58
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002f3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	d056      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5a:	d038      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f60:	d831      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f66:	d034      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f6c:	d82b      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f72:	d01d      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f78:	d825      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f84:	e01f      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8c:	4ba2      	ldr	r3, [pc, #648]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4aa1      	ldr	r2, [pc, #644]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 fb1c 	bl	80045e0 <RCCEx_PLL2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fae:	e011      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb4:	3328      	adds	r3, #40	; 0x28
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 fbc3 	bl	8004744 <RCCEx_PLL3_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fc4:	e006      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fdc:	4b8e      	ldr	r3, [pc, #568]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fec:	4a8a      	ldr	r2, [pc, #552]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff2:	e003      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003008:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003012:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003016:	460b      	mov	r3, r1
 8003018:	4313      	orrs	r3, r2
 800301a:	d03a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800301c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	2b30      	cmp	r3, #48	; 0x30
 8003024:	d01f      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003026:	2b30      	cmp	r3, #48	; 0x30
 8003028:	d819      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800302a:	2b20      	cmp	r3, #32
 800302c:	d00c      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800302e:	2b20      	cmp	r3, #32
 8003030:	d815      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d019      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003036:	2b10      	cmp	r3, #16
 8003038:	d111      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303a:	4b77      	ldr	r3, [pc, #476]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4a76      	ldr	r2, [pc, #472]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003046:	e011      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	3308      	adds	r3, #8
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fac5 	bl	80045e0 <RCCEx_PLL2_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800305c:	e006      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003064:	e002      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800306a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	4a65      	ldr	r2, [pc, #404]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003084:	430b      	orrs	r3, r1
 8003086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003088:	e003      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800308e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800309e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80030a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4313      	orrs	r3, r2
 80030b0:	d051      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030bc:	d035      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80030be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c2:	d82e      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030c8:	d031      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030ce:	d828      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d4:	d01a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030da:	d822      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e4:	d007      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80030e6:	e01c      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4a4a      	ldr	r2, [pc, #296]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030f4:	e01c      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fa:	3308      	adds	r3, #8
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 fa6e 	bl	80045e0 <RCCEx_PLL2_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800310a:	e011      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003110:	3328      	adds	r3, #40	; 0x28
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fb15 	bl	8004744 <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003120:	e006      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003128:	e002      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800312e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003138:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800313a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003148:	430b      	orrs	r3, r1
 800314a:	6513      	str	r3, [r2, #80]	; 0x50
 800314c:	e003      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800316c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003170:	460b      	mov	r3, r1
 8003172:	4313      	orrs	r3, r2
 8003174:	d056      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800317a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003180:	d033      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003186:	d82c      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800318c:	d02f      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800318e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003192:	d826      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003194:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003198:	d02b      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800319a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800319e:	d820      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a4:	d012      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80031a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031aa:	d81a      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d022      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d115      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ba:	3308      	adds	r3, #8
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fa0e 	bl	80045e0 <RCCEx_PLL2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031ca:	e015      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d0:	3328      	adds	r3, #40	; 0x28
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fab5 	bl	8004744 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031e0:	e00a      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031ea:	bf00      	nop
 80031ec:	e004      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031ee:	bf00      	nop
 80031f0:	e002      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031f2:	bf00      	nop
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003204:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320e:	4a02      	ldr	r2, [pc, #8]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003210:	430b      	orrs	r3, r1
 8003212:	6513      	str	r3, [r2, #80]	; 0x50
 8003214:	e006      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003216:	bf00      	nop
 8003218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800323a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800323e:	460b      	mov	r3, r1
 8003240:	4313      	orrs	r3, r2
 8003242:	d055      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003250:	d033      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d82c      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d02f      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d826      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003268:	d02b      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800326a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800326e:	d820      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003274:	d012      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327a:	d81a      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d022      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003284:	d115      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328a:	3308      	adds	r3, #8
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f001 f9a6 	bl	80045e0 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800329a:	e015      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a0:	3328      	adds	r3, #40	; 0x28
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fa4d 	bl	8004744 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032b0:	e00a      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032d0:	4ba3      	ldr	r3, [pc, #652]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032e0:	4a9f      	ldr	r2, [pc, #636]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032e2:	430b      	orrs	r3, r1
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
 80032e6:	e003      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80032fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800330a:	460b      	mov	r3, r1
 800330c:	4313      	orrs	r3, r2
 800330e:	d037      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331a:	d00e      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800331c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003320:	d816      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d018      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800332a:	d111      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332c:	4b8c      	ldr	r3, [pc, #560]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	4a8b      	ldr	r2, [pc, #556]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003338:	e00f      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333e:	3308      	adds	r3, #8
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f001 f94c 	bl	80045e0 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800334e:	e004      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003362:	4b7f      	ldr	r3, [pc, #508]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a7b      	ldr	r2, [pc, #492]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003372:	430b      	orrs	r3, r1
 8003374:	6513      	str	r3, [r2, #80]	; 0x50
 8003376:	e003      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800337c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800338c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003396:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800339a:	460b      	mov	r3, r1
 800339c:	4313      	orrs	r3, r2
 800339e:	d039      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d81c      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033ed 	.word	0x080033ed
 80033b4:	080033c1 	.word	0x080033c1
 80033b8:	080033cf 	.word	0x080033cf
 80033bc:	080033ed 	.word	0x080033ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c0:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a66      	ldr	r2, [pc, #408]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033cc:	e00f      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d2:	3308      	adds	r3, #8
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 f902 	bl	80045e0 <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033e2:	e004      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80033ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033f6:	4b5a      	ldr	r3, [pc, #360]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	f023 0103 	bic.w	r1, r3, #3
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003406:	430b      	orrs	r3, r1
 8003408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340a:	e003      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800342a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800342e:	460b      	mov	r3, r1
 8003430:	4313      	orrs	r3, r2
 8003432:	f000 809f 	beq.w	8003574 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003436:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003442:	f7fd ff6f 	bl	8001324 <HAL_GetTick>
 8003446:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800344a:	e00b      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fd ff6a 	bl	8001324 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b64      	cmp	r3, #100	; 0x64
 800345a:	d903      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003462:	e005      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ed      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003474:	2b00      	cmp	r3, #0
 8003476:	d179      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800347a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003484:	4053      	eors	r3, r2
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d015      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a30      	ldr	r2, [pc, #192]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a2d      	ldr	r2, [pc, #180]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c6:	d118      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd ff2c 	bl	8001324 <HAL_GetTick>
 80034cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d0:	e00d      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fd ff27 	bl	8001324 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034dc:	1ad2      	subs	r2, r2, r3
 80034de:	f241 3388 	movw	r3, #5000	; 0x1388
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d903      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80034ec:	e005      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0eb      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d129      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003512:	d10e      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003524:	091a      	lsrs	r2, r3, #4
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003528:	4013      	ands	r3, r2
 800352a:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352c:	430b      	orrs	r3, r1
 800352e:	6113      	str	r3, [r2, #16]
 8003530:	e005      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800353c:	6113      	str	r3, [r2, #16]
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003540:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800354a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354e:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
 8003554:	e00e      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800355a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003560:	58024400 	.word	0x58024400
 8003564:	58024800 	.word	0x58024800
 8003568:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f002 0301 	and.w	r3, r2, #1
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800358a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800358e:	460b      	mov	r3, r1
 8003590:	4313      	orrs	r3, r2
 8003592:	f000 8089 	beq.w	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359c:	2b28      	cmp	r3, #40	; 0x28
 800359e:	d86b      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	08003681 	.word	0x08003681
 80035ac:	08003679 	.word	0x08003679
 80035b0:	08003679 	.word	0x08003679
 80035b4:	08003679 	.word	0x08003679
 80035b8:	08003679 	.word	0x08003679
 80035bc:	08003679 	.word	0x08003679
 80035c0:	08003679 	.word	0x08003679
 80035c4:	08003679 	.word	0x08003679
 80035c8:	0800364d 	.word	0x0800364d
 80035cc:	08003679 	.word	0x08003679
 80035d0:	08003679 	.word	0x08003679
 80035d4:	08003679 	.word	0x08003679
 80035d8:	08003679 	.word	0x08003679
 80035dc:	08003679 	.word	0x08003679
 80035e0:	08003679 	.word	0x08003679
 80035e4:	08003679 	.word	0x08003679
 80035e8:	08003663 	.word	0x08003663
 80035ec:	08003679 	.word	0x08003679
 80035f0:	08003679 	.word	0x08003679
 80035f4:	08003679 	.word	0x08003679
 80035f8:	08003679 	.word	0x08003679
 80035fc:	08003679 	.word	0x08003679
 8003600:	08003679 	.word	0x08003679
 8003604:	08003679 	.word	0x08003679
 8003608:	08003681 	.word	0x08003681
 800360c:	08003679 	.word	0x08003679
 8003610:	08003679 	.word	0x08003679
 8003614:	08003679 	.word	0x08003679
 8003618:	08003679 	.word	0x08003679
 800361c:	08003679 	.word	0x08003679
 8003620:	08003679 	.word	0x08003679
 8003624:	08003679 	.word	0x08003679
 8003628:	08003681 	.word	0x08003681
 800362c:	08003679 	.word	0x08003679
 8003630:	08003679 	.word	0x08003679
 8003634:	08003679 	.word	0x08003679
 8003638:	08003679 	.word	0x08003679
 800363c:	08003679 	.word	0x08003679
 8003640:	08003679 	.word	0x08003679
 8003644:	08003679 	.word	0x08003679
 8003648:	08003681 	.word	0x08003681
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003650:	3308      	adds	r3, #8
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ffc3 	bl	80045e0 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003660:	e00f      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003666:	3328      	adds	r3, #40	; 0x28
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f001 f86a 	bl	8004744 <RCCEx_PLL3_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003676:	e004      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800368a:	4bbf      	ldr	r3, [pc, #764]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003698:	4abb      	ldr	r2, [pc, #748]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800369a:	430b      	orrs	r3, r1
 800369c:	6553      	str	r3, [r2, #84]	; 0x54
 800369e:	e003      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f002 0302 	and.w	r3, r2, #2
 80036b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80036be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d041      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d824      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	08003725 	.word	0x08003725
 80036dc:	080036f1 	.word	0x080036f1
 80036e0:	08003707 	.word	0x08003707
 80036e4:	08003725 	.word	0x08003725
 80036e8:	08003725 	.word	0x08003725
 80036ec:	08003725 	.word	0x08003725
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	3308      	adds	r3, #8
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 ff71 	bl	80045e0 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003704:	e00f      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370a:	3328      	adds	r3, #40	; 0x28
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f818 	bl	8004744 <RCCEx_PLL3_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800371a:	e004      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800372e:	4b96      	ldr	r3, [pc, #600]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	f023 0107 	bic.w	r1, r3, #7
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373c:	4a92      	ldr	r2, [pc, #584]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800373e:	430b      	orrs	r3, r1
 8003740:	6553      	str	r3, [r2, #84]	; 0x54
 8003742:	e003      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f002 0304 	and.w	r3, r2, #4
 8003758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003762:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d044      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	2b05      	cmp	r3, #5
 8003776:	d825      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037cd 	.word	0x080037cd
 8003784:	08003799 	.word	0x08003799
 8003788:	080037af 	.word	0x080037af
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037cd 	.word	0x080037cd
 8003794:	080037cd 	.word	0x080037cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	3308      	adds	r3, #8
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 ff1d 	bl	80045e0 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037ac:	e00f      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b2:	3328      	adds	r3, #40	; 0x28
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ffc4 	bl	8004744 <RCCEx_PLL3_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037d6:	4b6c      	ldr	r3, [pc, #432]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f023 0107 	bic.w	r1, r3, #7
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	4a68      	ldr	r2, [pc, #416]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f002 0320 	and.w	r3, r2, #32
 8003802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800380c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d055      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003822:	d033      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003828:	d82c      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d02f      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d826      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800383a:	d02b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800383c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003840:	d820      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003846:	d012      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384c:	d81a      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003856:	d115      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385c:	3308      	adds	r3, #8
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 febd 	bl	80045e0 <RCCEx_PLL2_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800386c:	e015      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003872:	3328      	adds	r3, #40	; 0x28
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 ff64 	bl	8004744 <RCCEx_PLL3_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003882:	e00a      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800388a:	e006      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800388c:	bf00      	nop
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003890:	bf00      	nop
 8003892:	e002      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	4a35      	ldr	r2, [pc, #212]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6553      	str	r3, [r2, #84]	; 0x54
 80038b8:	e003      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80038ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d058      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038ee:	d033      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80038f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038f4:	d82c      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d02f      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d826      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003906:	d02b      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800390c:	d820      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003912:	d012      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003918:	d81a      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d022      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d115      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003928:	3308      	adds	r3, #8
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fe57 	bl	80045e0 <RCCEx_PLL2_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003938:	e015      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393e:	3328      	adds	r3, #40	; 0x28
 8003940:	2102      	movs	r1, #2
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fefe 	bl	8004744 <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800394e:	e00a      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003956:	e006      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003958:	bf00      	nop
 800395a:	e004      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800397e:	4a02      	ldr	r2, [pc, #8]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6593      	str	r3, [r2, #88]	; 0x58
 8003984:	e006      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003986:	bf00      	nop
 8003988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d055      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039c0:	d033      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80039c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039c6:	d82c      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039cc:	d02f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	d826      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039d8:	d02b      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80039da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039de:	d820      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e4:	d012      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80039e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ea:	d81a      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d022      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80039f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f4:	d115      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	3308      	adds	r3, #8
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fdee 	bl	80045e0 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a0a:	e015      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	3328      	adds	r3, #40	; 0x28
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fe95 	bl	8004744 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a20:	e00a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a28:	e006      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a40:	4ba1      	ldr	r3, [pc, #644]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a50:	4a9d      	ldr	r2, [pc, #628]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a52:	430b      	orrs	r3, r1
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f002 0308 	and.w	r3, r2, #8
 8003a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d01e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a92:	3328      	adds	r3, #40	; 0x28
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fe54 	bl	8004744 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003aa8:	4b87      	ldr	r3, [pc, #540]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	4a83      	ldr	r2, [pc, #524]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f002 0310 	and.w	r3, r2, #16
 8003aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ad4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d01e      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af0:	3328      	adds	r3, #40	; 0x28
 8003af2:	2102      	movs	r1, #2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fe25 	bl	8004744 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b06:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b16:	4a6c      	ldr	r2, [pc, #432]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d03e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b48:	d022      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b4e:	d81b      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d00b      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b5a:	e015      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	3308      	adds	r3, #8
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fd3b 	bl	80045e0 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b70:	e00f      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b76:	3328      	adds	r3, #40	; 0x28
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fde2 	bl	8004744 <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b9a:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003baa:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003bc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bc8:	2300      	movs	r3, #0
 8003bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d03b      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003be2:	d01f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003be8:	d818      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bee:	d003      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf4:	d007      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4a32      	ldr	r2, [pc, #200]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c04:	e00f      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	3328      	adds	r3, #40	; 0x28
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fd98 	bl	8004744 <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c1a:	e004      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6553      	str	r3, [r2, #84]	; 0x54
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d034      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d007      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c88:	e00e      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8e:	3308      	adds	r3, #8
 8003c90:	2102      	movs	r1, #2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fca4 	bl	80045e0 <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	4a02      	ldr	r2, [pc, #8]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003cea:	460b      	mov	r3, r1
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d00c      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf4:	3328      	adds	r3, #40	; 0x28
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fd23 	bl	8004744 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d16:	663b      	str	r3, [r7, #96]	; 0x60
 8003d18:	2300      	movs	r3, #0
 8003d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d20:	460b      	mov	r3, r1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	d038      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d018      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d38:	d811      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3e:	d014      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d44:	d80b      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d011      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4bc3      	ldr	r3, [pc, #780]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4ac2      	ldr	r2, [pc, #776]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d64:	e004      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d66:	bf00      	nop
 8003d68:	e002      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d78:	4bb9      	ldr	r3, [pc, #740]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d88:	4ab5      	ldr	r2, [pc, #724]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003da6:	2300      	movs	r3, #0
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003daa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003db4:	4baa      	ldr	r3, [pc, #680]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4aa7      	ldr	r2, [pc, #668]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	657b      	str	r3, [r7, #84]	; 0x54
 8003dda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003de4:	4b9e      	ldr	r3, [pc, #632]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003df4:	4a9a      	ldr	r2, [pc, #616]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e16:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e24:	4a8e      	ldr	r2, [pc, #568]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
 8003e38:	2300      	movs	r3, #0
 8003e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e46:	4b86      	ldr	r3, [pc, #536]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	4a85      	ldr	r2, [pc, #532]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e50:	6113      	str	r3, [r2, #16]
 8003e52:	4b83      	ldr	r3, [pc, #524]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e54:	6919      	ldr	r1, [r3, #16]
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e5e:	4a80      	ldr	r2, [pc, #512]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e72:	2300      	movs	r3, #0
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e80:	4b77      	ldr	r3, [pc, #476]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	4a74      	ldr	r2, [pc, #464]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	4a67      	ldr	r2, [pc, #412]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d011      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fb78 	bl	80045e0 <RCCEx_PLL2_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	6239      	str	r1, [r7, #32]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	d011      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f26:	3308      	adds	r3, #8
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fb58 	bl	80045e0 <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	2100      	movs	r1, #0
 8003f50:	61b9      	str	r1, [r7, #24]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	d011      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f66:	3308      	adds	r3, #8
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fb38 	bl	80045e0 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	6139      	str	r1, [r7, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	d011      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa6:	3328      	adds	r3, #40	; 0x28
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fbca 	bl	8004744 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	2100      	movs	r1, #0
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	d011      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fbaa 	bl	8004744 <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	2100      	movs	r1, #0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	e9d7 1200 	ldrd	r1, r2, [r7]
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d011      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004026:	3328      	adds	r3, #40	; 0x28
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fb8a 	bl	8004744 <RCCEx_PLL3_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004046:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
}
 8004054:	4618      	mov	r0, r3
 8004056:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800405a:	46bd      	mov	sp, r7
 800405c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004060:	58024400 	.word	0x58024400

08004064 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004068:	f7fe fd96 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4904      	ldr	r1, [pc, #16]	; (800408c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	58024400 	.word	0x58024400
 800408c:	08006d80 	.word	0x08006d80

08004090 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004098:	4ba1      	ldr	r3, [pc, #644]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040a2:	4b9f      	ldr	r3, [pc, #636]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	0b1b      	lsrs	r3, r3, #12
 80040a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040ae:	4b9c      	ldr	r3, [pc, #624]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040ba:	4b99      	ldr	r3, [pc, #612]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8111 	beq.w	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f000 8083 	beq.w	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f200 80a1 	bhi.w	8004230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d056      	beq.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040fa:	e099      	b.n	8004230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040fc:	4b88      	ldr	r3, [pc, #544]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02d      	beq.n	8004164 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004108:	4b85      	ldr	r3, [pc, #532]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	08db      	lsrs	r3, r3, #3
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	4a84      	ldr	r2, [pc, #528]	; (8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a03 	vldr	s12, [r7, #12]
 8004146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004162:	e087      	b.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800432c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a03 	vldr	s12, [r7, #12]
 800418a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a6:	e065      	b.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ea:	e043      	b.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b48      	ldr	r3, [pc, #288]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800422e:	e021      	b.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	4b37      	ldr	r3, [pc, #220]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a03 	vldr	s12, [r7, #12]
 8004256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004272:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	0a5b      	lsrs	r3, r3, #9
 800427a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800428a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800428e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429a:	ee17 2a90 	vmov	r2, s15
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c8:	ee17 2a90 	vmov	r2, s15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f6:	ee17 2a90 	vmov	r2, s15
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042fe:	e008      	b.n	8004312 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	58024400 	.word	0x58024400
 8004324:	03d09000 	.word	0x03d09000
 8004328:	46000000 	.word	0x46000000
 800432c:	4c742400 	.word	0x4c742400
 8004330:	4a742400 	.word	0x4a742400
 8004334:	4af42400 	.word	0x4af42400

08004338 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	; 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004340:	4ba1      	ldr	r3, [pc, #644]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800434a:	4b9f      	ldr	r3, [pc, #636]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	0d1b      	lsrs	r3, r3, #20
 8004350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004354:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004356:	4b9c      	ldr	r3, [pc, #624]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004362:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8111 	beq.w	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b02      	cmp	r3, #2
 800438a:	f000 8083 	beq.w	8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b02      	cmp	r3, #2
 8004392:	f200 80a1 	bhi.w	80044d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d056      	beq.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043a2:	e099      	b.n	80044d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a4:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d02d      	beq.n	800440c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043b0:	4b85      	ldr	r3, [pc, #532]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	4a84      	ldr	r2, [pc, #528]	; (80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b7b      	ldr	r3, [pc, #492]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800440a:	e087      	b.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b6a      	ldr	r3, [pc, #424]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444e:	e065      	b.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a03 	vldr	s12, [r7, #12]
 8004476:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004492:	e043      	b.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a6:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d6:	e021      	b.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800451a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800451c:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	0a5b      	lsrs	r3, r3, #9
 8004522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004536:	edd7 6a07 	vldr	s13, [r7, #28]
 800453a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004542:	ee17 2a90 	vmov	r2, s15
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800454a:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004564:	edd7 6a07 	vldr	s13, [r7, #28]
 8004568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004570:	ee17 2a90 	vmov	r2, s15
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	0e1b      	lsrs	r3, r3, #24
 800457e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004592:	edd7 6a07 	vldr	s13, [r7, #28]
 8004596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459e:	ee17 2a90 	vmov	r2, s15
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045a6:	e008      	b.n	80045ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
}
 80045ba:	bf00      	nop
 80045bc:	3724      	adds	r7, #36	; 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	58024400 	.word	0x58024400
 80045cc:	03d09000 	.word	0x03d09000
 80045d0:	46000000 	.word	0x46000000
 80045d4:	4c742400 	.word	0x4c742400
 80045d8:	4a742400 	.word	0x4a742400
 80045dc:	4af42400 	.word	0x4af42400

080045e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045ee:	4b53      	ldr	r3, [pc, #332]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d101      	bne.n	80045fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e099      	b.n	8004732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045fe:	4b4f      	ldr	r3, [pc, #316]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a4e      	ldr	r2, [pc, #312]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460a:	f7fc fe8b 	bl	8001324 <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004610:	e008      	b.n	8004624 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004612:	f7fc fe87 	bl	8001324 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e086      	b.n	8004732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004624:	4b45      	ldr	r3, [pc, #276]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	493f      	ldr	r1, [pc, #252]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	628b      	str	r3, [r1, #40]	; 0x28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	3b01      	subs	r3, #1
 800464a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	025b      	lsls	r3, r3, #9
 8004656:	b29b      	uxth	r3, r3
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	3b01      	subs	r3, #1
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004674:	4931      	ldr	r1, [pc, #196]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800467a:	4b30      	ldr	r3, [pc, #192]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	492d      	ldr	r1, [pc, #180]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800468c:	4b2b      	ldr	r3, [pc, #172]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f023 0220 	bic.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	4928      	ldr	r1, [pc, #160]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800469e:	4b27      	ldr	r3, [pc, #156]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a26      	ldr	r2, [pc, #152]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046a4:	f023 0310 	bic.w	r3, r3, #16
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <RCCEx_PLL2_Config+0x160>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	69d2      	ldr	r2, [r2, #28]
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	4920      	ldr	r1, [pc, #128]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046be:	4b1f      	ldr	r3, [pc, #124]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046c4:	f043 0310 	orr.w	r3, r3, #16
 80046c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046dc:	e00f      	b.n	80046fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046f0:	e005      	b.n	80046fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a11      	ldr	r2, [pc, #68]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 80046f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0e      	ldr	r2, [pc, #56]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470a:	f7fc fe0b 	bl	8001324 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004710:	e008      	b.n	8004724 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004712:	f7fc fe07 	bl	8001324 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e006      	b.n	8004732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <RCCEx_PLL2_Config+0x15c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	ffff0007 	.word	0xffff0007

08004744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b03      	cmp	r3, #3
 800475c:	d101      	bne.n	8004762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e099      	b.n	8004896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004762:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4e      	ldr	r2, [pc, #312]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476e:	f7fc fdd9 	bl	8001324 <HAL_GetTick>
 8004772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004774:	e008      	b.n	8004788 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004776:	f7fc fdd5 	bl	8001324 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e086      	b.n	8004896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004788:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004794:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	051b      	lsls	r3, r3, #20
 80047a2:	493f      	ldr	r1, [pc, #252]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	628b      	str	r3, [r1, #40]	; 0x28
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	025b      	lsls	r3, r3, #9
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047d8:	4931      	ldr	r1, [pc, #196]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	492d      	ldr	r1, [pc, #180]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	4928      	ldr	r1, [pc, #160]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004802:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <RCCEx_PLL3_Config+0x160>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	69d2      	ldr	r2, [r2, #28]
 800481a:	00d2      	lsls	r2, r2, #3
 800481c:	4920      	ldr	r1, [pc, #128]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800483a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004840:	e00f      	b.n	8004862 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800484e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004854:	e005      	b.n	8004862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800485c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fc fd59 	bl	8001324 <HAL_GetTick>
 8004872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004874:	e008      	b.n	8004888 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004876:	f7fc fd55 	bl	8001324 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <RCCEx_PLL3_Config+0x15c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
 80048a4:	ffff0007 	.word	0xffff0007

080048a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d071      	beq.n	800499e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fb28 	bl	8000f24 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d050      	beq.n	800498c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	22ca      	movs	r2, #202	; 0xca
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2253      	movs	r2, #83	; 0x53
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9a0 	bl	8004c40 <RTC_EnterInitMode>
 8004900:	4603      	mov	r3, r0
 8004902:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d124      	bne.n	8004954 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6899      	ldr	r1, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_RTC_Init+0x100>)
 8004916:	400b      	ands	r3, r1
 8004918:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	0419      	lsls	r1, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9ac 	bl	8004ca8 <RTC_ExitInitMode>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d113      	bne.n	8004982 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0203 	bic.w	r2, r2, #3
 8004968:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	22ff      	movs	r2, #255	; 0xff
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
 800498a:	e001      	b.n	8004990 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	ff8fffbf 	.word	0xff8fffbf

080049ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_RTC_SetTime+0x1a>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e089      	b.n	8004ada <HAL_RTC_SetTime+0x12e>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ca      	movs	r2, #202	; 0xca
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2253      	movs	r2, #83	; 0x53
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f92a 	bl	8004c40 <RTC_EnterInitMode>
 80049ec:	4603      	mov	r3, r0
 80049ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d161      	bne.n	8004aba <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d126      	bne.n	8004a4a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f985 	bl	8004d24 <RTC_ByteToBcd2>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f97e 	bl	8004d24 <RTC_ByteToBcd2>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a2c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	789b      	ldrb	r3, [r3, #2]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f976 	bl	8004d24 <RTC_ByteToBcd2>
 8004a38:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a3a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	78db      	ldrb	r3, [r3, #3]
 8004a42:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e018      	b.n	8004a7c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a6a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a70:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	78db      	ldrb	r3, [r3, #3]
 8004a76:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <HAL_RTC_SetTime+0x138>)
 8004a84:	400b      	ands	r3, r1
 8004a86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6899      	ldr	r1, [r3, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f8f9 	bl	8004ca8 <RTC_ExitInitMode>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	22ff      	movs	r2, #255	; 0xff
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	007f7f7f 	.word	0x007f7f7f

08004ae8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_RTC_SetDate+0x1a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e073      	b.n	8004bea <HAL_RTC_SetDate+0x102>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10e      	bne.n	8004b36 <HAL_RTC_SetDate+0x4e>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	f023 0310 	bic.w	r3, r3, #16
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	330a      	adds	r3, #10
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11c      	bne.n	8004b76 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f8ef 	bl	8004d24 <RTC_ByteToBcd2>
 8004b46:	4603      	mov	r3, r0
 8004b48:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f8e8 	bl	8004d24 <RTC_ByteToBcd2>
 8004b54:	4603      	mov	r3, r0
 8004b56:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b58:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	789b      	ldrb	r3, [r3, #2]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f8e0 	bl	8004d24 <RTC_ByteToBcd2>
 8004b64:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b66:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e00e      	b.n	8004b94 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b82:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b88:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	22ca      	movs	r2, #202	; 0xca
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2253      	movs	r2, #83	; 0x53
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f84b 	bl	8004c40 <RTC_EnterInitMode>
 8004baa:	4603      	mov	r3, r0
 8004bac:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	6979      	ldr	r1, [r7, #20]
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_RTC_SetDate+0x10c>)
 8004bbc:	400b      	ands	r3, r1
 8004bbe:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f871 	bl	8004ca8 <RTC_ExitInitMode>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	22ff      	movs	r2, #255	; 0xff
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004be8:	7cfb      	ldrb	r3, [r7, #19]


}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	00ffff3f 	.word	0x00ffff3f

08004bf8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <HAL_RTC_WaitForSynchro+0x44>)
 8004c06:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8004c08:	f7fc fb8c 	bl	8001324 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c0e:	e009      	b.n	8004c24 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c10:	f7fc fb88 	bl	8001324 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c1e:	d901      	bls.n	8004c24 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e007      	b.n	8004c34 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ee      	beq.n	8004c10 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0003ff5f 	.word	0x0003ff5f

08004c40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d120      	bne.n	8004c9c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c62:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c64:	f7fc fb5e 	bl	8001324 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c6a:	e00d      	b.n	8004c88 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004c6c:	f7fc fb5a 	bl	8001324 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7a:	d905      	bls.n	8004c88 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2203      	movs	r2, #3
 8004c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <RTC_EnterInitMode+0x5c>
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d1e7      	bne.n	8004c6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cbe:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10c      	bne.n	8004ce6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff93 	bl	8004bf8 <HAL_RTC_WaitForSynchro>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01e      	beq.n	8004d16 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2203      	movs	r2, #3
 8004cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e017      	b.n	8004d16 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004cec:	f023 0320 	bic.w	r3, r3, #32
 8004cf0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff80 	bl	8004bf8 <HAL_RTC_WaitForSynchro>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2203      	movs	r2, #3
 8004d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <RTC_ExitInitMode+0x78>)
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	58004000 	.word	0x58004000

08004d24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8004d36:	e005      	b.n	8004d44 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	3b0a      	subs	r3, #10
 8004d42:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	2b09      	cmp	r3, #9
 8004d48:	d8f6      	bhi.n	8004d38 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	7afb      	ldrb	r3, [r7, #11]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b2db      	uxtb	r3, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e034      	b.n	8004de6 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	22ca      	movs	r2, #202	; 0xca
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2253      	movs	r2, #83	; 0x53
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004daa:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004dca:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e049      	b.n	8004e98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fc f8e3 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f000 f92d 	bl	8005090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIM_ConfigClockSource+0x1c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e0dc      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x1d6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a64      	ldr	r2, [pc, #400]	; (8005084 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	f000 80a9 	beq.w	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004ef8:	4a62      	ldr	r2, [pc, #392]	; (8005084 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	f200 80ae 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f00:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f000 80a1 	beq.w	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f08:	4a5f      	ldr	r2, [pc, #380]	; (8005088 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	f200 80a6 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f10:	4a5e      	ldr	r2, [pc, #376]	; (800508c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	f000 8099 	beq.w	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f18:	4a5c      	ldr	r2, [pc, #368]	; (800508c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f200 809e 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f24:	f000 8091 	beq.w	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f2c:	f200 8096 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f34:	f000 8089 	beq.w	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3c:	f200 808e 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f44:	d03e      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0x124>
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	f200 8087 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	f000 8086 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1c2>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	d87f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f5c:	2b70      	cmp	r3, #112	; 0x70
 8004f5e:	d01a      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xf6>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d87b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f64:	2b60      	cmp	r3, #96	; 0x60
 8004f66:	d050      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x16a>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d877      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f6c:	2b50      	cmp	r3, #80	; 0x50
 8004f6e:	d03c      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x14a>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d873      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d058      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x18a>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d86f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d064      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d86b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d060      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d867      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05c      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d05a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x1aa>
 8004f94:	e062      	b.n	800505c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa6:	f000 f98b 	bl	80052c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
      break;
 8004fc2:	e04f      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd4:	f000 f974 	bl	80052c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe6:	609a      	str	r2, [r3, #8]
      break;
 8004fe8:	e03c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 f8e4 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2150      	movs	r1, #80	; 0x50
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f93e 	bl	8005284 <TIM_ITRx_SetConfig>
      break;
 8005008:	e02c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 f903 	bl	8005222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2160      	movs	r1, #96	; 0x60
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f92e 	bl	8005284 <TIM_ITRx_SetConfig>
      break;
 8005028:	e01c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005036:	461a      	mov	r2, r3
 8005038:	f000 f8c4 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2140      	movs	r1, #64	; 0x40
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f91e 	bl	8005284 <TIM_ITRx_SetConfig>
      break;
 8005048:	e00c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 f915 	bl	8005284 <TIM_ITRx_SetConfig>
      break;
 800505a:	e003      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e000      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	ffceff88 	.word	0xffceff88
 8005084:	00100040 	.word	0x00100040
 8005088:	00100030 	.word	0x00100030
 800508c:	00100020 	.word	0x00100020

08005090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a40      	ldr	r2, [pc, #256]	; (80051a4 <TIM_Base_SetConfig+0x114>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d00f      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3d      	ldr	r2, [pc, #244]	; (80051a8 <TIM_Base_SetConfig+0x118>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3c      	ldr	r2, [pc, #240]	; (80051ac <TIM_Base_SetConfig+0x11c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3b      	ldr	r2, [pc, #236]	; (80051b0 <TIM_Base_SetConfig+0x120>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a3a      	ldr	r2, [pc, #232]	; (80051b4 <TIM_Base_SetConfig+0x124>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2f      	ldr	r2, [pc, #188]	; (80051a4 <TIM_Base_SetConfig+0x114>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <TIM_Base_SetConfig+0x118>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <TIM_Base_SetConfig+0x11c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <TIM_Base_SetConfig+0x120>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a29      	ldr	r2, [pc, #164]	; (80051b4 <TIM_Base_SetConfig+0x124>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a28      	ldr	r2, [pc, #160]	; (80051b8 <TIM_Base_SetConfig+0x128>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a27      	ldr	r2, [pc, #156]	; (80051bc <TIM_Base_SetConfig+0x12c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <TIM_Base_SetConfig+0x130>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <TIM_Base_SetConfig+0x114>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00f      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <TIM_Base_SetConfig+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <TIM_Base_SetConfig+0x128>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <TIM_Base_SetConfig+0x12c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a0f      	ldr	r2, [pc, #60]	; (80051c0 <TIM_Base_SetConfig+0x130>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d103      	bne.n	8005190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	615a      	str	r2, [r3, #20]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 030a 	bic.w	r3, r3, #10
 8005200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f023 0210 	bic.w	r2, r3, #16
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800524c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800525e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <TIM_ITRx_SetConfig+0x38>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f043 0307 	orr.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	ffcfff8f 	.word	0xffcfff8f

080052c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	021a      	lsls	r2, r3, #8
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005314:	2302      	movs	r3, #2
 8005316:	e06d      	b.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a30      	ldr	r2, [pc, #192]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d108      	bne.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005352:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a20      	ldr	r2, [pc, #128]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d01d      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a15      	ldr	r2, [pc, #84]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10c      	bne.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00
 8005414:	40001800 	.word	0x40001800
 8005418:	40014000 	.word	0x40014000

0800541c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e042      	b.n	80054b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fb fc8f 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2224      	movs	r2, #36	; 0x24
 800544a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8ba 	bl	80055d8 <UART_SetConfig>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e022      	b.n	80054b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fe16 	bl	80060a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800548a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800549a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fe9d 	bl	80061ec <UART_CheckIdleState>
 80054b2:	4603      	mov	r3, r0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d17b      	bne.n	80055ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_UART_Transmit+0x26>
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e074      	b.n	80055d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f6:	f7fb ff15 	bl	8001324 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d108      	bne.n	8005528 <HAL_UART_Transmit+0x6c>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e003      	b.n	8005530 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005530:	e030      	b.n	8005594 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 feff 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e03d      	b.n	80055d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005568:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3302      	adds	r3, #2
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e007      	b.n	8005582 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1c8      	bne.n	8005532 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fec8 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e006      	b.n	80055d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e000      	b.n	80055d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055dc:	b092      	sub	sp, #72	; 0x48
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4bbe      	ldr	r3, [pc, #760]	; (8005900 <UART_SetConfig+0x328>)
 8005608:	4013      	ands	r3, r2
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005610:	430b      	orrs	r3, r1
 8005612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4ab3      	ldr	r2, [pc, #716]	; (8005904 <UART_SetConfig+0x32c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005640:	4313      	orrs	r3, r2
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	4baf      	ldr	r3, [pc, #700]	; (8005908 <UART_SetConfig+0x330>)
 800564c:	4013      	ands	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005654:	430b      	orrs	r3, r1
 8005656:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	f023 010f 	bic.w	r1, r3, #15
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4aa6      	ldr	r2, [pc, #664]	; (800590c <UART_SetConfig+0x334>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d177      	bne.n	8005768 <UART_SetConfig+0x190>
 8005678:	4ba5      	ldr	r3, [pc, #660]	; (8005910 <UART_SetConfig+0x338>)
 800567a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005680:	2b28      	cmp	r3, #40	; 0x28
 8005682:	d86d      	bhi.n	8005760 <UART_SetConfig+0x188>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0xb4>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	08005731 	.word	0x08005731
 8005690:	08005761 	.word	0x08005761
 8005694:	08005761 	.word	0x08005761
 8005698:	08005761 	.word	0x08005761
 800569c:	08005761 	.word	0x08005761
 80056a0:	08005761 	.word	0x08005761
 80056a4:	08005761 	.word	0x08005761
 80056a8:	08005761 	.word	0x08005761
 80056ac:	08005739 	.word	0x08005739
 80056b0:	08005761 	.word	0x08005761
 80056b4:	08005761 	.word	0x08005761
 80056b8:	08005761 	.word	0x08005761
 80056bc:	08005761 	.word	0x08005761
 80056c0:	08005761 	.word	0x08005761
 80056c4:	08005761 	.word	0x08005761
 80056c8:	08005761 	.word	0x08005761
 80056cc:	08005741 	.word	0x08005741
 80056d0:	08005761 	.word	0x08005761
 80056d4:	08005761 	.word	0x08005761
 80056d8:	08005761 	.word	0x08005761
 80056dc:	08005761 	.word	0x08005761
 80056e0:	08005761 	.word	0x08005761
 80056e4:	08005761 	.word	0x08005761
 80056e8:	08005761 	.word	0x08005761
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005761 	.word	0x08005761
 80056f4:	08005761 	.word	0x08005761
 80056f8:	08005761 	.word	0x08005761
 80056fc:	08005761 	.word	0x08005761
 8005700:	08005761 	.word	0x08005761
 8005704:	08005761 	.word	0x08005761
 8005708:	08005761 	.word	0x08005761
 800570c:	08005751 	.word	0x08005751
 8005710:	08005761 	.word	0x08005761
 8005714:	08005761 	.word	0x08005761
 8005718:	08005761 	.word	0x08005761
 800571c:	08005761 	.word	0x08005761
 8005720:	08005761 	.word	0x08005761
 8005724:	08005761 	.word	0x08005761
 8005728:	08005761 	.word	0x08005761
 800572c:	08005759 	.word	0x08005759
 8005730:	2301      	movs	r3, #1
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e222      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e21e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e21a      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e216      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005750:	2320      	movs	r3, #32
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e212      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e20e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e20a      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a69      	ldr	r2, [pc, #420]	; (8005914 <UART_SetConfig+0x33c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d130      	bne.n	80057d4 <UART_SetConfig+0x1fc>
 8005772:	4b67      	ldr	r3, [pc, #412]	; (8005910 <UART_SetConfig+0x338>)
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b05      	cmp	r3, #5
 800577c:	d826      	bhi.n	80057cc <UART_SetConfig+0x1f4>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <UART_SetConfig+0x1ac>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	0800579d 	.word	0x0800579d
 8005788:	080057a5 	.word	0x080057a5
 800578c:	080057ad 	.word	0x080057ad
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057c5 	.word	0x080057c5
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e1ec      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057a4:	2304      	movs	r3, #4
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e1e8      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e1e4      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ba:	e1e0      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057bc:	2320      	movs	r3, #32
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e1dc      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ca:	e1d8      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e1d4      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a4f      	ldr	r2, [pc, #316]	; (8005918 <UART_SetConfig+0x340>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d130      	bne.n	8005840 <UART_SetConfig+0x268>
 80057de:	4b4c      	ldr	r3, [pc, #304]	; (8005910 <UART_SetConfig+0x338>)
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d826      	bhi.n	8005838 <UART_SetConfig+0x260>
 80057ea:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <UART_SetConfig+0x218>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005811 	.word	0x08005811
 80057f8:	08005819 	.word	0x08005819
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005829 	.word	0x08005829
 8005804:	08005831 	.word	0x08005831
 8005808:	2300      	movs	r3, #0
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e1b6      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005810:	2304      	movs	r3, #4
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e1b2      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005818:	2308      	movs	r3, #8
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e1ae      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005820:	2310      	movs	r3, #16
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e1aa      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005828:	2320      	movs	r3, #32
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e1a6      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005830:	2340      	movs	r3, #64	; 0x40
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e1a2      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e19e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a35      	ldr	r2, [pc, #212]	; (800591c <UART_SetConfig+0x344>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d130      	bne.n	80058ac <UART_SetConfig+0x2d4>
 800584a:	4b31      	ldr	r3, [pc, #196]	; (8005910 <UART_SetConfig+0x338>)
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	2b05      	cmp	r3, #5
 8005854:	d826      	bhi.n	80058a4 <UART_SetConfig+0x2cc>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x284>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	08005875 	.word	0x08005875
 8005860:	0800587d 	.word	0x0800587d
 8005864:	08005885 	.word	0x08005885
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005895 	.word	0x08005895
 8005870:	0800589d 	.word	0x0800589d
 8005874:	2300      	movs	r3, #0
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e180      	b.n	8005b7e <UART_SetConfig+0x5a6>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e17c      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e178      	b.n	8005b7e <UART_SetConfig+0x5a6>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e174      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005894:	2320      	movs	r3, #32
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e170      	b.n	8005b7e <UART_SetConfig+0x5a6>
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e16c      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e168      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <UART_SetConfig+0x348>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d142      	bne.n	800593c <UART_SetConfig+0x364>
 80058b6:	4b16      	ldr	r3, [pc, #88]	; (8005910 <UART_SetConfig+0x338>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d838      	bhi.n	8005934 <UART_SetConfig+0x35c>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0x2f0>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058e1 	.word	0x080058e1
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	080058f1 	.word	0x080058f1
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	08005925 	.word	0x08005925
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e14a      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80058e8:	2304      	movs	r3, #4
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e146      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80058f0:	2308      	movs	r3, #8
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e142      	b.n	8005b7e <UART_SetConfig+0x5a6>
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e13e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005900:	cfff69f3 	.word	0xcfff69f3
 8005904:	58000c00 	.word	0x58000c00
 8005908:	11fff4ff 	.word	0x11fff4ff
 800590c:	40011000 	.word	0x40011000
 8005910:	58024400 	.word	0x58024400
 8005914:	40004400 	.word	0x40004400
 8005918:	40004800 	.word	0x40004800
 800591c:	40004c00 	.word	0x40004c00
 8005920:	40005000 	.word	0x40005000
 8005924:	2320      	movs	r3, #32
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e128      	b.n	8005b7e <UART_SetConfig+0x5a6>
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e124      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e120      	b.n	8005b7e <UART_SetConfig+0x5a6>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4acb      	ldr	r2, [pc, #812]	; (8005c70 <UART_SetConfig+0x698>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d176      	bne.n	8005a34 <UART_SetConfig+0x45c>
 8005946:	4bcb      	ldr	r3, [pc, #812]	; (8005c74 <UART_SetConfig+0x69c>)
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800594e:	2b28      	cmp	r3, #40	; 0x28
 8005950:	d86c      	bhi.n	8005a2c <UART_SetConfig+0x454>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x380>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	080059fd 	.word	0x080059fd
 800595c:	08005a2d 	.word	0x08005a2d
 8005960:	08005a2d 	.word	0x08005a2d
 8005964:	08005a2d 	.word	0x08005a2d
 8005968:	08005a2d 	.word	0x08005a2d
 800596c:	08005a2d 	.word	0x08005a2d
 8005970:	08005a2d 	.word	0x08005a2d
 8005974:	08005a2d 	.word	0x08005a2d
 8005978:	08005a05 	.word	0x08005a05
 800597c:	08005a2d 	.word	0x08005a2d
 8005980:	08005a2d 	.word	0x08005a2d
 8005984:	08005a2d 	.word	0x08005a2d
 8005988:	08005a2d 	.word	0x08005a2d
 800598c:	08005a2d 	.word	0x08005a2d
 8005990:	08005a2d 	.word	0x08005a2d
 8005994:	08005a2d 	.word	0x08005a2d
 8005998:	08005a0d 	.word	0x08005a0d
 800599c:	08005a2d 	.word	0x08005a2d
 80059a0:	08005a2d 	.word	0x08005a2d
 80059a4:	08005a2d 	.word	0x08005a2d
 80059a8:	08005a2d 	.word	0x08005a2d
 80059ac:	08005a2d 	.word	0x08005a2d
 80059b0:	08005a2d 	.word	0x08005a2d
 80059b4:	08005a2d 	.word	0x08005a2d
 80059b8:	08005a15 	.word	0x08005a15
 80059bc:	08005a2d 	.word	0x08005a2d
 80059c0:	08005a2d 	.word	0x08005a2d
 80059c4:	08005a2d 	.word	0x08005a2d
 80059c8:	08005a2d 	.word	0x08005a2d
 80059cc:	08005a2d 	.word	0x08005a2d
 80059d0:	08005a2d 	.word	0x08005a2d
 80059d4:	08005a2d 	.word	0x08005a2d
 80059d8:	08005a1d 	.word	0x08005a1d
 80059dc:	08005a2d 	.word	0x08005a2d
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a2d 	.word	0x08005a2d
 80059ec:	08005a2d 	.word	0x08005a2d
 80059f0:	08005a2d 	.word	0x08005a2d
 80059f4:	08005a2d 	.word	0x08005a2d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e0bc      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e0b8      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e0b4      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e0b0      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e0ac      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e0a8      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e0a4      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a8f      	ldr	r2, [pc, #572]	; (8005c78 <UART_SetConfig+0x6a0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d130      	bne.n	8005aa0 <UART_SetConfig+0x4c8>
 8005a3e:	4b8d      	ldr	r3, [pc, #564]	; (8005c74 <UART_SetConfig+0x69c>)
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d826      	bhi.n	8005a98 <UART_SetConfig+0x4c0>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x478>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a69 	.word	0x08005a69
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	08005a79 	.word	0x08005a79
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e086      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a70:	2304      	movs	r3, #4
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e082      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e07e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a80:	2310      	movs	r3, #16
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e07a      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e076      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e072      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e06e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a75      	ldr	r2, [pc, #468]	; (8005c7c <UART_SetConfig+0x6a4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d130      	bne.n	8005b0c <UART_SetConfig+0x534>
 8005aaa:	4b72      	ldr	r3, [pc, #456]	; (8005c74 <UART_SetConfig+0x69c>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	d826      	bhi.n	8005b04 <UART_SetConfig+0x52c>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x4e4>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005ad5 	.word	0x08005ad5
 8005ac0:	08005add 	.word	0x08005add
 8005ac4:	08005ae5 	.word	0x08005ae5
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ada:	e050      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005adc:	2304      	movs	r3, #4
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae2:	e04c      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aea:	e048      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005aec:	2310      	movs	r3, #16
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af2:	e044      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005af4:	2320      	movs	r3, #32
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afa:	e040      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005afc:	2340      	movs	r3, #64	; 0x40
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b02:	e03c      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e038      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a5b      	ldr	r2, [pc, #364]	; (8005c80 <UART_SetConfig+0x6a8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d130      	bne.n	8005b78 <UART_SetConfig+0x5a0>
 8005b16:	4b57      	ldr	r3, [pc, #348]	; (8005c74 <UART_SetConfig+0x69c>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	2b05      	cmp	r3, #5
 8005b20:	d826      	bhi.n	8005b70 <UART_SetConfig+0x598>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x550>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b41 	.word	0x08005b41
 8005b2c:	08005b49 	.word	0x08005b49
 8005b30:	08005b51 	.word	0x08005b51
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b61 	.word	0x08005b61
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	2302      	movs	r3, #2
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e01a      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e016      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e012      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5e:	e00e      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b60:	2320      	movs	r3, #32
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e00a      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b68:	2340      	movs	r3, #64	; 0x40
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e006      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b76:	e002      	b.n	8005b7e <UART_SetConfig+0x5a6>
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <UART_SetConfig+0x6a8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	f040 80f8 	bne.w	8005d7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	dc46      	bgt.n	8005c20 <UART_SetConfig+0x648>
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	f2c0 8082 	blt.w	8005c9c <UART_SetConfig+0x6c4>
 8005b98:	3b02      	subs	r3, #2
 8005b9a:	2b1e      	cmp	r3, #30
 8005b9c:	d87e      	bhi.n	8005c9c <UART_SetConfig+0x6c4>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0x5cc>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005c27 	.word	0x08005c27
 8005ba8:	08005c9d 	.word	0x08005c9d
 8005bac:	08005c2f 	.word	0x08005c2f
 8005bb0:	08005c9d 	.word	0x08005c9d
 8005bb4:	08005c9d 	.word	0x08005c9d
 8005bb8:	08005c9d 	.word	0x08005c9d
 8005bbc:	08005c3f 	.word	0x08005c3f
 8005bc0:	08005c9d 	.word	0x08005c9d
 8005bc4:	08005c9d 	.word	0x08005c9d
 8005bc8:	08005c9d 	.word	0x08005c9d
 8005bcc:	08005c9d 	.word	0x08005c9d
 8005bd0:	08005c9d 	.word	0x08005c9d
 8005bd4:	08005c9d 	.word	0x08005c9d
 8005bd8:	08005c9d 	.word	0x08005c9d
 8005bdc:	08005c4f 	.word	0x08005c4f
 8005be0:	08005c9d 	.word	0x08005c9d
 8005be4:	08005c9d 	.word	0x08005c9d
 8005be8:	08005c9d 	.word	0x08005c9d
 8005bec:	08005c9d 	.word	0x08005c9d
 8005bf0:	08005c9d 	.word	0x08005c9d
 8005bf4:	08005c9d 	.word	0x08005c9d
 8005bf8:	08005c9d 	.word	0x08005c9d
 8005bfc:	08005c9d 	.word	0x08005c9d
 8005c00:	08005c9d 	.word	0x08005c9d
 8005c04:	08005c9d 	.word	0x08005c9d
 8005c08:	08005c9d 	.word	0x08005c9d
 8005c0c:	08005c9d 	.word	0x08005c9d
 8005c10:	08005c9d 	.word	0x08005c9d
 8005c14:	08005c9d 	.word	0x08005c9d
 8005c18:	08005c9d 	.word	0x08005c9d
 8005c1c:	08005c8f 	.word	0x08005c8f
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d037      	beq.n	8005c94 <UART_SetConfig+0x6bc>
 8005c24:	e03a      	b.n	8005c9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c26:	f7fe fa1d 	bl	8004064 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c2c:	e03c      	b.n	8005ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fa2c 	bl	8004090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c3c:	e034      	b.n	8005ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c3e:	f107 0318 	add.w	r3, r7, #24
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fb78 	bl	8004338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c4c:	e02c      	b.n	8005ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <UART_SetConfig+0x69c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <UART_SetConfig+0x69c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	08db      	lsrs	r3, r3, #3
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	4a07      	ldr	r2, [pc, #28]	; (8005c84 <UART_SetConfig+0x6ac>)
 8005c66:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c6c:	e01c      	b.n	8005ca8 <UART_SetConfig+0x6d0>
 8005c6e:	bf00      	nop
 8005c70:	40011400 	.word	0x40011400
 8005c74:	58024400 	.word	0x58024400
 8005c78:	40007800 	.word	0x40007800
 8005c7c:	40007c00 	.word	0x40007c00
 8005c80:	58000c00 	.word	0x58000c00
 8005c84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005c88:	4b9d      	ldr	r3, [pc, #628]	; (8005f00 <UART_SetConfig+0x928>)
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c8c:	e00c      	b.n	8005ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c8e:	4b9d      	ldr	r3, [pc, #628]	; (8005f04 <UART_SetConfig+0x92c>)
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c92:	e009      	b.n	8005ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c9a:	e005      	b.n	8005ca8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ca6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 81de 	beq.w	800606c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	4a94      	ldr	r2, [pc, #592]	; (8005f08 <UART_SetConfig+0x930>)
 8005cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	4413      	add	r3, r2
 8005cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d305      	bcc.n	8005ce0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ce6:	e1c1      	b.n	800606c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cea:	2200      	movs	r2, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	60fa      	str	r2, [r7, #12]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4a84      	ldr	r2, [pc, #528]	; (8005f08 <UART_SetConfig+0x930>)
 8005cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d0a:	f7fa fae5 	bl	80002d8 <__aeabi_uldivmod>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4610      	mov	r0, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	020b      	lsls	r3, r1, #8
 8005d20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d24:	0202      	lsls	r2, r0, #8
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	6849      	ldr	r1, [r1, #4]
 8005d2a:	0849      	lsrs	r1, r1, #1
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	4605      	mov	r5, r0
 8005d32:	eb12 0804 	adds.w	r8, r2, r4
 8005d36:	eb43 0905 	adc.w	r9, r3, r5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	469a      	mov	sl, r3
 8005d42:	4693      	mov	fp, r2
 8005d44:	4652      	mov	r2, sl
 8005d46:	465b      	mov	r3, fp
 8005d48:	4640      	mov	r0, r8
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	f7fa fac4 	bl	80002d8 <__aeabi_uldivmod>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4613      	mov	r3, r2
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d5e:	d308      	bcc.n	8005d72 <UART_SetConfig+0x79a>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d66:	d204      	bcs.n	8005d72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e17c      	b.n	800606c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d78:	e178      	b.n	800606c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d82:	f040 80c5 	bne.w	8005f10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005d86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	dc48      	bgt.n	8005e20 <UART_SetConfig+0x848>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	db7b      	blt.n	8005e8a <UART_SetConfig+0x8b2>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d879      	bhi.n	8005e8a <UART_SetConfig+0x8b2>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0x7c4>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005e27 	.word	0x08005e27
 8005da0:	08005e2f 	.word	0x08005e2f
 8005da4:	08005e8b 	.word	0x08005e8b
 8005da8:	08005e8b 	.word	0x08005e8b
 8005dac:	08005e37 	.word	0x08005e37
 8005db0:	08005e8b 	.word	0x08005e8b
 8005db4:	08005e8b 	.word	0x08005e8b
 8005db8:	08005e8b 	.word	0x08005e8b
 8005dbc:	08005e47 	.word	0x08005e47
 8005dc0:	08005e8b 	.word	0x08005e8b
 8005dc4:	08005e8b 	.word	0x08005e8b
 8005dc8:	08005e8b 	.word	0x08005e8b
 8005dcc:	08005e8b 	.word	0x08005e8b
 8005dd0:	08005e8b 	.word	0x08005e8b
 8005dd4:	08005e8b 	.word	0x08005e8b
 8005dd8:	08005e8b 	.word	0x08005e8b
 8005ddc:	08005e57 	.word	0x08005e57
 8005de0:	08005e8b 	.word	0x08005e8b
 8005de4:	08005e8b 	.word	0x08005e8b
 8005de8:	08005e8b 	.word	0x08005e8b
 8005dec:	08005e8b 	.word	0x08005e8b
 8005df0:	08005e8b 	.word	0x08005e8b
 8005df4:	08005e8b 	.word	0x08005e8b
 8005df8:	08005e8b 	.word	0x08005e8b
 8005dfc:	08005e8b 	.word	0x08005e8b
 8005e00:	08005e8b 	.word	0x08005e8b
 8005e04:	08005e8b 	.word	0x08005e8b
 8005e08:	08005e8b 	.word	0x08005e8b
 8005e0c:	08005e8b 	.word	0x08005e8b
 8005e10:	08005e8b 	.word	0x08005e8b
 8005e14:	08005e8b 	.word	0x08005e8b
 8005e18:	08005e8b 	.word	0x08005e8b
 8005e1c:	08005e7d 	.word	0x08005e7d
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d02e      	beq.n	8005e82 <UART_SetConfig+0x8aa>
 8005e24:	e031      	b.n	8005e8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e26:	f7fc fee7 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8005e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e2c:	e033      	b.n	8005e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e2e:	f7fc fef9 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8005e32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e34:	e02f      	b.n	8005e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe f928 	bl	8004090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e44:	e027      	b.n	8005e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e46:	f107 0318 	add.w	r3, r7, #24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fa74 	bl	8004338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e54:	e01f      	b.n	8005e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e56:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <UART_SetConfig+0x934>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <UART_SetConfig+0x934>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	08db      	lsrs	r3, r3, #3
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <UART_SetConfig+0x928>)
 8005e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e74:	e00f      	b.n	8005e96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005e76:	4b22      	ldr	r3, [pc, #136]	; (8005f00 <UART_SetConfig+0x928>)
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e7a:	e00c      	b.n	8005e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <UART_SetConfig+0x92c>)
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e80:	e009      	b.n	8005e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e88:	e005      	b.n	8005e96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80e7 	beq.w	800606c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <UART_SetConfig+0x930>)
 8005ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb0:	005a      	lsls	r2, r3, #1
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	441a      	add	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	d916      	bls.n	8005ef8 <UART_SetConfig+0x920>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d212      	bcs.n	8005ef8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f023 030f 	bic.w	r3, r3, #15
 8005eda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eea:	4313      	orrs	r3, r2
 8005eec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	e0b9      	b.n	800606c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005efe:	e0b5      	b.n	800606c <UART_SetConfig+0xa94>
 8005f00:	03d09000 	.word	0x03d09000
 8005f04:	003d0900 	.word	0x003d0900
 8005f08:	08006d90 	.word	0x08006d90
 8005f0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	dc49      	bgt.n	8005fac <UART_SetConfig+0x9d4>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db7c      	blt.n	8006016 <UART_SetConfig+0xa3e>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d87a      	bhi.n	8006016 <UART_SetConfig+0xa3e>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x950>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005fb3 	.word	0x08005fb3
 8005f2c:	08005fbb 	.word	0x08005fbb
 8005f30:	08006017 	.word	0x08006017
 8005f34:	08006017 	.word	0x08006017
 8005f38:	08005fc3 	.word	0x08005fc3
 8005f3c:	08006017 	.word	0x08006017
 8005f40:	08006017 	.word	0x08006017
 8005f44:	08006017 	.word	0x08006017
 8005f48:	08005fd3 	.word	0x08005fd3
 8005f4c:	08006017 	.word	0x08006017
 8005f50:	08006017 	.word	0x08006017
 8005f54:	08006017 	.word	0x08006017
 8005f58:	08006017 	.word	0x08006017
 8005f5c:	08006017 	.word	0x08006017
 8005f60:	08006017 	.word	0x08006017
 8005f64:	08006017 	.word	0x08006017
 8005f68:	08005fe3 	.word	0x08005fe3
 8005f6c:	08006017 	.word	0x08006017
 8005f70:	08006017 	.word	0x08006017
 8005f74:	08006017 	.word	0x08006017
 8005f78:	08006017 	.word	0x08006017
 8005f7c:	08006017 	.word	0x08006017
 8005f80:	08006017 	.word	0x08006017
 8005f84:	08006017 	.word	0x08006017
 8005f88:	08006017 	.word	0x08006017
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	08006017 	.word	0x08006017
 8005f94:	08006017 	.word	0x08006017
 8005f98:	08006017 	.word	0x08006017
 8005f9c:	08006017 	.word	0x08006017
 8005fa0:	08006017 	.word	0x08006017
 8005fa4:	08006017 	.word	0x08006017
 8005fa8:	08006009 	.word	0x08006009
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d02e      	beq.n	800600e <UART_SetConfig+0xa36>
 8005fb0:	e031      	b.n	8006016 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb2:	f7fc fe21 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8005fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005fb8:	e033      	b.n	8006022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fba:	f7fc fe33 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8005fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005fc0:	e02f      	b.n	8006022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe f862 	bl	8004090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fd0:	e027      	b.n	8006022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fd2:	f107 0318 	add.w	r3, r7, #24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe f9ae 	bl	8004338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fe0:	e01f      	b.n	8006022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fe2:	4b2d      	ldr	r3, [pc, #180]	; (8006098 <UART_SetConfig+0xac0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fee:	4b2a      	ldr	r3, [pc, #168]	; (8006098 <UART_SetConfig+0xac0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	4a28      	ldr	r2, [pc, #160]	; (800609c <UART_SetConfig+0xac4>)
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006000:	e00f      	b.n	8006022 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006002:	4b26      	ldr	r3, [pc, #152]	; (800609c <UART_SetConfig+0xac4>)
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006006:	e00c      	b.n	8006022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <UART_SetConfig+0xac8>)
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800600c:	e009      	b.n	8006022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006014:	e005      	b.n	8006022 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006020:	bf00      	nop
    }

    if (pclk != 0U)
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d021      	beq.n	800606c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <UART_SetConfig+0xacc>)
 800602e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006032:	461a      	mov	r2, r3
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	fbb3 f2f2 	udiv	r2, r3, r2
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	441a      	add	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	fbb2 f3f3 	udiv	r3, r2, r3
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	2b0f      	cmp	r3, #15
 8006050:	d909      	bls.n	8006066 <UART_SetConfig+0xa8e>
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d205      	bcs.n	8006066 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	b29a      	uxth	r2, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60da      	str	r2, [r3, #12]
 8006064:	e002      	b.n	800606c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2201      	movs	r2, #1
 8006070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2201      	movs	r2, #1
 8006078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006088:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800608c:	4618      	mov	r0, r3
 800608e:	3748      	adds	r7, #72	; 0x48
 8006090:	46bd      	mov	sp, r7
 8006092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400
 800609c:	03d09000 	.word	0x03d09000
 80060a0:	003d0900 	.word	0x003d0900
 80060a4:	08006d90 	.word	0x08006d90

080060a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01a      	beq.n	80061be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a6:	d10a      	bne.n	80061be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b098      	sub	sp, #96	; 0x60
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061fc:	f7fb f892 	bl	8001324 <HAL_GetTick>
 8006200:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b08      	cmp	r3, #8
 800620e:	d12f      	bne.n	8006270 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006218:	2200      	movs	r2, #0
 800621a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f88e 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d022      	beq.n	8006270 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623e:	653b      	str	r3, [r7, #80]	; 0x50
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	647b      	str	r3, [r7, #68]	; 0x44
 800624a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800624e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e6      	bne.n	800622a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e063      	b.n	8006338 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b04      	cmp	r3, #4
 800627c:	d149      	bne.n	8006312 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006286:	2200      	movs	r2, #0
 8006288:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f857 	bl	8006340 <UART_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d03c      	beq.n	8006312 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	623b      	str	r3, [r7, #32]
   return(result);
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
 80062b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ea:	61fa      	str	r2, [r7, #28]
 80062ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	69b9      	ldr	r1, [r7, #24]
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	617b      	str	r3, [r7, #20]
   return(result);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e012      	b.n	8006338 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3758      	adds	r7, #88	; 0x58
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006350:	e049      	b.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d045      	beq.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635a:	f7fa ffe3 	bl	8001324 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d302      	bcc.n	8006370 <UART_WaitOnFlagUntilTimeout+0x30>
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e048      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	d031      	beq.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b08      	cmp	r3, #8
 800638e:	d110      	bne.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2208      	movs	r2, #8
 8006396:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f839 	bl	8006410 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2208      	movs	r2, #8
 80063a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e029      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c0:	d111      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f81f 	bl	8006410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e00f      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	429a      	cmp	r2, r3
 8006402:	d0a6      	beq.n	8006352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b095      	sub	sp, #84	; 0x54
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800642c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006436:	643b      	str	r3, [r7, #64]	; 0x40
 8006438:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800643c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e6      	bne.n	8006418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	61fb      	str	r3, [r7, #28]
   return(result);
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <UART_EndRxTransfer+0xc8>)
 800645e:	4013      	ands	r3, r2
 8006460:	64bb      	str	r3, [r7, #72]	; 0x48
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800646a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d118      	bne.n	80064b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	60bb      	str	r3, [r7, #8]
   return(result);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	647b      	str	r3, [r7, #68]	; 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	613b      	str	r3, [r7, #16]
   return(result);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e6      	bne.n	8006486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80064cc:	bf00      	nop
 80064ce:	3754      	adds	r7, #84	; 0x54
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	effffffe 	.word	0xeffffffe

080064dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e027      	b.n	8006542 <HAL_UARTEx_DisableFifoMode+0x66>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	; 0x24
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006562:	2302      	movs	r3, #2
 8006564:	e02d      	b.n	80065c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2224      	movs	r2, #36	; 0x24
 8006572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0201 	bic.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f850 	bl	8006648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065de:	2302      	movs	r3, #2
 80065e0:	e02d      	b.n	800663e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2224      	movs	r2, #36	; 0x24
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0201 	bic.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f812 	bl	8006648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006654:	2b00      	cmp	r3, #0
 8006656:	d108      	bne.n	800666a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006668:	e031      	b.n	80066ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800666a:	2310      	movs	r3, #16
 800666c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800666e:	2310      	movs	r3, #16
 8006670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	0e5b      	lsrs	r3, r3, #25
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	0f5b      	lsrs	r3, r3, #29
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	7b3a      	ldrb	r2, [r7, #12]
 8006696:	4911      	ldr	r1, [pc, #68]	; (80066dc <UARTEx_SetNbDataToProcess+0x94>)
 8006698:	5c8a      	ldrb	r2, [r1, r2]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800669e:	7b3a      	ldrb	r2, [r7, #12]
 80066a0:	490f      	ldr	r1, [pc, #60]	; (80066e0 <UARTEx_SetNbDataToProcess+0x98>)
 80066a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	7b7a      	ldrb	r2, [r7, #13]
 80066b4:	4909      	ldr	r1, [pc, #36]	; (80066dc <UARTEx_SetNbDataToProcess+0x94>)
 80066b6:	5c8a      	ldrb	r2, [r1, r2]
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066bc:	7b7a      	ldrb	r2, [r7, #13]
 80066be:	4908      	ldr	r1, [pc, #32]	; (80066e0 <UARTEx_SetNbDataToProcess+0x98>)
 80066c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	08006da8 	.word	0x08006da8
 80066e0:	08006db0 	.word	0x08006db0

080066e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e4:	b084      	sub	sp, #16
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	f107 001c 	add.w	r0, r7, #28
 80066f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d120      	bne.n	800673e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	4b2a      	ldr	r3, [pc, #168]	; (80067b8 <USB_CoreInit+0xd4>)
 800670e:	4013      	ands	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d105      	bne.n	8006732 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 faac 	bl	8006c90 <USB_CoreReset>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e01a      	b.n	8006774 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 faa0 	bl	8006c90 <USB_CoreReset>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
 8006766:	e005      	b.n	8006774 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	2b01      	cmp	r3, #1
 8006778:	d116      	bne.n	80067a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677e:	b29a      	uxth	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <USB_CoreInit+0xd8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f043 0206 	orr.w	r2, r3, #6
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f043 0220 	orr.w	r2, r3, #32
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b4:	b004      	add	sp, #16
 80067b6:	4770      	bx	lr
 80067b8:	ffbdffbf 	.word	0xffbdffbf
 80067bc:	03ee0000 	.word	0x03ee0000

080067c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f023 0201 	bic.w	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d115      	bne.n	8006830 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006810:	2001      	movs	r0, #1
 8006812:	f7fa fd93 	bl	800133c <HAL_Delay>
      ms++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa29 	bl	8006c74 <USB_GetMode>
 8006822:	4603      	mov	r3, r0
 8006824:	2b01      	cmp	r3, #1
 8006826:	d01e      	beq.n	8006866 <USB_SetCurrentMode+0x84>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b31      	cmp	r3, #49	; 0x31
 800682c:	d9f0      	bls.n	8006810 <USB_SetCurrentMode+0x2e>
 800682e:	e01a      	b.n	8006866 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d115      	bne.n	8006862 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006842:	2001      	movs	r0, #1
 8006844:	f7fa fd7a 	bl	800133c <HAL_Delay>
      ms++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa10 	bl	8006c74 <USB_GetMode>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <USB_SetCurrentMode+0x84>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b31      	cmp	r3, #49	; 0x31
 800685e:	d9f0      	bls.n	8006842 <USB_SetCurrentMode+0x60>
 8006860:	e001      	b.n	8006866 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e005      	b.n	8006872 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b32      	cmp	r3, #50	; 0x32
 800686a:	d101      	bne.n	8006870 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800687c:	b084      	sub	sp, #16
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800688a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	e009      	b.n	80068b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3340      	adds	r3, #64	; 0x40
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	2200      	movs	r2, #0
 80068a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3301      	adds	r3, #1
 80068ae:	613b      	str	r3, [r7, #16]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b0e      	cmp	r3, #14
 80068b4:	d9f2      	bls.n	800689c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d11c      	bne.n	80068f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e005      	b.n	8006902 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	4619      	mov	r1, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691c:	461a      	mov	r2, r3
 800691e:	680b      	ldr	r3, [r1, #0]
 8006920:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10c      	bne.n	8006942 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800692e:	2100      	movs	r1, #0
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f965 	bl	8006c00 <USB_SetDevSpeed>
 8006936:	e008      	b.n	800694a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f960 	bl	8006c00 <USB_SetDevSpeed>
 8006940:	e003      	b.n	800694a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006942:	2103      	movs	r1, #3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f95b 	bl	8006c00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800694a:	2110      	movs	r1, #16
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f8f3 	bl	8006b38 <USB_FlushTxFifo>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f91f 	bl	8006ba0 <USB_FlushRxFifo>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	461a      	mov	r2, r3
 8006974:	2300      	movs	r3, #0
 8006976:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	461a      	mov	r2, r3
 8006980:	2300      	movs	r3, #0
 8006982:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	461a      	mov	r2, r3
 800698c:	2300      	movs	r3, #0
 800698e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006990:	2300      	movs	r3, #0
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	e043      	b.n	8006a1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ac:	d118      	bne.n	80069e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c0:	461a      	mov	r2, r3
 80069c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e013      	b.n	80069f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d6:	461a      	mov	r2, r3
 80069d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e008      	b.n	80069f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	461a      	mov	r2, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	461a      	mov	r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	461a      	mov	r2, r3
 8006a12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d3b7      	bcc.n	8006996 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	e043      	b.n	8006ab4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a42:	d118      	bne.n	8006a76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	461a      	mov	r2, r3
 8006a58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e013      	b.n	8006a88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e008      	b.n	8006a88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	461a      	mov	r2, r3
 8006a84:	2300      	movs	r3, #0
 8006a86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	461a      	mov	r2, r3
 8006a96:	2300      	movs	r3, #0
 8006a98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d3b7      	bcc.n	8006a2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ace:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006adc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f043 0210 	orr.w	r2, r3, #16
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <USB_DevInit+0x2b4>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f043 0208 	orr.w	r2, r3, #8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d105      	bne.n	8006b20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <USB_DevInit+0x2b8>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b2c:	b004      	add	sp, #16
 8006b2e:	4770      	bx	lr
 8006b30:	803c3800 	.word	0x803c3800
 8006b34:	40000004 	.word	0x40000004

08006b38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <USB_FlushTxFifo+0x64>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d901      	bls.n	8006b58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e01b      	b.n	8006b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	daf2      	bge.n	8006b46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	019b      	lsls	r3, r3, #6
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <USB_FlushTxFifo+0x64>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e006      	b.n	8006b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d0f0      	beq.n	8006b70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	00030d40 	.word	0x00030d40

08006ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <USB_FlushRxFifo+0x5c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e018      	b.n	8006bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	daf2      	bge.n	8006bac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2210      	movs	r2, #16
 8006bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <USB_FlushRxFifo+0x5c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e006      	b.n	8006bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	d0f0      	beq.n	8006bd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	00030d40 	.word	0x00030d40

08006c00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c4c:	f023 0303 	bic.w	r3, r3, #3
 8006c50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	f003 0301 	and.w	r3, r3, #1
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a13      	ldr	r2, [pc, #76]	; (8006cf4 <USB_CoreReset+0x64>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e01b      	b.n	8006ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	daf2      	bge.n	8006c9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f043 0201 	orr.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <USB_CoreReset+0x64>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d901      	bls.n	8006cd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e006      	b.n	8006ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d0f0      	beq.n	8006cc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	00030d40 	.word	0x00030d40

08006cf8 <memset>:
 8006cf8:	4402      	add	r2, r0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <memset+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	f803 1b01 	strb.w	r1, [r3], #1
 8006d06:	e7f9      	b.n	8006cfc <memset+0x4>

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4d0d      	ldr	r5, [pc, #52]	; (8006d40 <__libc_init_array+0x38>)
 8006d0c:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d0e:	1b64      	subs	r4, r4, r5
 8006d10:	10a4      	asrs	r4, r4, #2
 8006d12:	2600      	movs	r6, #0
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	4d0b      	ldr	r5, [pc, #44]	; (8006d48 <__libc_init_array+0x40>)
 8006d1a:	4c0c      	ldr	r4, [pc, #48]	; (8006d4c <__libc_init_array+0x44>)
 8006d1c:	f000 f818 	bl	8006d50 <_init>
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	2600      	movs	r6, #0
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	08006dc0 	.word	0x08006dc0
 8006d44:	08006dc0 	.word	0x08006dc0
 8006d48:	08006dc0 	.word	0x08006dc0
 8006d4c:	08006dc4 	.word	0x08006dc4

08006d50 <_init>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr

08006d5c <_fini>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr
