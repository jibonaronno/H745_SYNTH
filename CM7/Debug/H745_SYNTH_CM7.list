
H745_SYNTH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc8  08007dc8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dd0  08007dd0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dd4  08007dd4  00017dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  08007dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  24000060  08007e38  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400099c  08007e38  0002099c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d354  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003309  00000000  00000000  0003d425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  00040730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118e  00000000  00000000  00041da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ddc3  00000000  00000000  00042f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3aa  00000000  00000000  00080cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a13be  00000000  00000000  0009e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065e8  00000000  00000000  0023f464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00245a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007d08 	.word	0x08007d08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08007d08 	.word	0x08007d08

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <myprintf>:
//__IO uint16_t ADC1Val[2] = {0};
//__IO uint16_t ADC2Val[2] = {0};
uint8_t adc_complete = 0;
uint32_t ctr = 0;

void myprintf(const char *fmt, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  static char buffer[200];
  va_list args;
  va_start(args, fmt);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	21c8      	movs	r1, #200	; 0xc8
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <myprintf+0x44>)
 80007ce:	f006 fe09 	bl	80073e4 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <myprintf+0x44>)
 80007d4:	f7ff fd84 	bl	80002e0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <myprintf+0x44>)
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <myprintf+0x48>)
 80007e8:	f005 f9b2 	bl	8005b50 <HAL_UART_Transmit>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000784 	.word	0x24000784
 8000800:	24000110 	.word	0x24000110

08000804 <HAL_TIM_PeriodElapsedCallback>:
uint32_t flag_saving_interval = 0;

uint32_t __t3_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d104      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		__t3_counter++;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800081c:	6013      	str	r3, [r2, #0]
	}

	if(htim == &htim4)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12a      	bne.n	800087c <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if(__t2_cntr < 3)
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d805      	bhi.n	800083a <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			__t2_cntr++;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	e002      	b.n	8000840 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		else
		{
			__t2_cntr = 0;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
		}

		if(__dripA > 0)
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d010      	beq.n	800086a <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			__dripA++;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000850:	6013      	str	r3, [r2, #0]

			if(__dripA > 1500) // 500uS
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800085a:	4293      	cmp	r3, r2
 800085c:	d905      	bls.n	800086a <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_FallingEdge = 0;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
				__dripA = 0;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
			}
		}

		if(flag_saving_interval > 0)
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			if(flag_saving_interval == 1)
			{
				; //endWriting(&log_file);
			}
			flag_saving_interval--;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800087a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	240001c8 	.word	0x240001c8
 800088c:	24000780 	.word	0x24000780
 8000890:	24000214 	.word	0x24000214
 8000894:	24000774 	.word	0x24000774
 8000898:	24000778 	.word	0x24000778
 800089c:	24000770 	.word	0x24000770
 80008a0:	2400077c 	.word	0x2400077c

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008b0:	bf00      	nop
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <main+0xe4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d004      	beq.n	80008c8 <main+0x24>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	dcf4      	bgt.n	80008b2 <main+0xe>
  if ( timeout < 0 )
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da01      	bge.n	80008d2 <main+0x2e>
  {
  Error_Handler();
 80008ce:	f000 fb43 	bl	8000f58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fde1 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f865 	bl	80009a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008da:	f000 f8e3 	bl	8000aa4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <main+0xe4>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <main+0xe4>)
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <main+0xe4>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f001 f94d 	bl	8001b9c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000902:	2100      	movs	r1, #0
 8000904:	2000      	movs	r0, #0
 8000906:	f001 f963 	bl	8001bd0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000910:	bf00      	nop
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <main+0xe4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <main+0x84>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	1e5a      	subs	r2, r3, #1
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dcf4      	bgt.n	8000912 <main+0x6e>
if ( timeout < 0 )
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	da01      	bge.n	8000932 <main+0x8e>
{
Error_Handler();
 800092e:	f000 fb13 	bl	8000f58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 fabb 	bl	8000eac <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000936:	f000 fa87 	bl	8000e48 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800093a:	f000 f937 	bl	8000bac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800093e:	f000 f9e7 	bl	8000d10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000942:	f000 fa33 	bl	8000dac <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000946:	f000 f8e5 	bl	8000b14 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800094a:	f000 f97b 	bl	8000c44 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  myprintf("INIT STARTUP...\r\n\r\n\r\n");
 800094e:	480f      	ldr	r0, [pc, #60]	; (800098c <main+0xe8>)
 8000950:	f7ff ff32 	bl	80007b8 <myprintf>
  HAL_TIM_Base_Start_IT(&htim3);
 8000954:	480e      	ldr	r0, [pc, #56]	; (8000990 <main+0xec>)
 8000956:	f004 fc0f 	bl	8005178 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095e:	f000 fe2d 	bl	80015bc <HAL_Delay>

	  //HAL_UART_Transmit(&huart3, "ADC1 : \r\n", 9, -1); // 4th param need -1
	  //HAL_UART_Transmit(&hlpuart1, "ADC0 : \r\n", 9, -1);
	  myprintf("conv_rate : %d\r\n", conv_rate);
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <main+0xf0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <main+0xf4>)
 800096a:	f7ff ff25 	bl	80007b8 <myprintf>
	  conv_rate = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <main+0xf0>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]

	  myprintf("t3 rate : %d\r\n", __t3_counter);
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <main+0xf8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	4809      	ldr	r0, [pc, #36]	; (80009a0 <main+0xfc>)
 800097c:	f7ff ff1c 	bl	80007b8 <myprintf>
	  __t3_counter = 0;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <main+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 8000986:	e7e8      	b.n	800095a <main+0xb6>
 8000988:	58024400 	.word	0x58024400
 800098c:	08007d20 	.word	0x08007d20
 8000990:	240001c8 	.word	0x240001c8
 8000994:	2400076c 	.word	0x2400076c
 8000998:	08007d38 	.word	0x08007d38
 800099c:	24000780 	.word	0x24000780
 80009a0:	08007d4c 	.word	0x08007d4c

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09c      	sub	sp, #112	; 0x70
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	224c      	movs	r2, #76	; 0x4c
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 fd24 	bl	8007400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2220      	movs	r2, #32
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f006 fd1e 	bl	8007400 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009c4:	2004      	movs	r0, #4
 80009c6:	f001 fa5f 	bl	8001e88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <SystemClock_Config+0xf8>)
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <SystemClock_Config+0xf8>)
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <SystemClock_Config+0xf8>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <SystemClock_Config+0xfc>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ec:	4a2c      	ldr	r2, [pc, #176]	; (8000aa0 <SystemClock_Config+0xfc>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <SystemClock_Config+0xfc>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a00:	bf00      	nop
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <SystemClock_Config+0xfc>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0e:	d1f8      	bne.n	8000a02 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a10:	2309      	movs	r3, #9
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	2302      	movs	r3, #2
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fa85 	bl	8001f5c <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a58:	f000 fa7e 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	233f      	movs	r3, #63	; 0x3f
 8000a5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2303      	movs	r3, #3
 8000a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a70:	2340      	movs	r3, #64	; 0x40
 8000a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2101      	movs	r1, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fec4 	bl	8002810 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a8e:	f000 fa63 	bl	8000f58 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3770      	adds	r7, #112	; 0x70
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	58000400 	.word	0x58000400
 8000aa0:	58024800 	.word	0x58024800

08000aa4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0b0      	sub	sp, #192	; 0xc0
 8000aa8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	22c0      	movs	r2, #192	; 0xc0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f006 fca5 	bl	8007400 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000ab6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000aba:	f04f 0300 	mov.w	r3, #0
 8000abe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ad6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000ae2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ae8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fa14 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000b06:	f000 fa27 	bl	8000f58 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	37c0      	adds	r7, #192	; 0xc0
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_LPUART1_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	f004 ffa7 	bl	8005ab0 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f9f6 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b70:	f006 f837 	bl	8006be2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 f9ed 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b82:	f006 f86c 	bl	8006c5e <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 f9e4 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b92:	f005 ffed 	bl	8006b70 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f9dc 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2400007c 	.word	0x2400007c
 8000ba8:	58000c00 	.word	0x58000c00

08000bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART3_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf6:	f004 ff5b 	bl	8005ab0 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 f9aa 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c08:	f005 ffeb 	bl	8006be2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f000 f9a1 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c1a:	f006 f820 	bl	8006c5e <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 f998 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c2a:	f005 ffa1 	bl	8006b70 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 f990 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	24000110 	.word	0x24000110
 8000c40:	40004800 	.word	0x40004800

08000c44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c5e:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <MX_RTC_Init+0xc8>)
 8000c60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c62:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c6a:	227f      	movs	r2, #127	; 0x7f
 8000c6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c8c:	481e      	ldr	r0, [pc, #120]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000c8e:	f003 ff77 	bl	8004b80 <HAL_RTC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 f95e 	bl	8000f58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000cb8:	f003 ffe4 	bl	8004c84 <HAL_RTC_SetTime>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cc2:	f000 f949 	bl	8000f58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000cde:	f004 f86f 	bl	8004dc0 <HAL_RTC_SetDate>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ce8:	f000 f936 	bl	8000f58 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000cec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_RTC_Init+0xc4>)
 8000cf2:	f004 f9a3 	bl	800503c <HAL_RTCEx_SetCalibrationOutPut>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000cfc:	f000 f92c 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	240001a4 	.word	0x240001a4
 8000d0c:	58004000 	.word	0x58004000

08000d10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d30:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <MX_TIM3_Init+0x98>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d36:	2240      	movs	r2, #64	; 0x40
 8000d38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d54:	f004 f9b9 	bl	80050ca <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d5e:	f000 f8fb 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d70:	f004 fb9a 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f8ed 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_TIM3_Init+0x94>)
 8000d8c:	f004 fde4 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d96:	f000 f8df 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	240001c8 	.word	0x240001c8
 8000da8:	40000400 	.word	0x40000400

08000dac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <MX_TIM4_Init+0x98>)
 8000dce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000dde:	2220      	movs	r2, #32
 8000de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000df0:	f004 f96b 	bl	80050ca <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f8ad 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000e0c:	f004 fb4c 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 f89f 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM4_Init+0x94>)
 8000e28:	f004 fd96 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e32:	f000 f891 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000214 	.word	0x24000214
 8000e44:	40000800 	.word	0x40000800

08000e48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e54:	2209      	movs	r2, #9
 8000e56:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e90:	f000 feb2 	bl	8001bf8 <HAL_PCD_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e9a:	f000 f85d 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	24000260 	.word	0x24000260
 8000ea8:	40080000 	.word	0x40080000

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_GPIO_Init+0xa8>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58024400 	.word	0x58024400

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_MspInit+0x30>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_MspInit+0x30>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_MspInit+0x30>)
 8000f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58024400 	.word	0x58024400

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0be      	sub	sp, #248	; 0xf8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	22c0      	movs	r2, #192	; 0xc0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fa21 	bl	8007400 <memset>
  if(huart->Instance==LPUART1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a5f      	ldr	r2, [pc, #380]	; (8001140 <HAL_UART_MspInit+0x1a8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d16b      	bne.n	80010a0 <HAL_UART_MspInit+0x108>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fc8:	f04f 0204 	mov.w	r2, #4
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 ffa2 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fea:	f7ff ffb5 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fee:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 8000ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffe:	4b51      	ldr	r3, [pc, #324]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101c:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	4a44      	ldr	r2, [pc, #272]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA10     ------> LPUART1_RX
    PB6     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001062:	2303      	movs	r3, #3
 8001064:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800106c:	4619      	mov	r1, r3
 800106e:	4836      	ldr	r0, [pc, #216]	; (8001148 <HAL_UART_MspInit+0x1b0>)
 8001070:	f000 fbe4 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001074:	2340      	movs	r3, #64	; 0x40
 8001076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800108c:	2308      	movs	r3, #8
 800108e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001096:	4619      	mov	r1, r3
 8001098:	482c      	ldr	r0, [pc, #176]	; (800114c <HAL_UART_MspInit+0x1b4>)
 800109a:	f000 fbcf 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800109e:	e04b      	b.n	8001138 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <HAL_UART_MspInit+0x1b8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d146      	bne.n	8001138 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010aa:	f04f 0202 	mov.w	r2, #2
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 ff31 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80010cc:	f7ff ff44 	bl	8000f58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 80010d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d6:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 80010e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a13      	ldr	r2, [pc, #76]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_UART_MspInit+0x1ac>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800110c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001110:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001126:	2307      	movs	r3, #7
 8001128:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001130:	4619      	mov	r1, r3
 8001132:	4808      	ldr	r0, [pc, #32]	; (8001154 <HAL_UART_MspInit+0x1bc>)
 8001134:	f000 fb82 	bl	800183c <HAL_GPIO_Init>
}
 8001138:	bf00      	nop
 800113a:	37f8      	adds	r7, #248	; 0xf8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58000c00 	.word	0x58000c00
 8001144:	58024400 	.word	0x58024400
 8001148:	58020000 	.word	0x58020000
 800114c:	58020400 	.word	0x58020400
 8001150:	40004800 	.word	0x40004800
 8001154:	58020c00 	.word	0x58020c00

08001158 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ba      	sub	sp, #232	; 0xe8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	22c0      	movs	r2, #192	; 0xc0
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f006 f941 	bl	8007400 <memset>
  if(hrtc->Instance==RTC)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_RTC_MspInit+0xb4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13d      	bne.n	8001204 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001188:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 fec1 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 80011ac:	f7ff fed4 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_RTC_MspInit+0xb8>)
 80011b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b4:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_RTC_MspInit+0xb8>)
 80011b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ba:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_RTC_MspInit+0xb8>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_RTC_MspInit+0xb8>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_RTC_MspInit+0xb8>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011da:	2304      	movs	r3, #4
 80011dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_RTC_MspInit+0xbc>)
 8001200:	f000 fb1c 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	37e8      	adds	r7, #232	; 0xe8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58004000 	.word	0x58004000
 8001210:	58024400 	.word	0x58024400
 8001214:	58020400 	.word	0x58020400

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_TIM_Base_MspInit+0x84>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d117      	bne.n	800125a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_TIM_Base_MspInit+0x88>)
 800122c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_TIM_Base_MspInit+0x88>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_TIM_Base_MspInit+0x88>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	201d      	movs	r0, #29
 800124e:	f000 fac0 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001252:	201d      	movs	r0, #29
 8001254:	f000 fad7 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001258:	e01b      	b.n	8001292 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d116      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_TIM_Base_MspInit+0x88>)
 8001266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126a:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_TIM_Base_MspInit+0x88>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_TIM_Base_MspInit+0x88>)
 8001276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	201e      	movs	r0, #30
 8001288:	f000 faa3 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800128c:	201e      	movs	r0, #30
 800128e:	f000 faba 	bl	8001806 <HAL_NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40000400 	.word	0x40000400
 80012a0:	58024400 	.word	0x58024400
 80012a4:	40000800 	.word	0x40000800

080012a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a22      	ldr	r2, [pc, #136]	; (8001350 <HAL_PCD_MspInit+0xa8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d13d      	bne.n	8001346 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012ca:	f000 fe37 	bl	8001f3c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_PCD_MspInit+0xac>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_PCD_MspInit+0xac>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_PCD_MspInit+0xac>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012ec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012fe:	230a      	movs	r3, #10
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <HAL_PCD_MspInit+0xb0>)
 800130a:	f000 fa97 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800130e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <HAL_PCD_MspInit+0xb0>)
 8001324:	f000 fa8a 	bl	800183c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_PCD_MspInit+0xac>)
 800132a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_PCD_MspInit+0xac>)
 8001330:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001334:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_PCD_MspInit+0xac>)
 800133a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800133e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40080000 	.word	0x40080000
 8001354:	58024400 	.word	0x58024400
 8001358:	58020000 	.word	0x58020000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f8e8 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM3_IRQHandler+0x10>)
 80013b6:	f003 ff57 	bl	8005268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	240001c8 	.word	0x240001c8

080013c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM4_IRQHandler+0x10>)
 80013ca:	f003 ff4d 	bl	8005268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24000214 	.word	0x24000214

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f006 f802 	bl	8007410 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	24080000 	.word	0x24080000
 8001438:	00000400 	.word	0x00000400
 800143c:	2400084c 	.word	0x2400084c
 8001440:	240009a0 	.word	0x240009a0

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001448:	f7ff f920 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	; (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	; (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f005 ffd3 	bl	800741c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fa15 	bl	80008a4 <main>
  bx  lr
 800147a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001480:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001484:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001488:	08007dd8 	.word	0x08007dd8
  ldr r2, =_sbss
 800148c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001490:	2400099c 	.word	0x2400099c

08001494 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC3_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149e:	2003      	movs	r0, #3
 80014a0:	f000 f98c 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a4:	f001 fb6a 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_Init+0x68>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	4913      	ldr	r1, [pc, #76]	; (8001504 <HAL_Init+0x6c>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_Init+0x68>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_Init+0x6c>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_Init+0x70>)
 80014da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_Init+0x74>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f814 	bl	8001510 <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e002      	b.n	80014f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fd37 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024400 	.word	0x58024400
 8001504:	08007d5c 	.word	0x08007d5c
 8001508:	24000004 	.word	0x24000004
 800150c:	24000000 	.word	0x24000000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e021      	b.n	8001568 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_InitTick+0x64>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_InitTick+0x60>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f971 	bl	8001822 <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 f93b 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x68>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2400000c 	.word	0x2400000c
 8001574:	24000000 	.word	0x24000000
 8001578:	24000008 	.word	0x24000008

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2400000c 	.word	0x2400000c
 80015a0:	24000850 	.word	0x24000850

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	24000850 	.word	0x24000850

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2400000c 	.word	0x2400000c

08001604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetREVID+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1b      	lsrs	r3, r3, #16
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	5c001000 	.word	0x5c001000

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <__NVIC_SetPriorityGrouping+0x40>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	4313      	orrs	r3, r2
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x40>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	05fa0000 	.word	0x05fa0000

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff40 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff33 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa4 	bl	8001778 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_GPIO_Init+0x234>)
 800184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800184e:	e194      	b.n	8001b7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8186 	beq.w	8001b74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d005      	beq.n	8001880 <HAL_GPIO_Init+0x44>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d130      	bne.n	80018e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 0201 	and.w	r2, r3, #1
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d017      	beq.n	800191e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d123      	bne.n	8001972 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	69b9      	ldr	r1, [r7, #24]
 800196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0203 	and.w	r2, r3, #3
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80e0 	beq.w	8001b74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x238>)
 80019b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ba:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <HAL_GPIO_Init+0x238>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_GPIO_Init+0x238>)
 80019c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_GPIO_Init+0x23c>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_GPIO_Init+0x240>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d052      	beq.n	8001aa4 <HAL_GPIO_Init+0x268>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_GPIO_Init+0x244>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d031      	beq.n	8001a6a <HAL_GPIO_Init+0x22e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_GPIO_Init+0x248>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d02b      	beq.n	8001a66 <HAL_GPIO_Init+0x22a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_GPIO_Init+0x24c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d025      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_GPIO_Init+0x250>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01f      	beq.n	8001a5e <HAL_GPIO_Init+0x222>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x254>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x21e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_GPIO_Init+0x258>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x21a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_GPIO_Init+0x25c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x216>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x260>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_GPIO_Init+0x264>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x20e>
 8001a46:	2309      	movs	r3, #9
 8001a48:	e02d      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	e02b      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a4e:	2308      	movs	r3, #8
 8001a50:	e029      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a52:	2307      	movs	r3, #7
 8001a54:	e027      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a56:	2306      	movs	r3, #6
 8001a58:	e025      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	e023      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	e021      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e01f      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e01d      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e01b      	b.n	8001aa6 <HAL_GPIO_Init+0x26a>
 8001a6e:	bf00      	nop
 8001a70:	58000080 	.word	0x58000080
 8001a74:	58024400 	.word	0x58024400
 8001a78:	58000400 	.word	0x58000400
 8001a7c:	58020000 	.word	0x58020000
 8001a80:	58020400 	.word	0x58020400
 8001a84:	58020800 	.word	0x58020800
 8001a88:	58020c00 	.word	0x58020c00
 8001a8c:	58021000 	.word	0x58021000
 8001a90:	58021400 	.word	0x58021400
 8001a94:	58021800 	.word	0x58021800
 8001a98:	58021c00 	.word	0x58021c00
 8001a9c:	58022000 	.word	0x58022000
 8001aa0:	58022400 	.word	0x58022400
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab6:	4938      	ldr	r1, [pc, #224]	; (8001b98 <HAL_GPIO_Init+0x35c>)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	3301      	adds	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f47f ae63 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3724      	adds	r7, #36	; 0x24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	58000400 	.word	0x58000400

08001b9c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_HSEM_FastTake+0x2c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3320      	adds	r3, #32
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_HSEM_FastTake+0x30>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	58026400 	.word	0x58026400
 8001bcc:	80000300 	.word	0x80000300

08001bd0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001bda:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <HAL_HSEM_Release+0x24>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	58026400 	.word	0x58026400

08001bf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	b08f      	sub	sp, #60	; 0x3c
 8001bfc:	af0a      	add	r7, sp, #40	; 0x28
 8001bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e116      	b.n	8001e38 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d106      	bne.n	8001c2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fb3f 	bl	80012a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 f903 	bl	8006e54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	687e      	ldr	r6, [r7, #4]
 8001c56:	466d      	mov	r5, sp
 8001c58:	f106 0410 	add.w	r4, r6, #16
 8001c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c6c:	1d33      	adds	r3, r6, #4
 8001c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f005 f881 	bl	8006d78 <USB_CoreInit>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0d7      	b.n	8001e38 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 f8f1 	bl	8006e76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e04a      	b.n	8001d30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333d      	adds	r3, #61	; 0x3d
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	333c      	adds	r3, #60	; 0x3c
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	b298      	uxth	r0, r3
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3356      	adds	r3, #86	; 0x56
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3340      	adds	r3, #64	; 0x40
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3344      	adds	r3, #68	; 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3348      	adds	r3, #72	; 0x48
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	334c      	adds	r3, #76	; 0x4c
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3af      	bcc.n	8001c9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e044      	b.n	8001dca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3b5      	bcc.n	8001d40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	687e      	ldr	r6, [r7, #4]
 8001ddc:	466d      	mov	r5, sp
 8001dde:	f106 0410 	add.w	r4, r6, #16
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001df2:	1d33      	adds	r3, r6, #4
 8001df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f005 f88a 	bl	8006f10 <USB_DevInit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e014      	b.n	8001e38 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f80a 	bl	8001e40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 fa48 	bl	80072c6 <USB_DevDisconnect>

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	10000003 	.word	0x10000003

08001e88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e040      	b.n	8001f30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e03e      	b.n	8001f30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001eba:	491f      	ldr	r1, [pc, #124]	; (8001f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ec2:	f7ff fb6f 	bl	80015a4 <HAL_GetTick>
 8001ec6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ec8:	e009      	b.n	8001ede <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001eca:	f7ff fb6b 	bl	80015a4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed8:	d901      	bls.n	8001ede <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e028      	b.n	8001f30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eea:	d1ee      	bne.n	8001eca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b1e      	cmp	r3, #30
 8001ef0:	d008      	beq.n	8001f04 <HAL_PWREx_ConfigSupply+0x7c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ef6:	d005      	beq.n	8001f04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b1d      	cmp	r3, #29
 8001efc:	d002      	beq.n	8001f04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b2d      	cmp	r3, #45	; 0x2d
 8001f02:	d114      	bne.n	8001f2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001f04:	f7ff fb4e 	bl	80015a4 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f0a:	e009      	b.n	8001f20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f0c:	f7ff fb4a 	bl	80015a4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f1a:	d901      	bls.n	8001f20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e007      	b.n	8001f30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	58024800 	.word	0x58024800

08001f3c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	58024800 	.word	0x58024800

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f000 bc48 	b.w	8002800 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8088 	beq.w	800208e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4b99      	ldr	r3, [pc, #612]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f88:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d007      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x48>
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	2b18      	cmp	r3, #24
 8001f98:	d111      	bne.n	8001fbe <HAL_RCC_OscConfig+0x62>
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d06d      	beq.n	800208c <HAL_RCC_OscConfig+0x130>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d169      	bne.n	800208c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f000 bc21 	b.w	8002800 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x7a>
 8001fc8:	4b86      	ldr	r3, [pc, #536]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a85      	ldr	r2, [pc, #532]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e02e      	b.n	8002034 <HAL_RCC_OscConfig+0xd8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x9c>
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b7e      	ldr	r3, [pc, #504]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7d      	ldr	r2, [pc, #500]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8001ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0xd8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0xc0>
 8002002:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xd8>
 800201c:	4b71      	ldr	r3, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a70      	ldr	r2, [pc, #448]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6d      	ldr	r2, [pc, #436]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fab2 	bl	80015a4 <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff faae 	bl	80015a4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e3d4      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xe8>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff fa9e 	bl	80015a4 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fa9a 	bl	80015a4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e3c0      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800207e:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x110>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80ca 	beq.w	8002230 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209c:	4b51      	ldr	r3, [pc, #324]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a6:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_RCC_OscConfig+0x166>
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	2b18      	cmp	r3, #24
 80020b6:	d156      	bne.n	8002166 <HAL_RCC_OscConfig+0x20a>
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d151      	bne.n	8002166 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c2:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x17e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e392      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020da:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0219 	bic.w	r2, r3, #25
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	493f      	ldr	r1, [pc, #252]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fa5a 	bl	80015a4 <HAL_GetTick>
 80020f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fa56 	bl	80015a4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e37c      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	f7ff fa77 	bl	8001604 <HAL_GetREVID>
 8002116:	4603      	mov	r3, r0
 8002118:	f241 0203 	movw	r2, #4099	; 0x1003
 800211c:	4293      	cmp	r3, r2
 800211e:	d817      	bhi.n	8002150 <HAL_RCC_OscConfig+0x1f4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	d108      	bne.n	800213a <HAL_RCC_OscConfig+0x1de>
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002130:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002136:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002138:	e07a      	b.n	8002230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	031b      	lsls	r3, r3, #12
 8002148:	4926      	ldr	r1, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214e:	e06f      	b.n	8002230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	061b      	lsls	r3, r3, #24
 800215e:	4921      	ldr	r1, [pc, #132]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002164:	e064      	b.n	8002230 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d047      	beq.n	80021fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0219 	bic.w	r2, r3, #25
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	491a      	ldr	r1, [pc, #104]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff fa10 	bl	80015a4 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7ff fa0c 	bl	80015a4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e332      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	f7ff fa2d 	bl	8001604 <HAL_GetREVID>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d819      	bhi.n	80021e8 <HAL_RCC_OscConfig+0x28c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d108      	bne.n	80021ce <HAL_RCC_OscConfig+0x272>
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80021c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	e030      	b.n	8002230 <HAL_RCC_OscConfig+0x2d4>
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	031b      	lsls	r3, r3, #12
 80021dc:	4901      	ldr	r1, [pc, #4]	; (80021e4 <HAL_RCC_OscConfig+0x288>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
 80021e2:	e025      	b.n	8002230 <HAL_RCC_OscConfig+0x2d4>
 80021e4:	58024400 	.word	0x58024400
 80021e8:	4b9a      	ldr	r3, [pc, #616]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4997      	ldr	r1, [pc, #604]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e018      	b.n	8002230 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b95      	ldr	r3, [pc, #596]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a94      	ldr	r2, [pc, #592]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f9cb 	bl	80015a4 <HAL_GetTick>
 800220e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7ff f9c7 	bl	80015a4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e2ed      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002224:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a9 	beq.w	8002390 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223e:	4b85      	ldr	r3, [pc, #532]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002246:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002248:	4b82      	ldr	r3, [pc, #520]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d007      	beq.n	8002264 <HAL_RCC_OscConfig+0x308>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b18      	cmp	r3, #24
 8002258:	d13a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x374>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d135      	bne.n	80022d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002264:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x320>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e2c1      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800227c:	f7ff f9c2 	bl	8001604 <HAL_GetREVID>
 8002280:	4603      	mov	r3, r0
 8002282:	f241 0203 	movw	r2, #4099	; 0x1003
 8002286:	4293      	cmp	r3, r2
 8002288:	d817      	bhi.n	80022ba <HAL_RCC_OscConfig+0x35e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2b20      	cmp	r3, #32
 8002290:	d108      	bne.n	80022a4 <HAL_RCC_OscConfig+0x348>
 8002292:	4b70      	ldr	r3, [pc, #448]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800229a:	4a6e      	ldr	r2, [pc, #440]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022a2:	e075      	b.n	8002390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022a4:	4b6b      	ldr	r3, [pc, #428]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	069b      	lsls	r3, r3, #26
 80022b2:	4968      	ldr	r1, [pc, #416]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022b8:	e06a      	b.n	8002390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ba:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	061b      	lsls	r3, r3, #24
 80022c8:	4962      	ldr	r1, [pc, #392]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ce:	e05f      	b.n	8002390 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d042      	beq.n	800235e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022d8:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80022de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f95e 	bl	80015a4 <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80022ec:	f7ff f95a 	bl	80015a4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e280      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022fe:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800230a:	f7ff f97b 	bl	8001604 <HAL_GetREVID>
 800230e:	4603      	mov	r3, r0
 8002310:	f241 0203 	movw	r2, #4099	; 0x1003
 8002314:	4293      	cmp	r3, r2
 8002316:	d817      	bhi.n	8002348 <HAL_RCC_OscConfig+0x3ec>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b20      	cmp	r3, #32
 800231e:	d108      	bne.n	8002332 <HAL_RCC_OscConfig+0x3d6>
 8002320:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002328:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800232a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800232e:	6053      	str	r3, [r2, #4]
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0x434>
 8002332:	4b48      	ldr	r3, [pc, #288]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	069b      	lsls	r3, r3, #26
 8002340:	4944      	ldr	r1, [pc, #272]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e023      	b.n	8002390 <HAL_RCC_OscConfig+0x434>
 8002348:	4b42      	ldr	r3, [pc, #264]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	493f      	ldr	r1, [pc, #252]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f91b 	bl	80015a4 <HAL_GetTick>
 800236e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002372:	f7ff f917 	bl	80015a4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e23d      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d036      	beq.n	800240a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d019      	beq.n	80023d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a4:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	4a2a      	ldr	r2, [pc, #168]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff f8f8 	bl	80015a4 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff f8f4 	bl	80015a4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e21a      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x45c>
 80023d6:	e018      	b.n	800240a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff f8de 	bl	80015a4 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff f8da 	bl	80015a4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e200      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d039      	beq.n	800248a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01c      	beq.n	8002458 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002428:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800242a:	f7ff f8bb 	bl	80015a4 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002432:	f7ff f8b7 	bl	80015a4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1dd      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x4d6>
 8002450:	e01b      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002458:	4b9b      	ldr	r3, [pc, #620]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a9a      	ldr	r2, [pc, #616]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800245e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002462:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002464:	f7ff f89e 	bl	80015a4 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246c:	f7ff f89a 	bl	80015a4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1c0      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800247e:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8081 	beq.w	800259a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002498:	4b8c      	ldr	r3, [pc, #560]	; (80026cc <HAL_RCC_OscConfig+0x770>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a8b      	ldr	r2, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x770>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024a4:	f7ff f87e 	bl	80015a4 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ac:	f7ff f87a 	bl	80015a4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1a0      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024be:	4b83      	ldr	r3, [pc, #524]	; (80026cc <HAL_RCC_OscConfig+0x770>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x584>
 80024d2:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a7c      	ldr	r2, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	e02d      	b.n	800253c <HAL_RCC_OscConfig+0x5e0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x5a6>
 80024e8:	4b77      	ldr	r3, [pc, #476]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a76      	ldr	r2, [pc, #472]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b74      	ldr	r3, [pc, #464]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a73      	ldr	r2, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	e01c      	b.n	800253c <HAL_RCC_OscConfig+0x5e0>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c8>
 800250a:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
 8002516:	4b6c      	ldr	r3, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	4a6b      	ldr	r2, [pc, #428]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6713      	str	r3, [r2, #112]	; 0x70
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0x5e0>
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a67      	ldr	r2, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a64      	ldr	r2, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002536:	f023 0304 	bic.w	r3, r3, #4
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7ff f82e 	bl	80015a4 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7ff f82a 	bl	80015a4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e14e      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002562:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ee      	beq.n	800254c <HAL_RCC_OscConfig+0x5f0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff f818 	bl	80015a4 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7ff f814 	bl	80015a4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e138      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800258e:	4b4e      	ldr	r3, [pc, #312]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ee      	bne.n	8002578 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 812d 	beq.w	80027fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025a4:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ac:	2b18      	cmp	r3, #24
 80025ae:	f000 80bd 	beq.w	800272c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	f040 809e 	bne.w	80026f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a41      	ldr	r2, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80025c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe ffec 	bl	80015a4 <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe ffe8 	bl	80015a4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e10e      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80025f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f2:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x774>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	430a      	orrs	r2, r1
 8002602:	4931      	ldr	r1, [pc, #196]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	628b      	str	r3, [r1, #40]	; 0x28
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	3b01      	subs	r3, #1
 800260e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	3b01      	subs	r3, #1
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	b29b      	uxth	r3, r3
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	3b01      	subs	r3, #1
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002638:	4923      	ldr	r1, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800263a:	4313      	orrs	r3, r2
 800263c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800264a:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCC_OscConfig+0x778>)
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002656:	00d2      	lsls	r2, r2, #3
 8002658:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800265a:	4313      	orrs	r3, r2
 800265c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f023 020c 	bic.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4917      	ldr	r1, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	f023 0202 	bic.w	r2, r3, #2
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	4912      	ldr	r1, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe ff71 	bl	80015a4 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026c4:	e011      	b.n	80026ea <HAL_RCC_OscConfig+0x78e>
 80026c6:	bf00      	nop
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58024800 	.word	0x58024800
 80026d0:	fffffc0c 	.word	0xfffffc0c
 80026d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe ff64 	bl	80015a4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e08a      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x77c>
 80026f6:	e082      	b.n	80027fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80026fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe ff4e 	bl	80015a4 <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe ff4a 	bl	80015a4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e070      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x7b0>
 800272a:	e068      	b.n	80027fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b01      	cmp	r3, #1
 800273e:	d031      	beq.n	80027a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d12a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d122      	bne.n	80027a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d11a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0a5b      	lsrs	r3, r3, #9
 8002772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d111      	bne.n	80027a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e02b      	b.n	8002800 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d01f      	beq.n	80027fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ca:	f7fe feeb 	bl	80015a4 <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80027d0:	bf00      	nop
 80027d2:	f7fe fee7 	bl	80015a4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	4293      	cmp	r3, r2
 80027dc:	d0f9      	beq.n	80027d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_OscConfig+0x8b0>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027ea:	00d2      	lsls	r2, r2, #3
 80027ec:	4906      	ldr	r1, [pc, #24]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCC_OscConfig+0x8ac>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3730      	adds	r7, #48	; 0x30
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58024400 	.word	0x58024400
 800280c:	ffff0007 	.word	0xffff0007

08002810 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e19c      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b8a      	ldr	r3, [pc, #552]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b87      	ldr	r3, [pc, #540]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 020f 	bic.w	r2, r3, #15
 800283a:	4985      	ldr	r1, [pc, #532]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e184      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	4b7b      	ldr	r3, [pc, #492]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800286c:	429a      	cmp	r2, r3
 800286e:	d908      	bls.n	8002882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002870:	4b78      	ldr	r3, [pc, #480]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4975      	ldr	r1, [pc, #468]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 800287e:	4313      	orrs	r3, r2
 8002880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800289a:	429a      	cmp	r2, r3
 800289c:	d908      	bls.n	80028b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	496a      	ldr	r1, [pc, #424]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d010      	beq.n	80028de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d908      	bls.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	495e      	ldr	r1, [pc, #376]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d010      	beq.n	800290c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d908      	bls.n	800290c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4953      	ldr	r1, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002908:	4313      	orrs	r3, r2
 800290a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	429a      	cmp	r2, r3
 8002926:	d908      	bls.n	800293a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f023 020f 	bic.w	r2, r3, #15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4947      	ldr	r1, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002936:	4313      	orrs	r3, r2
 8002938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d055      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002946:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4940      	ldr	r1, [pc, #256]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002954:	4313      	orrs	r3, r2
 8002956:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d107      	bne.n	8002970 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002960:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0f6      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002978:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d115      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0ea      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0de      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d6      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f023 0207 	bic.w	r2, r3, #7
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4925      	ldr	r1, [pc, #148]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c2:	f7fe fdef 	bl	80015a4 <HAL_GetTick>
 80029c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ca:	f7fe fdeb 	bl	80015a4 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0be      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d1eb      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d208      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f023 020f 	bic.w	r2, r3, #15
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d214      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 020f 	bic.w	r2, r3, #15
 8002a36:	4906      	ldr	r1, [pc, #24]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_RCC_ClockConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e086      	b.n	8002b5e <HAL_RCC_ClockConfig+0x34e>
 8002a50:	52002000 	.word	0x52002000
 8002a54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d208      	bcs.n	8002a86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a74:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4939      	ldr	r1, [pc, #228]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d208      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aa2:	4b31      	ldr	r3, [pc, #196]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	492e      	ldr	r1, [pc, #184]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d208      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d208      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4917      	ldr	r1, [pc, #92]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b10:	f000 f834 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	4912      	ldr	r1, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_ClockConfig+0x358>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_RCC_ClockConfig+0x35c>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x360>)
 8002b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b48:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x364>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x368>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fcdc 	bl	8001510 <HAL_InitTick>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	08007d5c 	.word	0x08007d5c
 8002b70:	24000004 	.word	0x24000004
 8002b74:	24000000 	.word	0x24000000
 8002b78:	24000008 	.word	0x24000008

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b82:	4bb3      	ldr	r3, [pc, #716]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8a:	2b18      	cmp	r3, #24
 8002b8c:	f200 8155 	bhi.w	8002e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bfd 	.word	0x08002bfd
 8002b9c:	08002e3b 	.word	0x08002e3b
 8002ba0:	08002e3b 	.word	0x08002e3b
 8002ba4:	08002e3b 	.word	0x08002e3b
 8002ba8:	08002e3b 	.word	0x08002e3b
 8002bac:	08002e3b 	.word	0x08002e3b
 8002bb0:	08002e3b 	.word	0x08002e3b
 8002bb4:	08002e3b 	.word	0x08002e3b
 8002bb8:	08002c23 	.word	0x08002c23
 8002bbc:	08002e3b 	.word	0x08002e3b
 8002bc0:	08002e3b 	.word	0x08002e3b
 8002bc4:	08002e3b 	.word	0x08002e3b
 8002bc8:	08002e3b 	.word	0x08002e3b
 8002bcc:	08002e3b 	.word	0x08002e3b
 8002bd0:	08002e3b 	.word	0x08002e3b
 8002bd4:	08002e3b 	.word	0x08002e3b
 8002bd8:	08002c29 	.word	0x08002c29
 8002bdc:	08002e3b 	.word	0x08002e3b
 8002be0:	08002e3b 	.word	0x08002e3b
 8002be4:	08002e3b 	.word	0x08002e3b
 8002be8:	08002e3b 	.word	0x08002e3b
 8002bec:	08002e3b 	.word	0x08002e3b
 8002bf0:	08002e3b 	.word	0x08002e3b
 8002bf4:	08002e3b 	.word	0x08002e3b
 8002bf8:	08002c2f 	.word	0x08002c2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bfc:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c08:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	4a90      	ldr	r2, [pc, #576]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c1a:	e111      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c1c:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c1e:	61bb      	str	r3, [r7, #24]
      break;
 8002c20:	e10e      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c22:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c24:	61bb      	str	r3, [r7, #24]
      break;
 8002c26:	e10b      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c28:	4b8c      	ldr	r3, [pc, #560]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c2a:	61bb      	str	r3, [r7, #24]
      break;
 8002c2c:	e108      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c2e:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c38:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c44:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c4e:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	08db      	lsrs	r3, r3, #3
 8002c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80e1 	beq.w	8002e34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	f000 8083 	beq.w	8002d80 <HAL_RCC_GetSysClockFreq+0x204>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	f200 80a1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x114>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d056      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c8e:	e099      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02d      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	4a6b      	ldr	r2, [pc, #428]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002cf6:	e087      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d3a:	e065      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4e:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d7e:	e043      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dc2:	e021      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	0a5b      	lsrs	r3, r3, #9
 8002e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e12:	3301      	adds	r3, #1
 8002e14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2c:	ee17 3a90 	vmov	r3, s15
 8002e30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e3c:	61bb      	str	r3, [r7, #24]
      break;
 8002e3e:	bf00      	nop
  }

  return sysclockfreq;
 8002e40:	69bb      	ldr	r3, [r7, #24]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	58024400 	.word	0x58024400
 8002e54:	03d09000 	.word	0x03d09000
 8002e58:	003d0900 	.word	0x003d0900
 8002e5c:	007a1200 	.word	0x007a1200
 8002e60:	46000000 	.word	0x46000000
 8002e64:	4c742400 	.word	0x4c742400
 8002e68:	4a742400 	.word	0x4a742400
 8002e6c:	4af42400 	.word	0x4af42400

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e76:	f7ff fe81 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002eac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002eae:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	08007d5c 	.word	0x08007d5c
 8002ec8:	24000004 	.word	0x24000004
 8002ecc:	24000000 	.word	0x24000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ed4:	f7ff ffcc 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	08007d5c 	.word	0x08007d5c

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f00:	f7ff ffb6 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	58024400 	.word	0x58024400
 8002f24:	08007d5c 	.word	0x08007d5c

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f2c:	b0ca      	sub	sp, #296	; 0x128
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	ea54 0305 	orrs.w	r3, r4, r5
 8002f52:	d049      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f5e:	d02f      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f64:	d828      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f70:	d822      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7a:	d007      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7e:	4bb8      	ldr	r3, [pc, #736]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	4ab7      	ldr	r2, [pc, #732]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f8a:	e01a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f90:	3308      	adds	r3, #8
 8002f92:	2102      	movs	r1, #2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 fc8f 	bl	80048b8 <RCCEx_PLL2_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fa0:	e00f      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa6:	3328      	adds	r3, #40	; 0x28
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 fd36 	bl	8004a1c <RCCEx_PLL3_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fb6:	e004      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fca:	4ba5      	ldr	r3, [pc, #660]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd8:	4aa1      	ldr	r2, [pc, #644]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6513      	str	r3, [r2, #80]	; 0x50
 8002fde:	e003      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002ff4:	f04f 0900 	mov.w	r9, #0
 8002ff8:	ea58 0309 	orrs.w	r3, r8, r9
 8002ffc:	d047      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	2b04      	cmp	r3, #4
 8003006:	d82a      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003025 	.word	0x08003025
 8003014:	08003033 	.word	0x08003033
 8003018:	08003049 	.word	0x08003049
 800301c:	08003067 	.word	0x08003067
 8003020:	08003067 	.word	0x08003067
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003024:	4b8e      	ldr	r3, [pc, #568]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4a8d      	ldr	r2, [pc, #564]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003030:	e01a      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003036:	3308      	adds	r3, #8
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fc3c 	bl	80048b8 <RCCEx_PLL2_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003046:	e00f      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	3328      	adds	r3, #40	; 0x28
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fce3 	bl	8004a1c <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800305c:	e004      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003064:	e000      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003070:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	f023 0107 	bic.w	r1, r3, #7
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	4a78      	ldr	r2, [pc, #480]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003080:	430b      	orrs	r3, r1
 8003082:	6513      	str	r3, [r2, #80]	; 0x50
 8003084:	e003      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800308a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800309a:	f04f 0b00 	mov.w	fp, #0
 800309e:	ea5a 030b 	orrs.w	r3, sl, fp
 80030a2:	d04c      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80030a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	d030      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d829      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030b6:	2bc0      	cmp	r3, #192	; 0xc0
 80030b8:	d02d      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030ba:	2bc0      	cmp	r3, #192	; 0xc0
 80030bc:	d825      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d018      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d821      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d007      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80030ce:	e01c      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d0:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4a62      	ldr	r2, [pc, #392]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80030dc:	e01c      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e2:	3308      	adds	r3, #8
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 fbe6 	bl	80048b8 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80030f2:	e011      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f8:	3328      	adds	r3, #40	; 0x28
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fc8d 	bl	8004a1c <RCCEx_PLL3_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003108:	e006      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003110:	e002      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003120:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003130:	430b      	orrs	r3, r1
 8003132:	6513      	str	r3, [r2, #80]	; 0x50
 8003134:	e003      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800314a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003154:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003158:	460b      	mov	r3, r1
 800315a:	4313      	orrs	r3, r2
 800315c:	d053      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800316a:	d035      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800316c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003170:	d82e      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003172:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003176:	d031      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003178:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800317c:	d828      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003182:	d01a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003188:	d822      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800318e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003192:	d007      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003194:	e01c      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003196:	4b32      	ldr	r3, [pc, #200]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	4a31      	ldr	r2, [pc, #196]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031a2:	e01c      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a8:	3308      	adds	r3, #8
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fb83 	bl	80048b8 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031b8:	e011      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031be:	3328      	adds	r3, #40	; 0x28
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fc2a 	bl	8004a1c <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031ce:	e006      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031d6:	e002      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80031d8:	bf00      	nop
 80031da:	e000      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80031dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80031ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031f6:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6593      	str	r3, [r2, #88]	; 0x58
 80031fc:	e003      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003212:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800321c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003220:	460b      	mov	r3, r1
 8003222:	4313      	orrs	r3, r2
 8003224:	d056      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800322e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003232:	d038      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003238:	d831      	bhi.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800323a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800323e:	d034      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003244:	d82b      	bhi.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800324a:	d01d      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800324c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003250:	d825      	bhi.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003256:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800325c:	e01f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800325e:	bf00      	nop
 8003260:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003264:	4ba2      	ldr	r3, [pc, #648]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4aa1      	ldr	r2, [pc, #644]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003270:	e01c      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003276:	3308      	adds	r3, #8
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f001 fb1c 	bl	80048b8 <RCCEx_PLL2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003286:	e011      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328c:	3328      	adds	r3, #40	; 0x28
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f001 fbc3 	bl	8004a1c <RCCEx_PLL3_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800329c:	e006      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032a4:	e002      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80032aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032b4:	4b8e      	ldr	r3, [pc, #568]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032c4:	4a8a      	ldr	r2, [pc, #552]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80032e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80032ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d03a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	2b30      	cmp	r3, #48	; 0x30
 80032fc:	d01f      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80032fe:	2b30      	cmp	r3, #48	; 0x30
 8003300:	d819      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003302:	2b20      	cmp	r3, #32
 8003304:	d00c      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003306:	2b20      	cmp	r3, #32
 8003308:	d815      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d019      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800330e:	2b10      	cmp	r3, #16
 8003310:	d111      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003312:	4b77      	ldr	r3, [pc, #476]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	4a76      	ldr	r2, [pc, #472]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003324:	3308      	adds	r3, #8
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fac5 	bl	80048b8 <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800333c:	e002      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800335c:	430b      	orrs	r3, r1
 800335e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003360:	e003      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003376:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003380:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003384:	460b      	mov	r3, r1
 8003386:	4313      	orrs	r3, r2
 8003388:	d051      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003394:	d035      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800339a:	d82e      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800339c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033a0:	d031      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80033a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033a6:	d828      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d01a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b2:	d822      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d007      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80033be:	e01c      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a4a      	ldr	r2, [pc, #296]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033cc:	e01c      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d2:	3308      	adds	r3, #8
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 fa6e 	bl	80048b8 <RCCEx_PLL2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e8:	3328      	adds	r3, #40	; 0x28
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fb15 	bl	8004a1c <RCCEx_PLL3_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003410:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003420:	430b      	orrs	r3, r1
 8003422:	6513      	str	r3, [r2, #80]	; 0x50
 8003424:	e003      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800342a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800343a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003444:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d056      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d033      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800345a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800345e:	d82c      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003460:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003464:	d02f      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800346a:	d826      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800346c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003470:	d02b      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003476:	d820      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800347c:	d012      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800347e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003482:	d81a      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d022      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d115      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003492:	3308      	adds	r3, #8
 8003494:	2101      	movs	r1, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fa0e 	bl	80048b8 <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034a2:	e015      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	3328      	adds	r3, #40	; 0x28
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fab5 	bl	8004a1c <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034b8:	e00a      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	4a02      	ldr	r2, [pc, #8]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6513      	str	r3, [r2, #80]	; 0x50
 80034ec:	e006      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80034ee:	bf00      	nop
 80034f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003512:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003516:	460b      	mov	r3, r1
 8003518:	4313      	orrs	r3, r2
 800351a:	d055      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003528:	d033      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800352a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800352e:	d82c      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d02f      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d826      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800353c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003540:	d02b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003546:	d820      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354c:	d012      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800354e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003552:	d81a      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d022      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800355c:	d115      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003562:	3308      	adds	r3, #8
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f001 f9a6 	bl	80048b8 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003572:	e015      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003578:	3328      	adds	r3, #40	; 0x28
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f001 fa4d 	bl	8004a1c <RCCEx_PLL3_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003588:	e00a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003590:	e006      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003592:	bf00      	nop
 8003594:	e004      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800359e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035a8:	4ba3      	ldr	r3, [pc, #652]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035b8:	4a9f      	ldr	r2, [pc, #636]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80035d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80035de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035e2:	460b      	mov	r3, r1
 80035e4:	4313      	orrs	r3, r2
 80035e6:	d037      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f2:	d00e      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80035f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f8:	d816      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d018      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80035fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003602:	d111      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a8b      	ldr	r2, [pc, #556]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003610:	e00f      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003616:	3308      	adds	r3, #8
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f001 f94c 	bl	80048b8 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a7b      	ldr	r2, [pc, #492]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364a:	430b      	orrs	r3, r1
 800364c:	6513      	str	r3, [r2, #80]	; 0x50
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800366e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d039      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367e:	2b03      	cmp	r3, #3
 8003680:	d81c      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036c5 	.word	0x080036c5
 800368c:	08003699 	.word	0x08003699
 8003690:	080036a7 	.word	0x080036a7
 8003694:	080036c5 	.word	0x080036c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003698:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a66      	ldr	r2, [pc, #408]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036aa:	3308      	adds	r3, #8
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f902 	bl	80048b8 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036ce:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f023 0103 	bic.w	r1, r3, #3
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e2:	e003      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003702:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	f000 809f 	beq.w	800384c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370e:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800371a:	f7fd ff43 	bl	80015a4 <HAL_GetTick>
 800371e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003722:	e00b      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fd ff3e 	bl	80015a4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d903      	bls.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800373a:	e005      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800373c:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ed      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800374c:	2b00      	cmp	r3, #0
 800374e:	d179      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800375c:	4053      	eors	r3, r2
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003766:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800378a:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800378c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003796:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800379a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379e:	d118      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd ff00 	bl	80015a4 <HAL_GetTick>
 80037a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a8:	e00d      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd fefb 	bl	80015a4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037b4:	1ad2      	subs	r2, r2, r3
 80037b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d903      	bls.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80037c4:	e005      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0eb      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80037d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d129      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d10e      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037fc:	091a      	lsrs	r2, r3, #4
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003800:	4013      	ands	r3, r2
 8003802:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003804:	430b      	orrs	r3, r1
 8003806:	6113      	str	r3, [r2, #16]
 8003808:	e005      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003810:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003814:	6113      	str	r3, [r2, #16]
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003818:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	e00e      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800382e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003836:	e009      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003838:	58024400 	.word	0x58024400
 800383c:	58024800 	.word	0x58024800
 8003840:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f002 0301 	and.w	r3, r2, #1
 8003858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003862:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003866:	460b      	mov	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	f000 8089 	beq.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003874:	2b28      	cmp	r3, #40	; 0x28
 8003876:	d86b      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003959 	.word	0x08003959
 8003884:	08003951 	.word	0x08003951
 8003888:	08003951 	.word	0x08003951
 800388c:	08003951 	.word	0x08003951
 8003890:	08003951 	.word	0x08003951
 8003894:	08003951 	.word	0x08003951
 8003898:	08003951 	.word	0x08003951
 800389c:	08003951 	.word	0x08003951
 80038a0:	08003925 	.word	0x08003925
 80038a4:	08003951 	.word	0x08003951
 80038a8:	08003951 	.word	0x08003951
 80038ac:	08003951 	.word	0x08003951
 80038b0:	08003951 	.word	0x08003951
 80038b4:	08003951 	.word	0x08003951
 80038b8:	08003951 	.word	0x08003951
 80038bc:	08003951 	.word	0x08003951
 80038c0:	0800393b 	.word	0x0800393b
 80038c4:	08003951 	.word	0x08003951
 80038c8:	08003951 	.word	0x08003951
 80038cc:	08003951 	.word	0x08003951
 80038d0:	08003951 	.word	0x08003951
 80038d4:	08003951 	.word	0x08003951
 80038d8:	08003951 	.word	0x08003951
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003951 	.word	0x08003951
 80038e8:	08003951 	.word	0x08003951
 80038ec:	08003951 	.word	0x08003951
 80038f0:	08003951 	.word	0x08003951
 80038f4:	08003951 	.word	0x08003951
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003951 	.word	0x08003951
 8003900:	08003959 	.word	0x08003959
 8003904:	08003951 	.word	0x08003951
 8003908:	08003951 	.word	0x08003951
 800390c:	08003951 	.word	0x08003951
 8003910:	08003951 	.word	0x08003951
 8003914:	08003951 	.word	0x08003951
 8003918:	08003951 	.word	0x08003951
 800391c:	08003951 	.word	0x08003951
 8003920:	08003959 	.word	0x08003959
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003928:	3308      	adds	r3, #8
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 ffc3 	bl	80048b8 <RCCEx_PLL2_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003938:	e00f      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393e:	3328      	adds	r3, #40	; 0x28
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f001 f86a 	bl	8004a1c <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800394e:	e004      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003962:	4bbf      	ldr	r3, [pc, #764]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003970:	4abb      	ldr	r2, [pc, #748]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003972:	430b      	orrs	r3, r1
 8003974:	6553      	str	r3, [r2, #84]	; 0x54
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f002 0302 	and.w	r3, r2, #2
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003996:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d041      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d824      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039fd 	.word	0x080039fd
 80039b4:	080039c9 	.word	0x080039c9
 80039b8:	080039df 	.word	0x080039df
 80039bc:	080039fd 	.word	0x080039fd
 80039c0:	080039fd 	.word	0x080039fd
 80039c4:	080039fd 	.word	0x080039fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039cc:	3308      	adds	r3, #8
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 ff71 	bl	80048b8 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039dc:	e00f      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e2:	3328      	adds	r3, #40	; 0x28
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 f818 	bl	8004a1c <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a06:	4b96      	ldr	r3, [pc, #600]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f023 0107 	bic.w	r1, r3, #7
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a14:	4a92      	ldr	r2, [pc, #584]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6553      	str	r3, [r2, #84]	; 0x54
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 0304 	and.w	r3, r2, #4
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d044      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d825      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003aa5 	.word	0x08003aa5
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a87 	.word	0x08003a87
 8003a64:	08003aa5 	.word	0x08003aa5
 8003a68:	08003aa5 	.word	0x08003aa5
 8003a6c:	08003aa5 	.word	0x08003aa5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	3308      	adds	r3, #8
 8003a76:	2101      	movs	r1, #1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 ff1d 	bl	80048b8 <RCCEx_PLL2_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a84:	e00f      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8a:	3328      	adds	r3, #40	; 0x28
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 ffc4 	bl	8004a1c <RCCEx_PLL3_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aae:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	f023 0107 	bic.w	r1, r3, #7
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	4a68      	ldr	r2, [pc, #416]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f002 0320 	and.w	r3, r2, #32
 8003ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4313      	orrs	r3, r2
 8003aec:	d055      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003afa:	d033      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b00:	d82c      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d02f      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d826      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b12:	d02b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b18:	d820      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b1e:	d012      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d81a      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d022      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b2e:	d115      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b34:	3308      	adds	r3, #8
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 febd 	bl	80048b8 <RCCEx_PLL2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b44:	e015      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4a:	3328      	adds	r3, #40	; 0x28
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 ff64 	bl	8004a1c <RCCEx_PLL3_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b62:	e006      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b64:	bf00      	nop
 8003b66:	e004      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b68:	bf00      	nop
 8003b6a:	e002      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d058      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bc6:	d033      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003bc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bcc:	d82c      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d02f      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d826      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bde:	d02b      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be4:	d820      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d012      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d81a      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d022      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d115      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c00:	3308      	adds	r3, #8
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fe57 	bl	80048b8 <RCCEx_PLL2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c10:	e015      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c16:	3328      	adds	r3, #40	; 0x28
 8003c18:	2102      	movs	r1, #2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fefe 	bl	8004a1c <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c26:	e00a      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c2e:	e006      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c30:	bf00      	nop
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10e      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c56:	4a02      	ldr	r2, [pc, #8]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	e006      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003c5e:	bf00      	nop
 8003c60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d055      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c98:	d033      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003c9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c9e:	d82c      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca4:	d02f      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003caa:	d826      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cb0:	d02b      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003cb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cb6:	d820      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cbc:	d012      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc2:	d81a      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d022      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fdee 	bl	80048b8 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e015      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce8:	3328      	adds	r3, #40	; 0x28
 8003cea:	2102      	movs	r1, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fe95 	bl	8004a1c <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d02:	bf00      	nop
 8003d04:	e004      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d18:	4ba1      	ldr	r3, [pc, #644]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d28:	4a9d      	ldr	r2, [pc, #628]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f002 0308 	and.w	r3, r2, #8
 8003d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d52:	460b      	mov	r3, r1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	d01e      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6a:	3328      	adds	r3, #40	; 0x28
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fe54 	bl	8004a1c <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d80:	4b87      	ldr	r3, [pc, #540]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	4a83      	ldr	r2, [pc, #524]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d92:	430b      	orrs	r3, r1
 8003d94:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f002 0310 	and.w	r3, r2, #16
 8003da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003dac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003db0:	460b      	mov	r3, r1
 8003db2:	4313      	orrs	r3, r2
 8003db4:	d01e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	3328      	adds	r3, #40	; 0x28
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fe25 	bl	8004a1c <RCCEx_PLL3_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dde:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dee:	4a6c      	ldr	r2, [pc, #432]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d03e      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e20:	d022      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e26:	d81b      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e30:	d00b      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003e32:	e015      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd3b 	bl	80048b8 <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	3328      	adds	r3, #40	; 0x28
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fde2 	bl	8004a1c <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e72:	4b4b      	ldr	r3, [pc, #300]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e82:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6593      	str	r3, [r2, #88]	; 0x58
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d03b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eba:	d01f      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003ebc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ec0:	d818      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ecc:	d007      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003ece:	e011      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed0:	4b33      	ldr	r3, [pc, #204]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003edc:	e00f      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee2:	3328      	adds	r3, #40	; 0x28
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fd98 	bl	8004a1c <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f06:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f32:	673b      	str	r3, [r7, #112]	; 0x70
 8003f34:	2300      	movs	r3, #0
 8003f36:	677b      	str	r3, [r7, #116]	; 0x74
 8003f38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	d034      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d007      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003f52:	e011      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f60:	e00e      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f66:	3308      	adds	r3, #8
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fca4 	bl	80048b8 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	4a02      	ldr	r2, [pc, #8]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fba:	2300      	movs	r3, #0
 8003fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fcc:	3328      	adds	r3, #40	; 0x28
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd23 	bl	8004a1c <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fee:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d038      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400a:	d018      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800400c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004010:	d811      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004016:	d014      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401c:	d80b      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d011      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d106      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004028:	4bc3      	ldr	r3, [pc, #780]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4ac2      	ldr	r2, [pc, #776]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004034:	e008      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800403c:	e004      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10b      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004050:	4bb9      	ldr	r3, [pc, #740]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004060:	4ab5      	ldr	r2, [pc, #724]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004062:	430b      	orrs	r3, r1
 8004064:	6553      	str	r3, [r2, #84]	; 0x54
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800406c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800407c:	65bb      	str	r3, [r7, #88]	; 0x58
 800407e:	2300      	movs	r3, #0
 8004080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004082:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800408c:	4baa      	ldr	r3, [pc, #680]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	4aa7      	ldr	r2, [pc, #668]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
 80040ae:	2300      	movs	r3, #0
 80040b0:	657b      	str	r3, [r7, #84]	; 0x54
 80040b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80040b6:	460b      	mov	r3, r1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040bc:	4b9e      	ldr	r3, [pc, #632]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040cc:	4a9a      	ldr	r2, [pc, #616]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e0:	2300      	movs	r3, #0
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040e8:	460b      	mov	r3, r1
 80040ea:	4313      	orrs	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ee:	4b92      	ldr	r3, [pc, #584]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	4a8e      	ldr	r2, [pc, #568]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800410e:	643b      	str	r3, [r7, #64]	; 0x40
 8004110:	2300      	movs	r3, #0
 8004112:	647b      	str	r3, [r7, #68]	; 0x44
 8004114:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d00e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800411e:	4b86      	ldr	r3, [pc, #536]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	4a85      	ldr	r2, [pc, #532]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004128:	6113      	str	r3, [r2, #16]
 800412a:	4b83      	ldr	r3, [pc, #524]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800412c:	6919      	ldr	r1, [r3, #16]
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004136:	4a80      	ldr	r2, [pc, #512]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004138:	430b      	orrs	r3, r1
 800413a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
 800414a:	2300      	movs	r3, #0
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004158:	4b77      	ldr	r3, [pc, #476]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	4a74      	ldr	r2, [pc, #464]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004168:	430b      	orrs	r3, r1
 800416a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
 800417e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004188:	4b6b      	ldr	r3, [pc, #428]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004198:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419a:	430b      	orrs	r3, r1
 800419c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	2100      	movs	r1, #0
 80041a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d011      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041be:	3308      	adds	r3, #8
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fb78 	bl	80048b8 <RCCEx_PLL2_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80041ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	2100      	movs	r1, #0
 80041e8:	6239      	str	r1, [r7, #32]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
 80041f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d011      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	3308      	adds	r3, #8
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fb58 	bl	80048b8 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	2100      	movs	r1, #0
 8004228:	61b9      	str	r1, [r7, #24]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004234:	460b      	mov	r3, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	d011      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423e:	3308      	adds	r3, #8
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fb38 	bl	80048b8 <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800425a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	2100      	movs	r1, #0
 8004268:	6139      	str	r1, [r7, #16]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004274:	460b      	mov	r3, r1
 8004276:	4313      	orrs	r3, r2
 8004278:	d011      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427e:	3328      	adds	r3, #40	; 0x28
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fbca 	bl	8004a1c <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	2100      	movs	r1, #0
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d011      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	3328      	adds	r3, #40	; 0x28
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fbaa 	bl	8004a1c <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	2100      	movs	r1, #0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d011      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	3328      	adds	r3, #40	; 0x28
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fb8a 	bl	8004a1c <RCCEx_PLL3_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800430e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800431e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
}
 800432c:	4618      	mov	r0, r3
 800432e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004338:	58024400 	.word	0x58024400

0800433c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004340:	f7fe fd96 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	58024400 	.word	0x58024400
 8004364:	08007d5c 	.word	0x08007d5c

08004368 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004370:	4ba1      	ldr	r3, [pc, #644]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800437a:	4b9f      	ldr	r3, [pc, #636]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	0b1b      	lsrs	r3, r3, #12
 8004380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004384:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004386:	4b9c      	ldr	r3, [pc, #624]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004392:	4b99      	ldr	r3, [pc, #612]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8111 	beq.w	80045d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	f000 8083 	beq.w	80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f200 80a1 	bhi.w	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043d2:	e099      	b.n	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d4:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02d      	beq.n	800443c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043e0:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	4a84      	ldr	r2, [pc, #528]	; (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b7b      	ldr	r3, [pc, #492]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a03 	vldr	s12, [r7, #12]
 800441e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800443a:	e087      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800447e:	e065      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c2:	e043      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800460c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004506:	e021      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004566:	edd7 6a07 	vldr	s13, [r7, #28]
 800456a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004572:	ee17 2a90 	vmov	r2, s15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004594:	edd7 6a07 	vldr	s13, [r7, #28]
 8004598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
}
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	03d09000 	.word	0x03d09000
 8004600:	46000000 	.word	0x46000000
 8004604:	4c742400 	.word	0x4c742400
 8004608:	4a742400 	.word	0x4a742400
 800460c:	4af42400 	.word	0x4af42400

08004610 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004618:	4ba1      	ldr	r3, [pc, #644]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004622:	4b9f      	ldr	r3, [pc, #636]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	0d1b      	lsrs	r3, r3, #20
 8004628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800462c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800462e:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800463a:	4b99      	ldr	r3, [pc, #612]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	08db      	lsrs	r3, r3, #3
 8004640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8111 	beq.w	8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b02      	cmp	r3, #2
 8004662:	f000 8083 	beq.w	800476c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b02      	cmp	r3, #2
 800466a:	f200 80a1 	bhi.w	80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d056      	beq.n	8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800467a:	e099      	b.n	80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467c:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02d      	beq.n	80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004688:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	4a84      	ldr	r2, [pc, #528]	; (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046e2:	e087      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004726:	e065      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b59      	ldr	r3, [pc, #356]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a03 	vldr	s12, [r7, #12]
 800474e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476a:	e043      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ae:	e021      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	0a5b      	lsrs	r3, r3, #9
 80047fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800480e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481a:	ee17 2a90 	vmov	r2, s15
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 2a90 	vmov	r2, s15
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	0e1b      	lsrs	r3, r3, #24
 8004856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486a:	edd7 6a07 	vldr	s13, [r7, #28]
 800486e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004876:	ee17 2a90 	vmov	r2, s15
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
}
 8004892:	bf00      	nop
 8004894:	3724      	adds	r7, #36	; 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
 80048a4:	03d09000 	.word	0x03d09000
 80048a8:	46000000 	.word	0x46000000
 80048ac:	4c742400 	.word	0x4c742400
 80048b0:	4a742400 	.word	0x4a742400
 80048b4:	4af42400 	.word	0x4af42400

080048b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048c6:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d101      	bne.n	80048d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e099      	b.n	8004a0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048d6:	4b4f      	ldr	r3, [pc, #316]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a4e      	ldr	r2, [pc, #312]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e2:	f7fc fe5f 	bl	80015a4 <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048e8:	e008      	b.n	80048fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048ea:	f7fc fe5b 	bl	80015a4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e086      	b.n	8004a0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048fc:	4b45      	ldr	r3, [pc, #276]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	031b      	lsls	r3, r3, #12
 8004916:	493f      	ldr	r1, [pc, #252]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	628b      	str	r3, [r1, #40]	; 0x28
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	3b01      	subs	r3, #1
 8004922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	b29b      	uxth	r3, r3
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	3b01      	subs	r3, #1
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800494c:	4931      	ldr	r1, [pc, #196]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800494e:	4313      	orrs	r3, r2
 8004950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004952:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	492d      	ldr	r1, [pc, #180]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f023 0220 	bic.w	r2, r3, #32
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	4928      	ldr	r1, [pc, #160]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <RCCEx_PLL2_Config+0x160>)
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	69d2      	ldr	r2, [r2, #28]
 800498e:	00d2      	lsls	r2, r2, #3
 8004990:	4920      	ldr	r1, [pc, #128]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 800499c:	f043 0310 	orr.w	r3, r3, #16
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b4:	e00f      	b.n	80049d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049bc:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c8:	e005      	b.n	80049d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fc fddf 	bl	80015a4 <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049e8:	e008      	b.n	80049fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049ea:	f7fc fddb 	bl	80015a4 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e006      	b.n	8004a0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400
 8004a18:	ffff0007 	.word	0xffff0007

08004a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d101      	bne.n	8004a3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e099      	b.n	8004b6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a3a:	4b4f      	ldr	r3, [pc, #316]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a4e      	ldr	r2, [pc, #312]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a46:	f7fc fdad 	bl	80015a4 <HAL_GetTick>
 8004a4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a4e:	f7fc fda9 	bl	80015a4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e086      	b.n	8004b6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a6c:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	051b      	lsls	r3, r3, #20
 8004a7a:	493f      	ldr	r1, [pc, #252]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	025b      	lsls	r3, r3, #9
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ab0:	4931      	ldr	r1, [pc, #196]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ab6:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	492d      	ldr	r1, [pc, #180]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4928      	ldr	r1, [pc, #160]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <RCCEx_PLL3_Config+0x160>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	69d2      	ldr	r2, [r2, #28]
 8004af2:	00d2      	lsls	r2, r2, #3
 8004af4:	4920      	ldr	r1, [pc, #128]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004afa:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b18:	e00f      	b.n	8004b3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b2c:	e005      	b.n	8004b3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a11      	ldr	r2, [pc, #68]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b46:	f7fc fd2d 	bl	80015a4 <HAL_GetTick>
 8004b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b4e:	f7fc fd29 	bl	80015a4 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e006      	b.n	8004b6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	ffff0007 	.word	0xffff0007

08004b80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d071      	beq.n	8004c76 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc fad6 	bl	8001158 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d050      	beq.n	8004c64 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	22ca      	movs	r2, #202	; 0xca
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2253      	movs	r2, #83	; 0x53
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f9a0 	bl	8004f18 <RTC_EnterInitMode>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d124      	bne.n	8004c2c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RTC_Init+0x100>)
 8004bee:	400b      	ands	r3, r1
 8004bf0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	0419      	lsls	r1, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9ac 	bl	8004f80 <RTC_ExitInitMode>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d113      	bne.n	8004c5a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0203 	bic.w	r2, r2, #3
 8004c40:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
 8004c62:	e001      	b.n	8004c68 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	ff8fffbf 	.word	0xff8fffbf

08004c84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_RTC_SetTime+0x1a>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e089      	b.n	8004db2 <HAL_RTC_SetTime+0x12e>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	22ca      	movs	r2, #202	; 0xca
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2253      	movs	r2, #83	; 0x53
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f92a 	bl	8004f18 <RTC_EnterInitMode>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d161      	bne.n	8004d92 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d126      	bne.n	8004d22 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f985 	bl	8004ffc <RTC_ByteToBcd2>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f97e 	bl	8004ffc <RTC_ByteToBcd2>
 8004d00:	4603      	mov	r3, r0
 8004d02:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d04:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	789b      	ldrb	r3, [r3, #2]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f976 	bl	8004ffc <RTC_ByteToBcd2>
 8004d10:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d12:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	78db      	ldrb	r3, [r3, #3]
 8004d1a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e018      	b.n	8004d54 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d42:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d48:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	78db      	ldrb	r3, [r3, #3]
 8004d4e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	6979      	ldr	r1, [r7, #20]
 8004d5a:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <HAL_RTC_SetTime+0x138>)
 8004d5c:	400b      	ands	r3, r1
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d6e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6899      	ldr	r1, [r3, #8]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f8f9 	bl	8004f80 <RTC_ExitInitMode>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	22ff      	movs	r2, #255	; 0xff
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	007f7f7f 	.word	0x007f7f7f

08004dc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_RTC_SetDate+0x1a>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e073      	b.n	8004ec2 <HAL_RTC_SetDate+0x102>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10e      	bne.n	8004e0e <HAL_RTC_SetDate+0x4e>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	f023 0310 	bic.w	r3, r3, #16
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	330a      	adds	r3, #10
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11c      	bne.n	8004e4e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	78db      	ldrb	r3, [r3, #3]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f8ef 	bl	8004ffc <RTC_ByteToBcd2>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f8e8 	bl	8004ffc <RTC_ByteToBcd2>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	789b      	ldrb	r3, [r3, #2]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f8e0 	bl	8004ffc <RTC_ByteToBcd2>
 8004e3c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e3e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e00e      	b.n	8004e6c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	78db      	ldrb	r3, [r3, #3]
 8004e52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e5a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	22ca      	movs	r2, #202	; 0xca
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2253      	movs	r2, #83	; 0x53
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f84b 	bl	8004f18 <RTC_EnterInitMode>
 8004e82:	4603      	mov	r3, r0
 8004e84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	6979      	ldr	r1, [r7, #20]
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <HAL_RTC_SetDate+0x10c>)
 8004e94:	400b      	ands	r3, r1
 8004e96:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f871 	bl	8004f80 <RTC_ExitInitMode>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]


}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd90      	pop	{r4, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	00ffff3f 	.word	0x00ffff3f

08004ed0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <HAL_RTC_WaitForSynchro+0x44>)
 8004ede:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8004ee0:	f7fc fb60 	bl	80015a4 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ee6:	e009      	b.n	8004efc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ee8:	f7fc fb5c 	bl	80015a4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef6:	d901      	bls.n	8004efc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e007      	b.n	8004f0c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0ee      	beq.n	8004ee8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	0003ff5f 	.word	0x0003ff5f

08004f18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d120      	bne.n	8004f74 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f3c:	f7fc fb32 	bl	80015a4 <HAL_GetTick>
 8004f40:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f42:	e00d      	b.n	8004f60 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f44:	f7fc fb2e 	bl	80015a4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f52:	d905      	bls.n	8004f60 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <RTC_EnterInitMode+0x5c>
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d1e7      	bne.n	8004f44 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f96:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f98:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10c      	bne.n	8004fbe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff93 	bl	8004ed0 <HAL_RTC_WaitForSynchro>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01e      	beq.n	8004fee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e017      	b.n	8004fee <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004fc4:	f023 0320 	bic.w	r3, r3, #32
 8004fc8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff80 	bl	8004ed0 <HAL_RTC_WaitForSynchro>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <RTC_ExitInitMode+0x78>)
 8004fe8:	f043 0320 	orr.w	r3, r3, #32
 8004fec:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	58004000 	.word	0x58004000

08004ffc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800500e:	e005      	b.n	800501c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3301      	adds	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	3b0a      	subs	r3, #10
 800501a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800501c:	7afb      	ldrb	r3, [r7, #11]
 800501e:	2b09      	cmp	r3, #9
 8005020:	d8f6      	bhi.n	8005010 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	b2da      	uxtb	r2, r3
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	4313      	orrs	r3, r2
 800502e:	b2db      	uxtb	r3, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e034      	b.n	80050be <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	22ca      	movs	r2, #202	; 0xca
 800506a:	625a      	str	r2, [r3, #36]	; 0x24
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2253      	movs	r2, #83	; 0x53
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005082:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80050a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	22ff      	movs	r2, #255	; 0xff
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e049      	b.n	8005170 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fc f891 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 faed 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	d001      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e054      	b.n	800523a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a26      	ldr	r2, [pc, #152]	; (8005248 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d01d      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <HAL_TIM_Base_Start_IT+0xd4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a21      	ldr	r2, [pc, #132]	; (8005250 <HAL_TIM_Base_Start_IT+0xd8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_TIM_Base_Start_IT+0xe0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_TIM_Base_Start_IT+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_TIM_Base_Start_IT+0xe8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d115      	bne.n	8005224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	4b19      	ldr	r3, [pc, #100]	; (8005264 <HAL_TIM_Base_Start_IT+0xec>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b06      	cmp	r3, #6
 8005208:	d015      	beq.n	8005236 <HAL_TIM_Base_Start_IT+0xbe>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d011      	beq.n	8005236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	e008      	b.n	8005236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e000      	b.n	8005238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40010400 	.word	0x40010400
 800525c:	40001800 	.word	0x40001800
 8005260:	40014000 	.word	0x40014000
 8005264:	00010007 	.word	0x00010007

08005268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0202 	mvn.w	r2, #2
 8005294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9fe 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9f0 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fa01 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0204 	mvn.w	r2, #4
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9d4 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9c6 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9d7 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b08      	cmp	r3, #8
 8005324:	d122      	bne.n	800536c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0208 	mvn.w	r2, #8
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9aa 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f99c 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9ad 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b10      	cmp	r3, #16
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2208      	movs	r2, #8
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f980 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f972 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f983 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0201 	mvn.w	r2, #1
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb fa0c 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb38 	bl	8005a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d10e      	bne.n	8005446 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d107      	bne.n	8005446 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800543e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fb2b 	bl	8005a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d10e      	bne.n	8005472 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d107      	bne.n	8005472 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f931 	bl	80056d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b20      	cmp	r3, #32
 800547e:	d10e      	bne.n	800549e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d107      	bne.n	800549e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f06f 0220 	mvn.w	r2, #32
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 faeb 	bl	8005a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_ConfigClockSource+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0dc      	b.n	800567e <HAL_TIM_ConfigClockSource+0x1d6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <HAL_TIM_ConfigClockSource+0x1e0>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a64      	ldr	r2, [pc, #400]	; (800568c <HAL_TIM_ConfigClockSource+0x1e4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f000 80a9 	beq.w	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005500:	4a62      	ldr	r2, [pc, #392]	; (800568c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f200 80ae 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005508:	4a61      	ldr	r2, [pc, #388]	; (8005690 <HAL_TIM_ConfigClockSource+0x1e8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	f000 80a1 	beq.w	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005510:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f200 80a6 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005518:	4a5e      	ldr	r2, [pc, #376]	; (8005694 <HAL_TIM_ConfigClockSource+0x1ec>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f000 8099 	beq.w	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005520:	4a5c      	ldr	r2, [pc, #368]	; (8005694 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f200 809e 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005528:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800552c:	f000 8091 	beq.w	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005530:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005534:	f200 8096 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553c:	f000 8089 	beq.w	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005544:	f200 808e 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d03e      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0x124>
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005552:	f200 8087 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	f000 8086 	beq.w	800566a <HAL_TIM_ConfigClockSource+0x1c2>
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d87f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d01a      	beq.n	800559e <HAL_TIM_ConfigClockSource+0xf6>
 8005568:	2b70      	cmp	r3, #112	; 0x70
 800556a:	d87b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d050      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x16a>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d877      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d03c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x14a>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d873      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d058      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x18a>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d86f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d064      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d86b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d060      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d867      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05c      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 8005598:	2b10      	cmp	r3, #16
 800559a:	d05a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x1aa>
 800559c:	e062      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	f000 f9b3 	bl	8005918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	609a      	str	r2, [r3, #8]
      break;
 80055ca:	e04f      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	f000 f99c 	bl	8005918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ee:	609a      	str	r2, [r3, #8]
      break;
 80055f0:	e03c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 f90c 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2150      	movs	r1, #80	; 0x50
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f966 	bl	80058dc <TIM_ITRx_SetConfig>
      break;
 8005610:	e02c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800561e:	461a      	mov	r2, r3
 8005620:	f000 f92b 	bl	800587a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2160      	movs	r1, #96	; 0x60
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f956 	bl	80058dc <TIM_ITRx_SetConfig>
      break;
 8005630:	e01c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 f8ec 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f946 	bl	80058dc <TIM_ITRx_SetConfig>
      break;
 8005650:	e00c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f000 f93d 	bl	80058dc <TIM_ITRx_SetConfig>
      break;
 8005662:	e003      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800566a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	ffceff88 	.word	0xffceff88
 800568c:	00100040 	.word	0x00100040
 8005690:	00100030 	.word	0x00100030
 8005694:	00100020 	.word	0x00100020

08005698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a40      	ldr	r2, [pc, #256]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <TIM_Base_SetConfig+0x118>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3c      	ldr	r2, [pc, #240]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <TIM_Base_SetConfig+0x120>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a3a      	ldr	r2, [pc, #232]	; (800580c <TIM_Base_SetConfig+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <TIM_Base_SetConfig+0x114>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01f      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d01b      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2c      	ldr	r2, [pc, #176]	; (8005800 <TIM_Base_SetConfig+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d017      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <TIM_Base_SetConfig+0x120>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00f      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a29      	ldr	r2, [pc, #164]	; (800580c <TIM_Base_SetConfig+0x124>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00b      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a28      	ldr	r2, [pc, #160]	; (8005810 <TIM_Base_SetConfig+0x128>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <TIM_Base_SetConfig+0x12c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_Base_SetConfig+0x9a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a26      	ldr	r2, [pc, #152]	; (8005818 <TIM_Base_SetConfig+0x130>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00f      	beq.n	80057e0 <TIM_Base_SetConfig+0xf8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <TIM_Base_SetConfig+0x124>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <TIM_Base_SetConfig+0xf8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a11      	ldr	r2, [pc, #68]	; (8005810 <TIM_Base_SetConfig+0x128>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_Base_SetConfig+0xf8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a10      	ldr	r2, [pc, #64]	; (8005814 <TIM_Base_SetConfig+0x12c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0xf8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <TIM_Base_SetConfig+0x130>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d103      	bne.n	80057e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	615a      	str	r2, [r3, #20]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40010400 	.word	0x40010400
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800

0800581c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 030a 	bic.w	r3, r3, #10
 8005858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0210 	bic.w	r2, r3, #16
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <TIM_ITRx_SetConfig+0x38>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f043 0307 	orr.w	r3, r3, #7
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	609a      	str	r2, [r3, #8]
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	ffcfff8f 	.word	0xffcfff8f

08005918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	431a      	orrs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800596c:	2302      	movs	r3, #2
 800596e:	e06d      	b.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a30      	ldr	r2, [pc, #192]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2f      	ldr	r2, [pc, #188]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d022      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d01d      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d018      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10c      	bne.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40014000 	.word	0x40014000

08005a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e042      	b.n	8005b48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fb fa5f 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2224      	movs	r2, #36	; 0x24
 8005ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8ba 	bl	8005c6c <UART_SetConfig>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e022      	b.n	8005b48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fe16 	bl	800673c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fe9d 	bl	8006880 <UART_CheckIdleState>
 8005b46:	4603      	mov	r3, r0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d17b      	bne.n	8005c62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_Transmit+0x26>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e074      	b.n	8005c64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2221      	movs	r2, #33	; 0x21
 8005b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b8a:	f7fb fd0b 	bl	80015a4 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba8:	d108      	bne.n	8005bbc <HAL_UART_Transmit+0x6c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e003      	b.n	8005bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bc4:	e030      	b.n	8005c28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 feff 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e03d      	b.n	8005c64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3302      	adds	r3, #2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	e007      	b.n	8005c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	3301      	adds	r3, #1
 8005c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1c8      	bne.n	8005bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2140      	movs	r1, #64	; 0x40
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fec8 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e006      	b.n	8005c64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e000      	b.n	8005c64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
  }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c70:	b092      	sub	sp, #72	; 0x48
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4bbe      	ldr	r3, [pc, #760]	; (8005f94 <UART_SetConfig+0x328>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4ab3      	ldr	r2, [pc, #716]	; (8005f98 <UART_SetConfig+0x32c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	4baf      	ldr	r3, [pc, #700]	; (8005f9c <UART_SetConfig+0x330>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f023 010f 	bic.w	r1, r3, #15
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4aa6      	ldr	r2, [pc, #664]	; (8005fa0 <UART_SetConfig+0x334>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d177      	bne.n	8005dfc <UART_SetConfig+0x190>
 8005d0c:	4ba5      	ldr	r3, [pc, #660]	; (8005fa4 <UART_SetConfig+0x338>)
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d14:	2b28      	cmp	r3, #40	; 0x28
 8005d16:	d86d      	bhi.n	8005df4 <UART_SetConfig+0x188>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0xb4>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005dc5 	.word	0x08005dc5
 8005d24:	08005df5 	.word	0x08005df5
 8005d28:	08005df5 	.word	0x08005df5
 8005d2c:	08005df5 	.word	0x08005df5
 8005d30:	08005df5 	.word	0x08005df5
 8005d34:	08005df5 	.word	0x08005df5
 8005d38:	08005df5 	.word	0x08005df5
 8005d3c:	08005df5 	.word	0x08005df5
 8005d40:	08005dcd 	.word	0x08005dcd
 8005d44:	08005df5 	.word	0x08005df5
 8005d48:	08005df5 	.word	0x08005df5
 8005d4c:	08005df5 	.word	0x08005df5
 8005d50:	08005df5 	.word	0x08005df5
 8005d54:	08005df5 	.word	0x08005df5
 8005d58:	08005df5 	.word	0x08005df5
 8005d5c:	08005df5 	.word	0x08005df5
 8005d60:	08005dd5 	.word	0x08005dd5
 8005d64:	08005df5 	.word	0x08005df5
 8005d68:	08005df5 	.word	0x08005df5
 8005d6c:	08005df5 	.word	0x08005df5
 8005d70:	08005df5 	.word	0x08005df5
 8005d74:	08005df5 	.word	0x08005df5
 8005d78:	08005df5 	.word	0x08005df5
 8005d7c:	08005df5 	.word	0x08005df5
 8005d80:	08005ddd 	.word	0x08005ddd
 8005d84:	08005df5 	.word	0x08005df5
 8005d88:	08005df5 	.word	0x08005df5
 8005d8c:	08005df5 	.word	0x08005df5
 8005d90:	08005df5 	.word	0x08005df5
 8005d94:	08005df5 	.word	0x08005df5
 8005d98:	08005df5 	.word	0x08005df5
 8005d9c:	08005df5 	.word	0x08005df5
 8005da0:	08005de5 	.word	0x08005de5
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005df5 	.word	0x08005df5
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005df5 	.word	0x08005df5
 8005db4:	08005df5 	.word	0x08005df5
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005df5 	.word	0x08005df5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e222      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e21e      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e21a      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e216      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e212      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005dec:	2340      	movs	r3, #64	; 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df2:	e20e      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e20a      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a69      	ldr	r2, [pc, #420]	; (8005fa8 <UART_SetConfig+0x33c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d130      	bne.n	8005e68 <UART_SetConfig+0x1fc>
 8005e06:	4b67      	ldr	r3, [pc, #412]	; (8005fa4 <UART_SetConfig+0x338>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d826      	bhi.n	8005e60 <UART_SetConfig+0x1f4>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <UART_SetConfig+0x1ac>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e31 	.word	0x08005e31
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e41 	.word	0x08005e41
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e1ec      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e1e8      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e1e4      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e1e0      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e50:	2320      	movs	r3, #32
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e1dc      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e1d8      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e1d4      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a4f      	ldr	r2, [pc, #316]	; (8005fac <UART_SetConfig+0x340>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d130      	bne.n	8005ed4 <UART_SetConfig+0x268>
 8005e72:	4b4c      	ldr	r3, [pc, #304]	; (8005fa4 <UART_SetConfig+0x338>)
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d826      	bhi.n	8005ecc <UART_SetConfig+0x260>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0x218>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005e9d 	.word	0x08005e9d
 8005e88:	08005ea5 	.word	0x08005ea5
 8005e8c:	08005ead 	.word	0x08005ead
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e1b6      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e1b2      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e1ae      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e1aa      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e1a6      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e1a2      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed2:	e19e      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a35      	ldr	r2, [pc, #212]	; (8005fb0 <UART_SetConfig+0x344>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d130      	bne.n	8005f40 <UART_SetConfig+0x2d4>
 8005ede:	4b31      	ldr	r3, [pc, #196]	; (8005fa4 <UART_SetConfig+0x338>)
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b05      	cmp	r3, #5
 8005ee8:	d826      	bhi.n	8005f38 <UART_SetConfig+0x2cc>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x284>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f09 	.word	0x08005f09
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08005f19 	.word	0x08005f19
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e180      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f10:	2304      	movs	r3, #4
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e17c      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e178      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f20:	2310      	movs	r3, #16
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e174      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f28:	2320      	movs	r3, #32
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e170      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e16c      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e168      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <UART_SetConfig+0x348>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d142      	bne.n	8005fd0 <UART_SetConfig+0x364>
 8005f4a:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <UART_SetConfig+0x338>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d838      	bhi.n	8005fc8 <UART_SetConfig+0x35c>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x2f0>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005f7d 	.word	0x08005f7d
 8005f64:	08005f85 	.word	0x08005f85
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005fb9 	.word	0x08005fb9
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7a:	e14a      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f82:	e146      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f84:	2308      	movs	r3, #8
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8a:	e142      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e13e      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005f94:	cfff69f3 	.word	0xcfff69f3
 8005f98:	58000c00 	.word	0x58000c00
 8005f9c:	11fff4ff 	.word	0x11fff4ff
 8005fa0:	40011000 	.word	0x40011000
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	40004c00 	.word	0x40004c00
 8005fb4:	40005000 	.word	0x40005000
 8005fb8:	2320      	movs	r3, #32
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e128      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e124      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e120      	b.n	8006212 <UART_SetConfig+0x5a6>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4acb      	ldr	r2, [pc, #812]	; (8006304 <UART_SetConfig+0x698>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d176      	bne.n	80060c8 <UART_SetConfig+0x45c>
 8005fda:	4bcb      	ldr	r3, [pc, #812]	; (8006308 <UART_SetConfig+0x69c>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe2:	2b28      	cmp	r3, #40	; 0x28
 8005fe4:	d86c      	bhi.n	80060c0 <UART_SetConfig+0x454>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x380>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006091 	.word	0x08006091
 8005ff0:	080060c1 	.word	0x080060c1
 8005ff4:	080060c1 	.word	0x080060c1
 8005ff8:	080060c1 	.word	0x080060c1
 8005ffc:	080060c1 	.word	0x080060c1
 8006000:	080060c1 	.word	0x080060c1
 8006004:	080060c1 	.word	0x080060c1
 8006008:	080060c1 	.word	0x080060c1
 800600c:	08006099 	.word	0x08006099
 8006010:	080060c1 	.word	0x080060c1
 8006014:	080060c1 	.word	0x080060c1
 8006018:	080060c1 	.word	0x080060c1
 800601c:	080060c1 	.word	0x080060c1
 8006020:	080060c1 	.word	0x080060c1
 8006024:	080060c1 	.word	0x080060c1
 8006028:	080060c1 	.word	0x080060c1
 800602c:	080060a1 	.word	0x080060a1
 8006030:	080060c1 	.word	0x080060c1
 8006034:	080060c1 	.word	0x080060c1
 8006038:	080060c1 	.word	0x080060c1
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060c1 	.word	0x080060c1
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e0bc      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e0b8      	b.n	8006212 <UART_SetConfig+0x5a6>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e0b4      	b.n	8006212 <UART_SetConfig+0x5a6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e0b0      	b.n	8006212 <UART_SetConfig+0x5a6>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e0ac      	b.n	8006212 <UART_SetConfig+0x5a6>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e0a8      	b.n	8006212 <UART_SetConfig+0x5a6>
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e0a4      	b.n	8006212 <UART_SetConfig+0x5a6>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a8f      	ldr	r2, [pc, #572]	; (800630c <UART_SetConfig+0x6a0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d130      	bne.n	8006134 <UART_SetConfig+0x4c8>
 80060d2:	4b8d      	ldr	r3, [pc, #564]	; (8006308 <UART_SetConfig+0x69c>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d826      	bhi.n	800612c <UART_SetConfig+0x4c0>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x478>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006105 	.word	0x08006105
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e086      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e082      	b.n	8006212 <UART_SetConfig+0x5a6>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e07e      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e07a      	b.n	8006212 <UART_SetConfig+0x5a6>
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e076      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e072      	b.n	8006212 <UART_SetConfig+0x5a6>
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e06e      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a75      	ldr	r2, [pc, #468]	; (8006310 <UART_SetConfig+0x6a4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d130      	bne.n	80061a0 <UART_SetConfig+0x534>
 800613e:	4b72      	ldr	r3, [pc, #456]	; (8006308 <UART_SetConfig+0x69c>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b05      	cmp	r3, #5
 8006148:	d826      	bhi.n	8006198 <UART_SetConfig+0x52c>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x4e4>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006169 	.word	0x08006169
 8006154:	08006171 	.word	0x08006171
 8006158:	08006179 	.word	0x08006179
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	2300      	movs	r3, #0
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e050      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e04c      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e048      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e044      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006188:	2320      	movs	r3, #32
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e040      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006190:	2340      	movs	r3, #64	; 0x40
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e03c      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e038      	b.n	8006212 <UART_SetConfig+0x5a6>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5b      	ldr	r2, [pc, #364]	; (8006314 <UART_SetConfig+0x6a8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d130      	bne.n	800620c <UART_SetConfig+0x5a0>
 80061aa:	4b57      	ldr	r3, [pc, #348]	; (8006308 <UART_SetConfig+0x69c>)
 80061ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d826      	bhi.n	8006204 <UART_SetConfig+0x598>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x550>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e01a      	b.n	8006212 <UART_SetConfig+0x5a6>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e016      	b.n	8006212 <UART_SetConfig+0x5a6>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e012      	b.n	8006212 <UART_SetConfig+0x5a6>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e00e      	b.n	8006212 <UART_SetConfig+0x5a6>
 80061f4:	2320      	movs	r3, #32
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e00a      	b.n	8006212 <UART_SetConfig+0x5a6>
 80061fc:	2340      	movs	r3, #64	; 0x40
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e006      	b.n	8006212 <UART_SetConfig+0x5a6>
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e002      	b.n	8006212 <UART_SetConfig+0x5a6>
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3f      	ldr	r2, [pc, #252]	; (8006314 <UART_SetConfig+0x6a8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	f040 80f8 	bne.w	800640e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800621e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006222:	2b20      	cmp	r3, #32
 8006224:	dc46      	bgt.n	80062b4 <UART_SetConfig+0x648>
 8006226:	2b02      	cmp	r3, #2
 8006228:	f2c0 8082 	blt.w	8006330 <UART_SetConfig+0x6c4>
 800622c:	3b02      	subs	r3, #2
 800622e:	2b1e      	cmp	r3, #30
 8006230:	d87e      	bhi.n	8006330 <UART_SetConfig+0x6c4>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0x5cc>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	080062bb 	.word	0x080062bb
 800623c:	08006331 	.word	0x08006331
 8006240:	080062c3 	.word	0x080062c3
 8006244:	08006331 	.word	0x08006331
 8006248:	08006331 	.word	0x08006331
 800624c:	08006331 	.word	0x08006331
 8006250:	080062d3 	.word	0x080062d3
 8006254:	08006331 	.word	0x08006331
 8006258:	08006331 	.word	0x08006331
 800625c:	08006331 	.word	0x08006331
 8006260:	08006331 	.word	0x08006331
 8006264:	08006331 	.word	0x08006331
 8006268:	08006331 	.word	0x08006331
 800626c:	08006331 	.word	0x08006331
 8006270:	080062e3 	.word	0x080062e3
 8006274:	08006331 	.word	0x08006331
 8006278:	08006331 	.word	0x08006331
 800627c:	08006331 	.word	0x08006331
 8006280:	08006331 	.word	0x08006331
 8006284:	08006331 	.word	0x08006331
 8006288:	08006331 	.word	0x08006331
 800628c:	08006331 	.word	0x08006331
 8006290:	08006331 	.word	0x08006331
 8006294:	08006331 	.word	0x08006331
 8006298:	08006331 	.word	0x08006331
 800629c:	08006331 	.word	0x08006331
 80062a0:	08006331 	.word	0x08006331
 80062a4:	08006331 	.word	0x08006331
 80062a8:	08006331 	.word	0x08006331
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006323 	.word	0x08006323
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d037      	beq.n	8006328 <UART_SetConfig+0x6bc>
 80062b8:	e03a      	b.n	8006330 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062ba:	f7fe f83f 	bl	800433c <HAL_RCCEx_GetD3PCLK1Freq>
 80062be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062c0:	e03c      	b.n	800633c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f84e 	bl	8004368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d0:	e034      	b.n	800633c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062d2:	f107 0318 	add.w	r3, r7, #24
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe f99a 	bl	8004610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062e0:	e02c      	b.n	800633c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <UART_SetConfig+0x69c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <UART_SetConfig+0x69c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	4a07      	ldr	r2, [pc, #28]	; (8006318 <UART_SetConfig+0x6ac>)
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006300:	e01c      	b.n	800633c <UART_SetConfig+0x6d0>
 8006302:	bf00      	nop
 8006304:	40011400 	.word	0x40011400
 8006308:	58024400 	.word	0x58024400
 800630c:	40007800 	.word	0x40007800
 8006310:	40007c00 	.word	0x40007c00
 8006314:	58000c00 	.word	0x58000c00
 8006318:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800631c:	4b9d      	ldr	r3, [pc, #628]	; (8006594 <UART_SetConfig+0x928>)
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006320:	e00c      	b.n	800633c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006322:	4b9d      	ldr	r3, [pc, #628]	; (8006598 <UART_SetConfig+0x92c>)
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006326:	e009      	b.n	800633c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800632e:	e005      	b.n	800633c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800633a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 81de 	beq.w	8006700 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	4a94      	ldr	r2, [pc, #592]	; (800659c <UART_SetConfig+0x930>)
 800634a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634e:	461a      	mov	r2, r3
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	fbb3 f3f2 	udiv	r3, r3, r2
 8006356:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	4413      	add	r3, r2
 8006362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006364:	429a      	cmp	r2, r3
 8006366:	d305      	bcc.n	8006374 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800636e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006370:	429a      	cmp	r2, r3
 8006372:	d903      	bls.n	800637c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800637a:	e1c1      	b.n	8006700 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	2200      	movs	r2, #0
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	60fa      	str	r2, [r7, #12]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	4a84      	ldr	r2, [pc, #528]	; (800659c <UART_SetConfig+0x930>)
 800638a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800638e:	b29b      	uxth	r3, r3
 8006390:	2200      	movs	r2, #0
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800639e:	f7f9 fff7 	bl	8000390 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4610      	mov	r0, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	020b      	lsls	r3, r1, #8
 80063b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063b8:	0202      	lsls	r2, r0, #8
 80063ba:	6979      	ldr	r1, [r7, #20]
 80063bc:	6849      	ldr	r1, [r1, #4]
 80063be:	0849      	lsrs	r1, r1, #1
 80063c0:	2000      	movs	r0, #0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4605      	mov	r5, r0
 80063c6:	eb12 0804 	adds.w	r8, r2, r4
 80063ca:	eb43 0905 	adc.w	r9, r3, r5
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	469a      	mov	sl, r3
 80063d6:	4693      	mov	fp, r2
 80063d8:	4652      	mov	r2, sl
 80063da:	465b      	mov	r3, fp
 80063dc:	4640      	mov	r0, r8
 80063de:	4649      	mov	r1, r9
 80063e0:	f7f9 ffd6 	bl	8000390 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4613      	mov	r3, r2
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f2:	d308      	bcc.n	8006406 <UART_SetConfig+0x79a>
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fa:	d204      	bcs.n	8006406 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006402:	60da      	str	r2, [r3, #12]
 8006404:	e17c      	b.n	8006700 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800640c:	e178      	b.n	8006700 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006416:	f040 80c5 	bne.w	80065a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800641a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800641e:	2b20      	cmp	r3, #32
 8006420:	dc48      	bgt.n	80064b4 <UART_SetConfig+0x848>
 8006422:	2b00      	cmp	r3, #0
 8006424:	db7b      	blt.n	800651e <UART_SetConfig+0x8b2>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d879      	bhi.n	800651e <UART_SetConfig+0x8b2>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <UART_SetConfig+0x7c4>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	080064bb 	.word	0x080064bb
 8006434:	080064c3 	.word	0x080064c3
 8006438:	0800651f 	.word	0x0800651f
 800643c:	0800651f 	.word	0x0800651f
 8006440:	080064cb 	.word	0x080064cb
 8006444:	0800651f 	.word	0x0800651f
 8006448:	0800651f 	.word	0x0800651f
 800644c:	0800651f 	.word	0x0800651f
 8006450:	080064db 	.word	0x080064db
 8006454:	0800651f 	.word	0x0800651f
 8006458:	0800651f 	.word	0x0800651f
 800645c:	0800651f 	.word	0x0800651f
 8006460:	0800651f 	.word	0x0800651f
 8006464:	0800651f 	.word	0x0800651f
 8006468:	0800651f 	.word	0x0800651f
 800646c:	0800651f 	.word	0x0800651f
 8006470:	080064eb 	.word	0x080064eb
 8006474:	0800651f 	.word	0x0800651f
 8006478:	0800651f 	.word	0x0800651f
 800647c:	0800651f 	.word	0x0800651f
 8006480:	0800651f 	.word	0x0800651f
 8006484:	0800651f 	.word	0x0800651f
 8006488:	0800651f 	.word	0x0800651f
 800648c:	0800651f 	.word	0x0800651f
 8006490:	0800651f 	.word	0x0800651f
 8006494:	0800651f 	.word	0x0800651f
 8006498:	0800651f 	.word	0x0800651f
 800649c:	0800651f 	.word	0x0800651f
 80064a0:	0800651f 	.word	0x0800651f
 80064a4:	0800651f 	.word	0x0800651f
 80064a8:	0800651f 	.word	0x0800651f
 80064ac:	0800651f 	.word	0x0800651f
 80064b0:	08006511 	.word	0x08006511
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d02e      	beq.n	8006516 <UART_SetConfig+0x8aa>
 80064b8:	e031      	b.n	800651e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ba:	f7fc fd09 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80064be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064c0:	e033      	b.n	800652a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c2:	f7fc fd1b 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 80064c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064c8:	e02f      	b.n	800652a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fd ff4a 	bl	8004368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d8:	e027      	b.n	800652a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064da:	f107 0318 	add.w	r3, r7, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe f896 	bl	8004610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e8:	e01f      	b.n	800652a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ea:	4b2d      	ldr	r3, [pc, #180]	; (80065a0 <UART_SetConfig+0x934>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064f6:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <UART_SetConfig+0x934>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	4a24      	ldr	r2, [pc, #144]	; (8006594 <UART_SetConfig+0x928>)
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006508:	e00f      	b.n	800652a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800650a:	4b22      	ldr	r3, [pc, #136]	; (8006594 <UART_SetConfig+0x928>)
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650e:	e00c      	b.n	800652a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006510:	4b21      	ldr	r3, [pc, #132]	; (8006598 <UART_SetConfig+0x92c>)
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006514:	e009      	b.n	800652a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800651c:	e005      	b.n	800652a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80e7 	beq.w	8006700 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	4a19      	ldr	r2, [pc, #100]	; (800659c <UART_SetConfig+0x930>)
 8006538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800653c:	461a      	mov	r2, r3
 800653e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006540:	fbb3 f3f2 	udiv	r3, r3, r2
 8006544:	005a      	lsls	r2, r3, #1
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	441a      	add	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2b0f      	cmp	r3, #15
 800655c:	d916      	bls.n	800658c <UART_SetConfig+0x920>
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006564:	d212      	bcs.n	800658c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	b29b      	uxth	r3, r3
 800656a:	f023 030f 	bic.w	r3, r3, #15
 800656e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	b29a      	uxth	r2, r3
 800657c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800657e:	4313      	orrs	r3, r2
 8006580:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	e0b9      	b.n	8006700 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006592:	e0b5      	b.n	8006700 <UART_SetConfig+0xa94>
 8006594:	03d09000 	.word	0x03d09000
 8006598:	003d0900 	.word	0x003d0900
 800659c:	08007d6c 	.word	0x08007d6c
 80065a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80065a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	dc49      	bgt.n	8006640 <UART_SetConfig+0x9d4>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	db7c      	blt.n	80066aa <UART_SetConfig+0xa3e>
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d87a      	bhi.n	80066aa <UART_SetConfig+0xa3e>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0x950>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	08006647 	.word	0x08006647
 80065c0:	0800664f 	.word	0x0800664f
 80065c4:	080066ab 	.word	0x080066ab
 80065c8:	080066ab 	.word	0x080066ab
 80065cc:	08006657 	.word	0x08006657
 80065d0:	080066ab 	.word	0x080066ab
 80065d4:	080066ab 	.word	0x080066ab
 80065d8:	080066ab 	.word	0x080066ab
 80065dc:	08006667 	.word	0x08006667
 80065e0:	080066ab 	.word	0x080066ab
 80065e4:	080066ab 	.word	0x080066ab
 80065e8:	080066ab 	.word	0x080066ab
 80065ec:	080066ab 	.word	0x080066ab
 80065f0:	080066ab 	.word	0x080066ab
 80065f4:	080066ab 	.word	0x080066ab
 80065f8:	080066ab 	.word	0x080066ab
 80065fc:	08006677 	.word	0x08006677
 8006600:	080066ab 	.word	0x080066ab
 8006604:	080066ab 	.word	0x080066ab
 8006608:	080066ab 	.word	0x080066ab
 800660c:	080066ab 	.word	0x080066ab
 8006610:	080066ab 	.word	0x080066ab
 8006614:	080066ab 	.word	0x080066ab
 8006618:	080066ab 	.word	0x080066ab
 800661c:	080066ab 	.word	0x080066ab
 8006620:	080066ab 	.word	0x080066ab
 8006624:	080066ab 	.word	0x080066ab
 8006628:	080066ab 	.word	0x080066ab
 800662c:	080066ab 	.word	0x080066ab
 8006630:	080066ab 	.word	0x080066ab
 8006634:	080066ab 	.word	0x080066ab
 8006638:	080066ab 	.word	0x080066ab
 800663c:	0800669d 	.word	0x0800669d
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d02e      	beq.n	80066a2 <UART_SetConfig+0xa36>
 8006644:	e031      	b.n	80066aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7fc fc43 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 800664a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800664c:	e033      	b.n	80066b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664e:	f7fc fc55 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8006652:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006654:	e02f      	b.n	80066b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665a:	4618      	mov	r0, r3
 800665c:	f7fd fe84 	bl	8004368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006664:	e027      	b.n	80066b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006666:	f107 0318 	add.w	r3, r7, #24
 800666a:	4618      	mov	r0, r3
 800666c:	f7fd ffd0 	bl	8004610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006674:	e01f      	b.n	80066b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006676:	4b2d      	ldr	r3, [pc, #180]	; (800672c <UART_SetConfig+0xac0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006682:	4b2a      	ldr	r3, [pc, #168]	; (800672c <UART_SetConfig+0xac0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	08db      	lsrs	r3, r3, #3
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	4a28      	ldr	r2, [pc, #160]	; (8006730 <UART_SetConfig+0xac4>)
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006694:	e00f      	b.n	80066b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006696:	4b26      	ldr	r3, [pc, #152]	; (8006730 <UART_SetConfig+0xac4>)
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669a:	e00c      	b.n	80066b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800669c:	4b25      	ldr	r3, [pc, #148]	; (8006734 <UART_SetConfig+0xac8>)
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a0:	e009      	b.n	80066b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	e005      	b.n	80066b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80066b4:	bf00      	nop
    }

    if (pclk != 0U)
 80066b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d021      	beq.n	8006700 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <UART_SetConfig+0xacc>)
 80066c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c6:	461a      	mov	r2, r3
 80066c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	441a      	add	r2, r3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	2b0f      	cmp	r3, #15
 80066e4:	d909      	bls.n	80066fa <UART_SetConfig+0xa8e>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ec:	d205      	bcs.n	80066fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	e002      	b.n	8006700 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2201      	movs	r2, #1
 8006704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2201      	movs	r2, #1
 800670c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800671c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006720:	4618      	mov	r0, r3
 8006722:	3748      	adds	r7, #72	; 0x48
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672a:	bf00      	nop
 800672c:	58024400 	.word	0x58024400
 8006730:	03d09000 	.word	0x03d09000
 8006734:	003d0900 	.word	0x003d0900
 8006738:	08007d6c 	.word	0x08007d6c

0800673c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01a      	beq.n	8006852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683a:	d10a      	bne.n	8006852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b098      	sub	sp, #96	; 0x60
 8006884:	af02      	add	r7, sp, #8
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006890:	f7fa fe88 	bl	80015a4 <HAL_GetTick>
 8006894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d12f      	bne.n	8006904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f88e 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d022      	beq.n	8006904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
 80068de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e063      	b.n	80069cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d149      	bne.n	80069a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006912:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	2200      	movs	r2, #0
 800691c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f857 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d03c      	beq.n	80069a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	623b      	str	r3, [r7, #32]
   return(result);
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
 800694c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60fb      	str	r3, [r7, #12]
   return(result);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	64bb      	str	r3, [r7, #72]	; 0x48
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697e:	61fa      	str	r2, [r7, #28]
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	617b      	str	r3, [r7, #20]
   return(result);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e012      	b.n	80069cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3758      	adds	r7, #88	; 0x58
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e4:	e049      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d045      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fa fdd9 	bl	80015a4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e048      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d031      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d110      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f839 	bl	8006aa4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2208      	movs	r2, #8
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e029      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a54:	d111      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f81f 	bl	8006aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a6      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b095      	sub	sp, #84	; 0x54
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	643b      	str	r3, [r7, #64]	; 0x40
 8006acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e6      	bne.n	8006aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <UART_EndRxTransfer+0xc8>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d118      	bne.n	8006b4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 0310 	bic.w	r3, r3, #16
 8006b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6979      	ldr	r1, [r7, #20]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	613b      	str	r3, [r7, #16]
   return(result);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e6      	bne.n	8006b1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b60:	bf00      	nop
 8006b62:	3754      	adds	r7, #84	; 0x54
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	effffffe 	.word	0xeffffffe

08006b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e027      	b.n	8006bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2224      	movs	r2, #36	; 0x24
 8006b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e02d      	b.n	8006c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2224      	movs	r2, #36	; 0x24
 8006c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f850 	bl	8006cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e02d      	b.n	8006cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2224      	movs	r2, #36	; 0x24
 8006c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f812 	bl	8006cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d108      	bne.n	8006cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cfc:	e031      	b.n	8006d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cfe:	2310      	movs	r3, #16
 8006d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d02:	2310      	movs	r3, #16
 8006d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	0e5b      	lsrs	r3, r3, #25
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	0f5b      	lsrs	r3, r3, #29
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	7b3a      	ldrb	r2, [r7, #12]
 8006d2a:	4911      	ldr	r1, [pc, #68]	; (8006d70 <UARTEx_SetNbDataToProcess+0x94>)
 8006d2c:	5c8a      	ldrb	r2, [r1, r2]
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d32:	7b3a      	ldrb	r2, [r7, #12]
 8006d34:	490f      	ldr	r1, [pc, #60]	; (8006d74 <UARTEx_SetNbDataToProcess+0x98>)
 8006d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	7b7a      	ldrb	r2, [r7, #13]
 8006d48:	4909      	ldr	r1, [pc, #36]	; (8006d70 <UARTEx_SetNbDataToProcess+0x94>)
 8006d4a:	5c8a      	ldrb	r2, [r1, r2]
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d50:	7b7a      	ldrb	r2, [r7, #13]
 8006d52:	4908      	ldr	r1, [pc, #32]	; (8006d74 <UARTEx_SetNbDataToProcess+0x98>)
 8006d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	08007d84 	.word	0x08007d84
 8006d74:	08007d8c 	.word	0x08007d8c

08006d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d78:	b084      	sub	sp, #16
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	f107 001c 	add.w	r0, r7, #28
 8006d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d120      	bne.n	8006dd2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	4b2a      	ldr	r3, [pc, #168]	; (8006e4c <USB_CoreInit+0xd4>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d105      	bne.n	8006dc6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 faac 	bl	8007324 <USB_CoreReset>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e01a      	b.n	8006e08 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 faa0 	bl	8007324 <USB_CoreReset>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
 8006dfa:	e005      	b.n	8006e08 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d116      	bne.n	8006e3c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <USB_CoreInit+0xd8>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f043 0206 	orr.w	r2, r3, #6
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e48:	b004      	add	sp, #16
 8006e4a:	4770      	bx	lr
 8006e4c:	ffbdffbf 	.word	0xffbdffbf
 8006e50:	03ee0000 	.word	0x03ee0000

08006e54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f023 0201 	bic.w	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d115      	bne.n	8006ec4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f7fa fb89 	bl	80015bc <HAL_Delay>
      ms++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa29 	bl	8007308 <USB_GetMode>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d01e      	beq.n	8006efa <USB_SetCurrentMode+0x84>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b31      	cmp	r3, #49	; 0x31
 8006ec0:	d9f0      	bls.n	8006ea4 <USB_SetCurrentMode+0x2e>
 8006ec2:	e01a      	b.n	8006efa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d115      	bne.n	8006ef6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f7fa fb70 	bl	80015bc <HAL_Delay>
      ms++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa10 	bl	8007308 <USB_GetMode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <USB_SetCurrentMode+0x84>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b31      	cmp	r3, #49	; 0x31
 8006ef2:	d9f0      	bls.n	8006ed6 <USB_SetCurrentMode+0x60>
 8006ef4:	e001      	b.n	8006efa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e005      	b.n	8006f06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b32      	cmp	r3, #50	; 0x32
 8006efe:	d101      	bne.n	8006f04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f10:	b084      	sub	sp, #16
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	e009      	b.n	8006f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3340      	adds	r3, #64	; 0x40
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b0e      	cmp	r3, #14
 8006f48:	d9f2      	bls.n	8006f30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11c      	bne.n	8006f8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f5e:	f043 0302 	orr.w	r3, r3, #2
 8006f62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	e005      	b.n	8006f96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	4619      	mov	r1, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	680b      	ldr	r3, [r1, #0]
 8006fb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d10c      	bne.n	8006fd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f965 	bl	8007294 <USB_SetDevSpeed>
 8006fca:	e008      	b.n	8006fde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fcc:	2101      	movs	r1, #1
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f960 	bl	8007294 <USB_SetDevSpeed>
 8006fd4:	e003      	b.n	8006fde <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f95b 	bl	8007294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fde:	2110      	movs	r1, #16
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8f3 	bl	80071cc <USB_FlushTxFifo>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f91f 	bl	8007234 <USB_FlushRxFifo>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007006:	461a      	mov	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	461a      	mov	r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	e043      	b.n	80070b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007040:	d118      	bne.n	8007074 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	461a      	mov	r2, r3
 8007056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	e013      	b.n	8007086 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	461a      	mov	r2, r3
 800706c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e008      	b.n	8007086 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	461a      	mov	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	461a      	mov	r2, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	461a      	mov	r2, r3
 80070a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	3301      	adds	r3, #1
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3b7      	bcc.n	800702a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ba:	2300      	movs	r3, #0
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	e043      	b.n	8007148 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d6:	d118      	bne.n	800710a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	461a      	mov	r2, r3
 80070ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	e013      	b.n	800711c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	461a      	mov	r2, r3
 8007102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e008      	b.n	800711c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	461a      	mov	r2, r3
 8007118:	2300      	movs	r3, #0
 800711a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	461a      	mov	r2, r3
 800712a:	2300      	movs	r3, #0
 800712c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	461a      	mov	r2, r3
 800713c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	429a      	cmp	r2, r3
 800714e:	d3b7      	bcc.n	80070c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800715e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f043 0210 	orr.w	r2, r3, #16
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <USB_DevInit+0x2b4>)
 800718a:	4313      	orrs	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f043 0208 	orr.w	r2, r3, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <USB_DevInit+0x2b8>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071c0:	b004      	add	sp, #16
 80071c2:	4770      	bx	lr
 80071c4:	803c3800 	.word	0x803c3800
 80071c8:	40000004 	.word	0x40000004

080071cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <USB_FlushTxFifo+0x64>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e01b      	b.n	8007224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	daf2      	bge.n	80071da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	019b      	lsls	r3, r3, #6
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a08      	ldr	r2, [pc, #32]	; (8007230 <USB_FlushTxFifo+0x64>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d901      	bls.n	8007216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e006      	b.n	8007224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b20      	cmp	r3, #32
 8007220:	d0f0      	beq.n	8007204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	00030d40 	.word	0x00030d40

08007234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4a11      	ldr	r2, [pc, #68]	; (8007290 <USB_FlushRxFifo+0x5c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e018      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	daf2      	bge.n	8007240 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2210      	movs	r2, #16
 8007262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a08      	ldr	r2, [pc, #32]	; (8007290 <USB_FlushRxFifo+0x5c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e006      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d0f0      	beq.n	8007264 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	00030d40 	.word	0x00030d40

08007294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b4:	4313      	orrs	r3, r2
 80072b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072e0:	f023 0303 	bic.w	r3, r3, #3
 80072e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f4:	f043 0302 	orr.w	r3, r3, #2
 80072f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0301 	and.w	r3, r3, #1
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <USB_CoreReset+0x64>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e01b      	b.n	800737a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	daf2      	bge.n	8007330 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f043 0201 	orr.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a09      	ldr	r2, [pc, #36]	; (8007388 <USB_CoreReset+0x64>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d901      	bls.n	800736c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e006      	b.n	800737a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b01      	cmp	r3, #1
 8007376:	d0f0      	beq.n	800735a <USB_CoreReset+0x36>

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	00030d40 	.word	0x00030d40

0800738c <_vsniprintf_r>:
 800738c:	b530      	push	{r4, r5, lr}
 800738e:	4614      	mov	r4, r2
 8007390:	2c00      	cmp	r4, #0
 8007392:	b09b      	sub	sp, #108	; 0x6c
 8007394:	4605      	mov	r5, r0
 8007396:	461a      	mov	r2, r3
 8007398:	da05      	bge.n	80073a6 <_vsniprintf_r+0x1a>
 800739a:	238b      	movs	r3, #139	; 0x8b
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	b01b      	add	sp, #108	; 0x6c
 80073a4:	bd30      	pop	{r4, r5, pc}
 80073a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80073aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80073ae:	bf14      	ite	ne
 80073b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073b4:	4623      	moveq	r3, r4
 80073b6:	9302      	str	r3, [sp, #8]
 80073b8:	9305      	str	r3, [sp, #20]
 80073ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073be:	9100      	str	r1, [sp, #0]
 80073c0:	9104      	str	r1, [sp, #16]
 80073c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80073c6:	4669      	mov	r1, sp
 80073c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073ca:	f000 f99f 	bl	800770c <_svfiprintf_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	bfbc      	itt	lt
 80073d2:	238b      	movlt	r3, #139	; 0x8b
 80073d4:	602b      	strlt	r3, [r5, #0]
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	d0e3      	beq.n	80073a2 <_vsniprintf_r+0x16>
 80073da:	9b00      	ldr	r3, [sp, #0]
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	e7df      	b.n	80073a2 <_vsniprintf_r+0x16>
	...

080073e4 <vsniprintf>:
 80073e4:	b507      	push	{r0, r1, r2, lr}
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	460a      	mov	r2, r1
 80073ec:	4601      	mov	r1, r0
 80073ee:	4803      	ldr	r0, [pc, #12]	; (80073fc <vsniprintf+0x18>)
 80073f0:	6800      	ldr	r0, [r0, #0]
 80073f2:	f7ff ffcb 	bl	800738c <_vsniprintf_r>
 80073f6:	b003      	add	sp, #12
 80073f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80073fc:	2400005c 	.word	0x2400005c

08007400 <memset>:
 8007400:	4402      	add	r2, r0
 8007402:	4603      	mov	r3, r0
 8007404:	4293      	cmp	r3, r2
 8007406:	d100      	bne.n	800740a <memset+0xa>
 8007408:	4770      	bx	lr
 800740a:	f803 1b01 	strb.w	r1, [r3], #1
 800740e:	e7f9      	b.n	8007404 <memset+0x4>

08007410 <__errno>:
 8007410:	4b01      	ldr	r3, [pc, #4]	; (8007418 <__errno+0x8>)
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	2400005c 	.word	0x2400005c

0800741c <__libc_init_array>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4d0d      	ldr	r5, [pc, #52]	; (8007454 <__libc_init_array+0x38>)
 8007420:	4c0d      	ldr	r4, [pc, #52]	; (8007458 <__libc_init_array+0x3c>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	2600      	movs	r6, #0
 8007428:	42a6      	cmp	r6, r4
 800742a:	d109      	bne.n	8007440 <__libc_init_array+0x24>
 800742c:	4d0b      	ldr	r5, [pc, #44]	; (800745c <__libc_init_array+0x40>)
 800742e:	4c0c      	ldr	r4, [pc, #48]	; (8007460 <__libc_init_array+0x44>)
 8007430:	f000 fc6a 	bl	8007d08 <_init>
 8007434:	1b64      	subs	r4, r4, r5
 8007436:	10a4      	asrs	r4, r4, #2
 8007438:	2600      	movs	r6, #0
 800743a:	42a6      	cmp	r6, r4
 800743c:	d105      	bne.n	800744a <__libc_init_array+0x2e>
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	f855 3b04 	ldr.w	r3, [r5], #4
 8007444:	4798      	blx	r3
 8007446:	3601      	adds	r6, #1
 8007448:	e7ee      	b.n	8007428 <__libc_init_array+0xc>
 800744a:	f855 3b04 	ldr.w	r3, [r5], #4
 800744e:	4798      	blx	r3
 8007450:	3601      	adds	r6, #1
 8007452:	e7f2      	b.n	800743a <__libc_init_array+0x1e>
 8007454:	08007dd0 	.word	0x08007dd0
 8007458:	08007dd0 	.word	0x08007dd0
 800745c:	08007dd0 	.word	0x08007dd0
 8007460:	08007dd4 	.word	0x08007dd4

08007464 <__retarget_lock_acquire_recursive>:
 8007464:	4770      	bx	lr

08007466 <__retarget_lock_release_recursive>:
 8007466:	4770      	bx	lr

08007468 <_free_r>:
 8007468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800746a:	2900      	cmp	r1, #0
 800746c:	d044      	beq.n	80074f8 <_free_r+0x90>
 800746e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007472:	9001      	str	r0, [sp, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f1a1 0404 	sub.w	r4, r1, #4
 800747a:	bfb8      	it	lt
 800747c:	18e4      	addlt	r4, r4, r3
 800747e:	f000 f8df 	bl	8007640 <__malloc_lock>
 8007482:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <_free_r+0x94>)
 8007484:	9801      	ldr	r0, [sp, #4]
 8007486:	6813      	ldr	r3, [r2, #0]
 8007488:	b933      	cbnz	r3, 8007498 <_free_r+0x30>
 800748a:	6063      	str	r3, [r4, #4]
 800748c:	6014      	str	r4, [r2, #0]
 800748e:	b003      	add	sp, #12
 8007490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007494:	f000 b8da 	b.w	800764c <__malloc_unlock>
 8007498:	42a3      	cmp	r3, r4
 800749a:	d908      	bls.n	80074ae <_free_r+0x46>
 800749c:	6825      	ldr	r5, [r4, #0]
 800749e:	1961      	adds	r1, r4, r5
 80074a0:	428b      	cmp	r3, r1
 80074a2:	bf01      	itttt	eq
 80074a4:	6819      	ldreq	r1, [r3, #0]
 80074a6:	685b      	ldreq	r3, [r3, #4]
 80074a8:	1949      	addeq	r1, r1, r5
 80074aa:	6021      	streq	r1, [r4, #0]
 80074ac:	e7ed      	b.n	800748a <_free_r+0x22>
 80074ae:	461a      	mov	r2, r3
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	b10b      	cbz	r3, 80074b8 <_free_r+0x50>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d9fa      	bls.n	80074ae <_free_r+0x46>
 80074b8:	6811      	ldr	r1, [r2, #0]
 80074ba:	1855      	adds	r5, r2, r1
 80074bc:	42a5      	cmp	r5, r4
 80074be:	d10b      	bne.n	80074d8 <_free_r+0x70>
 80074c0:	6824      	ldr	r4, [r4, #0]
 80074c2:	4421      	add	r1, r4
 80074c4:	1854      	adds	r4, r2, r1
 80074c6:	42a3      	cmp	r3, r4
 80074c8:	6011      	str	r1, [r2, #0]
 80074ca:	d1e0      	bne.n	800748e <_free_r+0x26>
 80074cc:	681c      	ldr	r4, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	6053      	str	r3, [r2, #4]
 80074d2:	440c      	add	r4, r1
 80074d4:	6014      	str	r4, [r2, #0]
 80074d6:	e7da      	b.n	800748e <_free_r+0x26>
 80074d8:	d902      	bls.n	80074e0 <_free_r+0x78>
 80074da:	230c      	movs	r3, #12
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	e7d6      	b.n	800748e <_free_r+0x26>
 80074e0:	6825      	ldr	r5, [r4, #0]
 80074e2:	1961      	adds	r1, r4, r5
 80074e4:	428b      	cmp	r3, r1
 80074e6:	bf04      	itt	eq
 80074e8:	6819      	ldreq	r1, [r3, #0]
 80074ea:	685b      	ldreq	r3, [r3, #4]
 80074ec:	6063      	str	r3, [r4, #4]
 80074ee:	bf04      	itt	eq
 80074f0:	1949      	addeq	r1, r1, r5
 80074f2:	6021      	streq	r1, [r4, #0]
 80074f4:	6054      	str	r4, [r2, #4]
 80074f6:	e7ca      	b.n	800748e <_free_r+0x26>
 80074f8:	b003      	add	sp, #12
 80074fa:	bd30      	pop	{r4, r5, pc}
 80074fc:	24000994 	.word	0x24000994

08007500 <sbrk_aligned>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4e0e      	ldr	r6, [pc, #56]	; (800753c <sbrk_aligned+0x3c>)
 8007504:	460c      	mov	r4, r1
 8007506:	6831      	ldr	r1, [r6, #0]
 8007508:	4605      	mov	r5, r0
 800750a:	b911      	cbnz	r1, 8007512 <sbrk_aligned+0x12>
 800750c:	f000 fba6 	bl	8007c5c <_sbrk_r>
 8007510:	6030      	str	r0, [r6, #0]
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f000 fba1 	bl	8007c5c <_sbrk_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d00a      	beq.n	8007534 <sbrk_aligned+0x34>
 800751e:	1cc4      	adds	r4, r0, #3
 8007520:	f024 0403 	bic.w	r4, r4, #3
 8007524:	42a0      	cmp	r0, r4
 8007526:	d007      	beq.n	8007538 <sbrk_aligned+0x38>
 8007528:	1a21      	subs	r1, r4, r0
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fb96 	bl	8007c5c <_sbrk_r>
 8007530:	3001      	adds	r0, #1
 8007532:	d101      	bne.n	8007538 <sbrk_aligned+0x38>
 8007534:	f04f 34ff 	mov.w	r4, #4294967295
 8007538:	4620      	mov	r0, r4
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	24000998 	.word	0x24000998

08007540 <_malloc_r>:
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007544:	1ccd      	adds	r5, r1, #3
 8007546:	f025 0503 	bic.w	r5, r5, #3
 800754a:	3508      	adds	r5, #8
 800754c:	2d0c      	cmp	r5, #12
 800754e:	bf38      	it	cc
 8007550:	250c      	movcc	r5, #12
 8007552:	2d00      	cmp	r5, #0
 8007554:	4607      	mov	r7, r0
 8007556:	db01      	blt.n	800755c <_malloc_r+0x1c>
 8007558:	42a9      	cmp	r1, r5
 800755a:	d905      	bls.n	8007568 <_malloc_r+0x28>
 800755c:	230c      	movs	r3, #12
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	2600      	movs	r6, #0
 8007562:	4630      	mov	r0, r6
 8007564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007568:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800763c <_malloc_r+0xfc>
 800756c:	f000 f868 	bl	8007640 <__malloc_lock>
 8007570:	f8d8 3000 	ldr.w	r3, [r8]
 8007574:	461c      	mov	r4, r3
 8007576:	bb5c      	cbnz	r4, 80075d0 <_malloc_r+0x90>
 8007578:	4629      	mov	r1, r5
 800757a:	4638      	mov	r0, r7
 800757c:	f7ff ffc0 	bl	8007500 <sbrk_aligned>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	4604      	mov	r4, r0
 8007584:	d155      	bne.n	8007632 <_malloc_r+0xf2>
 8007586:	f8d8 4000 	ldr.w	r4, [r8]
 800758a:	4626      	mov	r6, r4
 800758c:	2e00      	cmp	r6, #0
 800758e:	d145      	bne.n	800761c <_malloc_r+0xdc>
 8007590:	2c00      	cmp	r4, #0
 8007592:	d048      	beq.n	8007626 <_malloc_r+0xe6>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	4631      	mov	r1, r6
 8007598:	4638      	mov	r0, r7
 800759a:	eb04 0903 	add.w	r9, r4, r3
 800759e:	f000 fb5d 	bl	8007c5c <_sbrk_r>
 80075a2:	4581      	cmp	r9, r0
 80075a4:	d13f      	bne.n	8007626 <_malloc_r+0xe6>
 80075a6:	6821      	ldr	r1, [r4, #0]
 80075a8:	1a6d      	subs	r5, r5, r1
 80075aa:	4629      	mov	r1, r5
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff ffa7 	bl	8007500 <sbrk_aligned>
 80075b2:	3001      	adds	r0, #1
 80075b4:	d037      	beq.n	8007626 <_malloc_r+0xe6>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	442b      	add	r3, r5
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	f8d8 3000 	ldr.w	r3, [r8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d038      	beq.n	8007636 <_malloc_r+0xf6>
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	42a2      	cmp	r2, r4
 80075c8:	d12b      	bne.n	8007622 <_malloc_r+0xe2>
 80075ca:	2200      	movs	r2, #0
 80075cc:	605a      	str	r2, [r3, #4]
 80075ce:	e00f      	b.n	80075f0 <_malloc_r+0xb0>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	1b52      	subs	r2, r2, r5
 80075d4:	d41f      	bmi.n	8007616 <_malloc_r+0xd6>
 80075d6:	2a0b      	cmp	r2, #11
 80075d8:	d917      	bls.n	800760a <_malloc_r+0xca>
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	42a3      	cmp	r3, r4
 80075de:	6025      	str	r5, [r4, #0]
 80075e0:	bf18      	it	ne
 80075e2:	6059      	strne	r1, [r3, #4]
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	bf08      	it	eq
 80075e8:	f8c8 1000 	streq.w	r1, [r8]
 80075ec:	5162      	str	r2, [r4, r5]
 80075ee:	604b      	str	r3, [r1, #4]
 80075f0:	4638      	mov	r0, r7
 80075f2:	f104 060b 	add.w	r6, r4, #11
 80075f6:	f000 f829 	bl	800764c <__malloc_unlock>
 80075fa:	f026 0607 	bic.w	r6, r6, #7
 80075fe:	1d23      	adds	r3, r4, #4
 8007600:	1af2      	subs	r2, r6, r3
 8007602:	d0ae      	beq.n	8007562 <_malloc_r+0x22>
 8007604:	1b9b      	subs	r3, r3, r6
 8007606:	50a3      	str	r3, [r4, r2]
 8007608:	e7ab      	b.n	8007562 <_malloc_r+0x22>
 800760a:	42a3      	cmp	r3, r4
 800760c:	6862      	ldr	r2, [r4, #4]
 800760e:	d1dd      	bne.n	80075cc <_malloc_r+0x8c>
 8007610:	f8c8 2000 	str.w	r2, [r8]
 8007614:	e7ec      	b.n	80075f0 <_malloc_r+0xb0>
 8007616:	4623      	mov	r3, r4
 8007618:	6864      	ldr	r4, [r4, #4]
 800761a:	e7ac      	b.n	8007576 <_malloc_r+0x36>
 800761c:	4634      	mov	r4, r6
 800761e:	6876      	ldr	r6, [r6, #4]
 8007620:	e7b4      	b.n	800758c <_malloc_r+0x4c>
 8007622:	4613      	mov	r3, r2
 8007624:	e7cc      	b.n	80075c0 <_malloc_r+0x80>
 8007626:	230c      	movs	r3, #12
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	4638      	mov	r0, r7
 800762c:	f000 f80e 	bl	800764c <__malloc_unlock>
 8007630:	e797      	b.n	8007562 <_malloc_r+0x22>
 8007632:	6025      	str	r5, [r4, #0]
 8007634:	e7dc      	b.n	80075f0 <_malloc_r+0xb0>
 8007636:	605b      	str	r3, [r3, #4]
 8007638:	deff      	udf	#255	; 0xff
 800763a:	bf00      	nop
 800763c:	24000994 	.word	0x24000994

08007640 <__malloc_lock>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__malloc_lock+0x8>)
 8007642:	f7ff bf0f 	b.w	8007464 <__retarget_lock_acquire_recursive>
 8007646:	bf00      	nop
 8007648:	24000990 	.word	0x24000990

0800764c <__malloc_unlock>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__malloc_unlock+0x8>)
 800764e:	f7ff bf0a 	b.w	8007466 <__retarget_lock_release_recursive>
 8007652:	bf00      	nop
 8007654:	24000990 	.word	0x24000990

08007658 <__ssputs_r>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	688e      	ldr	r6, [r1, #8]
 800765e:	461f      	mov	r7, r3
 8007660:	42be      	cmp	r6, r7
 8007662:	680b      	ldr	r3, [r1, #0]
 8007664:	4682      	mov	sl, r0
 8007666:	460c      	mov	r4, r1
 8007668:	4690      	mov	r8, r2
 800766a:	d82c      	bhi.n	80076c6 <__ssputs_r+0x6e>
 800766c:	898a      	ldrh	r2, [r1, #12]
 800766e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007672:	d026      	beq.n	80076c2 <__ssputs_r+0x6a>
 8007674:	6965      	ldr	r5, [r4, #20]
 8007676:	6909      	ldr	r1, [r1, #16]
 8007678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800767c:	eba3 0901 	sub.w	r9, r3, r1
 8007680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007684:	1c7b      	adds	r3, r7, #1
 8007686:	444b      	add	r3, r9
 8007688:	106d      	asrs	r5, r5, #1
 800768a:	429d      	cmp	r5, r3
 800768c:	bf38      	it	cc
 800768e:	461d      	movcc	r5, r3
 8007690:	0553      	lsls	r3, r2, #21
 8007692:	d527      	bpl.n	80076e4 <__ssputs_r+0x8c>
 8007694:	4629      	mov	r1, r5
 8007696:	f7ff ff53 	bl	8007540 <_malloc_r>
 800769a:	4606      	mov	r6, r0
 800769c:	b360      	cbz	r0, 80076f8 <__ssputs_r+0xa0>
 800769e:	6921      	ldr	r1, [r4, #16]
 80076a0:	464a      	mov	r2, r9
 80076a2:	f000 faeb 	bl	8007c7c <memcpy>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	6126      	str	r6, [r4, #16]
 80076b4:	6165      	str	r5, [r4, #20]
 80076b6:	444e      	add	r6, r9
 80076b8:	eba5 0509 	sub.w	r5, r5, r9
 80076bc:	6026      	str	r6, [r4, #0]
 80076be:	60a5      	str	r5, [r4, #8]
 80076c0:	463e      	mov	r6, r7
 80076c2:	42be      	cmp	r6, r7
 80076c4:	d900      	bls.n	80076c8 <__ssputs_r+0x70>
 80076c6:	463e      	mov	r6, r7
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	4632      	mov	r2, r6
 80076cc:	4641      	mov	r1, r8
 80076ce:	f000 faab 	bl	8007c28 <memmove>
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	1b9b      	subs	r3, r3, r6
 80076d6:	60a3      	str	r3, [r4, #8]
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	4433      	add	r3, r6
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	2000      	movs	r0, #0
 80076e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e4:	462a      	mov	r2, r5
 80076e6:	f000 fad7 	bl	8007c98 <_realloc_r>
 80076ea:	4606      	mov	r6, r0
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1e0      	bne.n	80076b2 <__ssputs_r+0x5a>
 80076f0:	6921      	ldr	r1, [r4, #16]
 80076f2:	4650      	mov	r0, sl
 80076f4:	f7ff feb8 	bl	8007468 <_free_r>
 80076f8:	230c      	movs	r3, #12
 80076fa:	f8ca 3000 	str.w	r3, [sl]
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	e7e9      	b.n	80076e0 <__ssputs_r+0x88>

0800770c <_svfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	4698      	mov	r8, r3
 8007712:	898b      	ldrh	r3, [r1, #12]
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	b09d      	sub	sp, #116	; 0x74
 8007718:	4607      	mov	r7, r0
 800771a:	460d      	mov	r5, r1
 800771c:	4614      	mov	r4, r2
 800771e:	d50e      	bpl.n	800773e <_svfiprintf_r+0x32>
 8007720:	690b      	ldr	r3, [r1, #16]
 8007722:	b963      	cbnz	r3, 800773e <_svfiprintf_r+0x32>
 8007724:	2140      	movs	r1, #64	; 0x40
 8007726:	f7ff ff0b 	bl	8007540 <_malloc_r>
 800772a:	6028      	str	r0, [r5, #0]
 800772c:	6128      	str	r0, [r5, #16]
 800772e:	b920      	cbnz	r0, 800773a <_svfiprintf_r+0x2e>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	e0d0      	b.n	80078dc <_svfiprintf_r+0x1d0>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	616b      	str	r3, [r5, #20]
 800773e:	2300      	movs	r3, #0
 8007740:	9309      	str	r3, [sp, #36]	; 0x24
 8007742:	2320      	movs	r3, #32
 8007744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007748:	f8cd 800c 	str.w	r8, [sp, #12]
 800774c:	2330      	movs	r3, #48	; 0x30
 800774e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078f4 <_svfiprintf_r+0x1e8>
 8007752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007756:	f04f 0901 	mov.w	r9, #1
 800775a:	4623      	mov	r3, r4
 800775c:	469a      	mov	sl, r3
 800775e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007762:	b10a      	cbz	r2, 8007768 <_svfiprintf_r+0x5c>
 8007764:	2a25      	cmp	r2, #37	; 0x25
 8007766:	d1f9      	bne.n	800775c <_svfiprintf_r+0x50>
 8007768:	ebba 0b04 	subs.w	fp, sl, r4
 800776c:	d00b      	beq.n	8007786 <_svfiprintf_r+0x7a>
 800776e:	465b      	mov	r3, fp
 8007770:	4622      	mov	r2, r4
 8007772:	4629      	mov	r1, r5
 8007774:	4638      	mov	r0, r7
 8007776:	f7ff ff6f 	bl	8007658 <__ssputs_r>
 800777a:	3001      	adds	r0, #1
 800777c:	f000 80a9 	beq.w	80078d2 <_svfiprintf_r+0x1c6>
 8007780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007782:	445a      	add	r2, fp
 8007784:	9209      	str	r2, [sp, #36]	; 0x24
 8007786:	f89a 3000 	ldrb.w	r3, [sl]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80a1 	beq.w	80078d2 <_svfiprintf_r+0x1c6>
 8007790:	2300      	movs	r3, #0
 8007792:	f04f 32ff 	mov.w	r2, #4294967295
 8007796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800779a:	f10a 0a01 	add.w	sl, sl, #1
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a6:	931a      	str	r3, [sp, #104]	; 0x68
 80077a8:	4654      	mov	r4, sl
 80077aa:	2205      	movs	r2, #5
 80077ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b0:	4850      	ldr	r0, [pc, #320]	; (80078f4 <_svfiprintf_r+0x1e8>)
 80077b2:	f7f8 fd9d 	bl	80002f0 <memchr>
 80077b6:	9a04      	ldr	r2, [sp, #16]
 80077b8:	b9d8      	cbnz	r0, 80077f2 <_svfiprintf_r+0xe6>
 80077ba:	06d0      	lsls	r0, r2, #27
 80077bc:	bf44      	itt	mi
 80077be:	2320      	movmi	r3, #32
 80077c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c4:	0711      	lsls	r1, r2, #28
 80077c6:	bf44      	itt	mi
 80077c8:	232b      	movmi	r3, #43	; 0x2b
 80077ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ce:	f89a 3000 	ldrb.w	r3, [sl]
 80077d2:	2b2a      	cmp	r3, #42	; 0x2a
 80077d4:	d015      	beq.n	8007802 <_svfiprintf_r+0xf6>
 80077d6:	9a07      	ldr	r2, [sp, #28]
 80077d8:	4654      	mov	r4, sl
 80077da:	2000      	movs	r0, #0
 80077dc:	f04f 0c0a 	mov.w	ip, #10
 80077e0:	4621      	mov	r1, r4
 80077e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e6:	3b30      	subs	r3, #48	; 0x30
 80077e8:	2b09      	cmp	r3, #9
 80077ea:	d94d      	bls.n	8007888 <_svfiprintf_r+0x17c>
 80077ec:	b1b0      	cbz	r0, 800781c <_svfiprintf_r+0x110>
 80077ee:	9207      	str	r2, [sp, #28]
 80077f0:	e014      	b.n	800781c <_svfiprintf_r+0x110>
 80077f2:	eba0 0308 	sub.w	r3, r0, r8
 80077f6:	fa09 f303 	lsl.w	r3, r9, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	46a2      	mov	sl, r4
 8007800:	e7d2      	b.n	80077a8 <_svfiprintf_r+0x9c>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	1d19      	adds	r1, r3, #4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	9103      	str	r1, [sp, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	bfbb      	ittet	lt
 800780e:	425b      	neglt	r3, r3
 8007810:	f042 0202 	orrlt.w	r2, r2, #2
 8007814:	9307      	strge	r3, [sp, #28]
 8007816:	9307      	strlt	r3, [sp, #28]
 8007818:	bfb8      	it	lt
 800781a:	9204      	strlt	r2, [sp, #16]
 800781c:	7823      	ldrb	r3, [r4, #0]
 800781e:	2b2e      	cmp	r3, #46	; 0x2e
 8007820:	d10c      	bne.n	800783c <_svfiprintf_r+0x130>
 8007822:	7863      	ldrb	r3, [r4, #1]
 8007824:	2b2a      	cmp	r3, #42	; 0x2a
 8007826:	d134      	bne.n	8007892 <_svfiprintf_r+0x186>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	9203      	str	r2, [sp, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	bfb8      	it	lt
 8007834:	f04f 33ff 	movlt.w	r3, #4294967295
 8007838:	3402      	adds	r4, #2
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007904 <_svfiprintf_r+0x1f8>
 8007840:	7821      	ldrb	r1, [r4, #0]
 8007842:	2203      	movs	r2, #3
 8007844:	4650      	mov	r0, sl
 8007846:	f7f8 fd53 	bl	80002f0 <memchr>
 800784a:	b138      	cbz	r0, 800785c <_svfiprintf_r+0x150>
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	eba0 000a 	sub.w	r0, r0, sl
 8007852:	2240      	movs	r2, #64	; 0x40
 8007854:	4082      	lsls	r2, r0
 8007856:	4313      	orrs	r3, r2
 8007858:	3401      	adds	r4, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007860:	4825      	ldr	r0, [pc, #148]	; (80078f8 <_svfiprintf_r+0x1ec>)
 8007862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007866:	2206      	movs	r2, #6
 8007868:	f7f8 fd42 	bl	80002f0 <memchr>
 800786c:	2800      	cmp	r0, #0
 800786e:	d038      	beq.n	80078e2 <_svfiprintf_r+0x1d6>
 8007870:	4b22      	ldr	r3, [pc, #136]	; (80078fc <_svfiprintf_r+0x1f0>)
 8007872:	bb1b      	cbnz	r3, 80078bc <_svfiprintf_r+0x1b0>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	3307      	adds	r3, #7
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	3308      	adds	r3, #8
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007882:	4433      	add	r3, r6
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
 8007886:	e768      	b.n	800775a <_svfiprintf_r+0x4e>
 8007888:	fb0c 3202 	mla	r2, ip, r2, r3
 800788c:	460c      	mov	r4, r1
 800788e:	2001      	movs	r0, #1
 8007890:	e7a6      	b.n	80077e0 <_svfiprintf_r+0xd4>
 8007892:	2300      	movs	r3, #0
 8007894:	3401      	adds	r4, #1
 8007896:	9305      	str	r3, [sp, #20]
 8007898:	4619      	mov	r1, r3
 800789a:	f04f 0c0a 	mov.w	ip, #10
 800789e:	4620      	mov	r0, r4
 80078a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a4:	3a30      	subs	r2, #48	; 0x30
 80078a6:	2a09      	cmp	r2, #9
 80078a8:	d903      	bls.n	80078b2 <_svfiprintf_r+0x1a6>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c6      	beq.n	800783c <_svfiprintf_r+0x130>
 80078ae:	9105      	str	r1, [sp, #20]
 80078b0:	e7c4      	b.n	800783c <_svfiprintf_r+0x130>
 80078b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078b6:	4604      	mov	r4, r0
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7f0      	b.n	800789e <_svfiprintf_r+0x192>
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <_svfiprintf_r+0x1f4>)
 80078c4:	a904      	add	r1, sp, #16
 80078c6:	4638      	mov	r0, r7
 80078c8:	f3af 8000 	nop.w
 80078cc:	1c42      	adds	r2, r0, #1
 80078ce:	4606      	mov	r6, r0
 80078d0:	d1d6      	bne.n	8007880 <_svfiprintf_r+0x174>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	065b      	lsls	r3, r3, #25
 80078d6:	f53f af2d 	bmi.w	8007734 <_svfiprintf_r+0x28>
 80078da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078dc:	b01d      	add	sp, #116	; 0x74
 80078de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e2:	ab03      	add	r3, sp, #12
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	462a      	mov	r2, r5
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <_svfiprintf_r+0x1f4>)
 80078ea:	a904      	add	r1, sp, #16
 80078ec:	4638      	mov	r0, r7
 80078ee:	f000 f879 	bl	80079e4 <_printf_i>
 80078f2:	e7eb      	b.n	80078cc <_svfiprintf_r+0x1c0>
 80078f4:	08007d94 	.word	0x08007d94
 80078f8:	08007d9e 	.word	0x08007d9e
 80078fc:	00000000 	.word	0x00000000
 8007900:	08007659 	.word	0x08007659
 8007904:	08007d9a 	.word	0x08007d9a

08007908 <_printf_common>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	4616      	mov	r6, r2
 800790e:	4699      	mov	r9, r3
 8007910:	688a      	ldr	r2, [r1, #8]
 8007912:	690b      	ldr	r3, [r1, #16]
 8007914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007918:	4293      	cmp	r3, r2
 800791a:	bfb8      	it	lt
 800791c:	4613      	movlt	r3, r2
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007924:	4607      	mov	r7, r0
 8007926:	460c      	mov	r4, r1
 8007928:	b10a      	cbz	r2, 800792e <_printf_common+0x26>
 800792a:	3301      	adds	r3, #1
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	0699      	lsls	r1, r3, #26
 8007932:	bf42      	ittt	mi
 8007934:	6833      	ldrmi	r3, [r6, #0]
 8007936:	3302      	addmi	r3, #2
 8007938:	6033      	strmi	r3, [r6, #0]
 800793a:	6825      	ldr	r5, [r4, #0]
 800793c:	f015 0506 	ands.w	r5, r5, #6
 8007940:	d106      	bne.n	8007950 <_printf_common+0x48>
 8007942:	f104 0a19 	add.w	sl, r4, #25
 8007946:	68e3      	ldr	r3, [r4, #12]
 8007948:	6832      	ldr	r2, [r6, #0]
 800794a:	1a9b      	subs	r3, r3, r2
 800794c:	42ab      	cmp	r3, r5
 800794e:	dc26      	bgt.n	800799e <_printf_common+0x96>
 8007950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007954:	1e13      	subs	r3, r2, #0
 8007956:	6822      	ldr	r2, [r4, #0]
 8007958:	bf18      	it	ne
 800795a:	2301      	movne	r3, #1
 800795c:	0692      	lsls	r2, r2, #26
 800795e:	d42b      	bmi.n	80079b8 <_printf_common+0xb0>
 8007960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007964:	4649      	mov	r1, r9
 8007966:	4638      	mov	r0, r7
 8007968:	47c0      	blx	r8
 800796a:	3001      	adds	r0, #1
 800796c:	d01e      	beq.n	80079ac <_printf_common+0xa4>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	f003 0306 	and.w	r3, r3, #6
 8007976:	2b04      	cmp	r3, #4
 8007978:	bf02      	ittt	eq
 800797a:	68e5      	ldreq	r5, [r4, #12]
 800797c:	6833      	ldreq	r3, [r6, #0]
 800797e:	1aed      	subeq	r5, r5, r3
 8007980:	68a3      	ldr	r3, [r4, #8]
 8007982:	bf0c      	ite	eq
 8007984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007988:	2500      	movne	r5, #0
 800798a:	4293      	cmp	r3, r2
 800798c:	bfc4      	itt	gt
 800798e:	1a9b      	subgt	r3, r3, r2
 8007990:	18ed      	addgt	r5, r5, r3
 8007992:	2600      	movs	r6, #0
 8007994:	341a      	adds	r4, #26
 8007996:	42b5      	cmp	r5, r6
 8007998:	d11a      	bne.n	80079d0 <_printf_common+0xc8>
 800799a:	2000      	movs	r0, #0
 800799c:	e008      	b.n	80079b0 <_printf_common+0xa8>
 800799e:	2301      	movs	r3, #1
 80079a0:	4652      	mov	r2, sl
 80079a2:	4649      	mov	r1, r9
 80079a4:	4638      	mov	r0, r7
 80079a6:	47c0      	blx	r8
 80079a8:	3001      	adds	r0, #1
 80079aa:	d103      	bne.n	80079b4 <_printf_common+0xac>
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	3501      	adds	r5, #1
 80079b6:	e7c6      	b.n	8007946 <_printf_common+0x3e>
 80079b8:	18e1      	adds	r1, r4, r3
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	2030      	movs	r0, #48	; 0x30
 80079be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079c2:	4422      	add	r2, r4
 80079c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079cc:	3302      	adds	r3, #2
 80079ce:	e7c7      	b.n	8007960 <_printf_common+0x58>
 80079d0:	2301      	movs	r3, #1
 80079d2:	4622      	mov	r2, r4
 80079d4:	4649      	mov	r1, r9
 80079d6:	4638      	mov	r0, r7
 80079d8:	47c0      	blx	r8
 80079da:	3001      	adds	r0, #1
 80079dc:	d0e6      	beq.n	80079ac <_printf_common+0xa4>
 80079de:	3601      	adds	r6, #1
 80079e0:	e7d9      	b.n	8007996 <_printf_common+0x8e>
	...

080079e4 <_printf_i>:
 80079e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	7e0f      	ldrb	r7, [r1, #24]
 80079ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079ec:	2f78      	cmp	r7, #120	; 0x78
 80079ee:	4691      	mov	r9, r2
 80079f0:	4680      	mov	r8, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	469a      	mov	sl, r3
 80079f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079fa:	d807      	bhi.n	8007a0c <_printf_i+0x28>
 80079fc:	2f62      	cmp	r7, #98	; 0x62
 80079fe:	d80a      	bhi.n	8007a16 <_printf_i+0x32>
 8007a00:	2f00      	cmp	r7, #0
 8007a02:	f000 80d4 	beq.w	8007bae <_printf_i+0x1ca>
 8007a06:	2f58      	cmp	r7, #88	; 0x58
 8007a08:	f000 80c0 	beq.w	8007b8c <_printf_i+0x1a8>
 8007a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a14:	e03a      	b.n	8007a8c <_printf_i+0xa8>
 8007a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a1a:	2b15      	cmp	r3, #21
 8007a1c:	d8f6      	bhi.n	8007a0c <_printf_i+0x28>
 8007a1e:	a101      	add	r1, pc, #4	; (adr r1, 8007a24 <_printf_i+0x40>)
 8007a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a24:	08007a7d 	.word	0x08007a7d
 8007a28:	08007a91 	.word	0x08007a91
 8007a2c:	08007a0d 	.word	0x08007a0d
 8007a30:	08007a0d 	.word	0x08007a0d
 8007a34:	08007a0d 	.word	0x08007a0d
 8007a38:	08007a0d 	.word	0x08007a0d
 8007a3c:	08007a91 	.word	0x08007a91
 8007a40:	08007a0d 	.word	0x08007a0d
 8007a44:	08007a0d 	.word	0x08007a0d
 8007a48:	08007a0d 	.word	0x08007a0d
 8007a4c:	08007a0d 	.word	0x08007a0d
 8007a50:	08007b95 	.word	0x08007b95
 8007a54:	08007abd 	.word	0x08007abd
 8007a58:	08007b4f 	.word	0x08007b4f
 8007a5c:	08007a0d 	.word	0x08007a0d
 8007a60:	08007a0d 	.word	0x08007a0d
 8007a64:	08007bb7 	.word	0x08007bb7
 8007a68:	08007a0d 	.word	0x08007a0d
 8007a6c:	08007abd 	.word	0x08007abd
 8007a70:	08007a0d 	.word	0x08007a0d
 8007a74:	08007a0d 	.word	0x08007a0d
 8007a78:	08007b57 	.word	0x08007b57
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	602a      	str	r2, [r5, #0]
 8007a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e09f      	b.n	8007bd0 <_printf_i+0x1ec>
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	0607      	lsls	r7, r0, #24
 8007a96:	f103 0104 	add.w	r1, r3, #4
 8007a9a:	6029      	str	r1, [r5, #0]
 8007a9c:	d501      	bpl.n	8007aa2 <_printf_i+0xbe>
 8007a9e:	681e      	ldr	r6, [r3, #0]
 8007aa0:	e003      	b.n	8007aaa <_printf_i+0xc6>
 8007aa2:	0646      	lsls	r6, r0, #25
 8007aa4:	d5fb      	bpl.n	8007a9e <_printf_i+0xba>
 8007aa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	da03      	bge.n	8007ab6 <_printf_i+0xd2>
 8007aae:	232d      	movs	r3, #45	; 0x2d
 8007ab0:	4276      	negs	r6, r6
 8007ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab6:	485a      	ldr	r0, [pc, #360]	; (8007c20 <_printf_i+0x23c>)
 8007ab8:	230a      	movs	r3, #10
 8007aba:	e012      	b.n	8007ae2 <_printf_i+0xfe>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	6820      	ldr	r0, [r4, #0]
 8007ac0:	1d19      	adds	r1, r3, #4
 8007ac2:	6029      	str	r1, [r5, #0]
 8007ac4:	0605      	lsls	r5, r0, #24
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0xe8>
 8007ac8:	681e      	ldr	r6, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0xee>
 8007acc:	0641      	lsls	r1, r0, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0xe4>
 8007ad0:	881e      	ldrh	r6, [r3, #0]
 8007ad2:	4853      	ldr	r0, [pc, #332]	; (8007c20 <_printf_i+0x23c>)
 8007ad4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2308      	moveq	r3, #8
 8007ada:	230a      	movne	r3, #10
 8007adc:	2100      	movs	r1, #0
 8007ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ae2:	6865      	ldr	r5, [r4, #4]
 8007ae4:	60a5      	str	r5, [r4, #8]
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	bfa2      	ittt	ge
 8007aea:	6821      	ldrge	r1, [r4, #0]
 8007aec:	f021 0104 	bicge.w	r1, r1, #4
 8007af0:	6021      	strge	r1, [r4, #0]
 8007af2:	b90e      	cbnz	r6, 8007af8 <_printf_i+0x114>
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	d04b      	beq.n	8007b90 <_printf_i+0x1ac>
 8007af8:	4615      	mov	r5, r2
 8007afa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007afe:	fb03 6711 	mls	r7, r3, r1, r6
 8007b02:	5dc7      	ldrb	r7, [r0, r7]
 8007b04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b08:	4637      	mov	r7, r6
 8007b0a:	42bb      	cmp	r3, r7
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	d9f4      	bls.n	8007afa <_printf_i+0x116>
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d10b      	bne.n	8007b2c <_printf_i+0x148>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07de      	lsls	r6, r3, #31
 8007b18:	d508      	bpl.n	8007b2c <_printf_i+0x148>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	4299      	cmp	r1, r3
 8007b20:	bfde      	ittt	le
 8007b22:	2330      	movle	r3, #48	; 0x30
 8007b24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b2c:	1b52      	subs	r2, r2, r5
 8007b2e:	6122      	str	r2, [r4, #16]
 8007b30:	f8cd a000 	str.w	sl, [sp]
 8007b34:	464b      	mov	r3, r9
 8007b36:	aa03      	add	r2, sp, #12
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f7ff fee4 	bl	8007908 <_printf_common>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d14a      	bne.n	8007bda <_printf_i+0x1f6>
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	b004      	add	sp, #16
 8007b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	f043 0320 	orr.w	r3, r3, #32
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	4833      	ldr	r0, [pc, #204]	; (8007c24 <_printf_i+0x240>)
 8007b58:	2778      	movs	r7, #120	; 0x78
 8007b5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	6829      	ldr	r1, [r5, #0]
 8007b62:	061f      	lsls	r7, r3, #24
 8007b64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b68:	d402      	bmi.n	8007b70 <_printf_i+0x18c>
 8007b6a:	065f      	lsls	r7, r3, #25
 8007b6c:	bf48      	it	mi
 8007b6e:	b2b6      	uxthmi	r6, r6
 8007b70:	07df      	lsls	r7, r3, #31
 8007b72:	bf48      	it	mi
 8007b74:	f043 0320 	orrmi.w	r3, r3, #32
 8007b78:	6029      	str	r1, [r5, #0]
 8007b7a:	bf48      	it	mi
 8007b7c:	6023      	strmi	r3, [r4, #0]
 8007b7e:	b91e      	cbnz	r6, 8007b88 <_printf_i+0x1a4>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	f023 0320 	bic.w	r3, r3, #32
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	2310      	movs	r3, #16
 8007b8a:	e7a7      	b.n	8007adc <_printf_i+0xf8>
 8007b8c:	4824      	ldr	r0, [pc, #144]	; (8007c20 <_printf_i+0x23c>)
 8007b8e:	e7e4      	b.n	8007b5a <_printf_i+0x176>
 8007b90:	4615      	mov	r5, r2
 8007b92:	e7bd      	b.n	8007b10 <_printf_i+0x12c>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	6826      	ldr	r6, [r4, #0]
 8007b98:	6961      	ldr	r1, [r4, #20]
 8007b9a:	1d18      	adds	r0, r3, #4
 8007b9c:	6028      	str	r0, [r5, #0]
 8007b9e:	0635      	lsls	r5, r6, #24
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	d501      	bpl.n	8007ba8 <_printf_i+0x1c4>
 8007ba4:	6019      	str	r1, [r3, #0]
 8007ba6:	e002      	b.n	8007bae <_printf_i+0x1ca>
 8007ba8:	0670      	lsls	r0, r6, #25
 8007baa:	d5fb      	bpl.n	8007ba4 <_printf_i+0x1c0>
 8007bac:	8019      	strh	r1, [r3, #0]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	4615      	mov	r5, r2
 8007bb4:	e7bc      	b.n	8007b30 <_printf_i+0x14c>
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	602a      	str	r2, [r5, #0]
 8007bbc:	681d      	ldr	r5, [r3, #0]
 8007bbe:	6862      	ldr	r2, [r4, #4]
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f7f8 fb94 	bl	80002f0 <memchr>
 8007bc8:	b108      	cbz	r0, 8007bce <_printf_i+0x1ea>
 8007bca:	1b40      	subs	r0, r0, r5
 8007bcc:	6060      	str	r0, [r4, #4]
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd8:	e7aa      	b.n	8007b30 <_printf_i+0x14c>
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4649      	mov	r1, r9
 8007be0:	4640      	mov	r0, r8
 8007be2:	47d0      	blx	sl
 8007be4:	3001      	adds	r0, #1
 8007be6:	d0ad      	beq.n	8007b44 <_printf_i+0x160>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	079b      	lsls	r3, r3, #30
 8007bec:	d413      	bmi.n	8007c16 <_printf_i+0x232>
 8007bee:	68e0      	ldr	r0, [r4, #12]
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	4298      	cmp	r0, r3
 8007bf4:	bfb8      	it	lt
 8007bf6:	4618      	movlt	r0, r3
 8007bf8:	e7a6      	b.n	8007b48 <_printf_i+0x164>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	47d0      	blx	sl
 8007c04:	3001      	adds	r0, #1
 8007c06:	d09d      	beq.n	8007b44 <_printf_i+0x160>
 8007c08:	3501      	adds	r5, #1
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	9903      	ldr	r1, [sp, #12]
 8007c0e:	1a5b      	subs	r3, r3, r1
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dcf2      	bgt.n	8007bfa <_printf_i+0x216>
 8007c14:	e7eb      	b.n	8007bee <_printf_i+0x20a>
 8007c16:	2500      	movs	r5, #0
 8007c18:	f104 0619 	add.w	r6, r4, #25
 8007c1c:	e7f5      	b.n	8007c0a <_printf_i+0x226>
 8007c1e:	bf00      	nop
 8007c20:	08007da5 	.word	0x08007da5
 8007c24:	08007db6 	.word	0x08007db6

08007c28 <memmove>:
 8007c28:	4288      	cmp	r0, r1
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	eb01 0402 	add.w	r4, r1, r2
 8007c30:	d902      	bls.n	8007c38 <memmove+0x10>
 8007c32:	4284      	cmp	r4, r0
 8007c34:	4623      	mov	r3, r4
 8007c36:	d807      	bhi.n	8007c48 <memmove+0x20>
 8007c38:	1e43      	subs	r3, r0, #1
 8007c3a:	42a1      	cmp	r1, r4
 8007c3c:	d008      	beq.n	8007c50 <memmove+0x28>
 8007c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c46:	e7f8      	b.n	8007c3a <memmove+0x12>
 8007c48:	4402      	add	r2, r0
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	428a      	cmp	r2, r1
 8007c4e:	d100      	bne.n	8007c52 <memmove+0x2a>
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c5a:	e7f7      	b.n	8007c4c <memmove+0x24>

08007c5c <_sbrk_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d06      	ldr	r5, [pc, #24]	; (8007c78 <_sbrk_r+0x1c>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7f9 fbb6 	bl	80013d8 <_sbrk>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_sbrk_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_sbrk_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	2400098c 	.word	0x2400098c

08007c7c <memcpy>:
 8007c7c:	440a      	add	r2, r1
 8007c7e:	4291      	cmp	r1, r2
 8007c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c84:	d100      	bne.n	8007c88 <memcpy+0xc>
 8007c86:	4770      	bx	lr
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c92:	4291      	cmp	r1, r2
 8007c94:	d1f9      	bne.n	8007c8a <memcpy+0xe>
 8007c96:	bd10      	pop	{r4, pc}

08007c98 <_realloc_r>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	460e      	mov	r6, r1
 8007ca2:	b921      	cbnz	r1, 8007cae <_realloc_r+0x16>
 8007ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	4611      	mov	r1, r2
 8007caa:	f7ff bc49 	b.w	8007540 <_malloc_r>
 8007cae:	b92a      	cbnz	r2, 8007cbc <_realloc_r+0x24>
 8007cb0:	f7ff fbda 	bl	8007468 <_free_r>
 8007cb4:	4625      	mov	r5, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbc:	f000 f81b 	bl	8007cf6 <_malloc_usable_size_r>
 8007cc0:	4284      	cmp	r4, r0
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	d802      	bhi.n	8007ccc <_realloc_r+0x34>
 8007cc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cca:	d812      	bhi.n	8007cf2 <_realloc_r+0x5a>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f7ff fc36 	bl	8007540 <_malloc_r>
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0ed      	beq.n	8007cb6 <_realloc_r+0x1e>
 8007cda:	42bc      	cmp	r4, r7
 8007cdc:	4622      	mov	r2, r4
 8007cde:	4631      	mov	r1, r6
 8007ce0:	bf28      	it	cs
 8007ce2:	463a      	movcs	r2, r7
 8007ce4:	f7ff ffca 	bl	8007c7c <memcpy>
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4640      	mov	r0, r8
 8007cec:	f7ff fbbc 	bl	8007468 <_free_r>
 8007cf0:	e7e1      	b.n	8007cb6 <_realloc_r+0x1e>
 8007cf2:	4635      	mov	r5, r6
 8007cf4:	e7df      	b.n	8007cb6 <_realloc_r+0x1e>

08007cf6 <_malloc_usable_size_r>:
 8007cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cfa:	1f18      	subs	r0, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfbc      	itt	lt
 8007d00:	580b      	ldrlt	r3, [r1, r0]
 8007d02:	18c0      	addlt	r0, r0, r3
 8007d04:	4770      	bx	lr
	...

08007d08 <_init>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr

08007d14 <_fini>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr
